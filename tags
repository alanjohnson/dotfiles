!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/744610c/
$(SRC_LINK)	vim/pack/minpac/start/fzf/Makefile	/^$(SRC_LINK):$/;"	t
$(VENDOR_LINK)	vim/pack/minpac/start/fzf/Makefile	/^$(VENDOR_LINK):$/;"	t
$TMPDIR	vim/pack/minpac/start/ale/plugin/ale.vim	/^    let $TMPDIR = '\/tmp'$/;"	v
$TMPDIR	vim/pack/minpac/start/ale/test/.config/nvim/init.vim	/^let $TMPDIR = ''$/;"	v
$TMPDIR	vim/pack/minpac/start/ale/test/vimrc	/^let $TMPDIR = ''$/;"	v
%	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
%	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
%	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
(-[udlr]: up/down/left/right)	vim/pack/minpac/start/fzf/README.md	/^#        (-[udlr]: up\/down\/left\/right)$/;"	c
*Backward incompatible changes*	vim/pack/minpac/start/fzf/CHANGELOG.md	/^### *Backward incompatible changes*$/;"	S
- See the source code (completion.{bash,zsh}) for the details.	vim/pack/minpac/start/fzf/README.md	/^# - See the source code (completion.{bash,zsh}) for the details.$/;"	c
- The first argument to the function ($1) is the base path to start traversal	vim/pack/minpac/start/fzf/README.md	/^# - The first argument to the function ($1) is the base path to start traversal$/;"	c
- You can select multiple items with TAB key	vim/pack/minpac/start/fzf/README.md	/^# - You can select multiple items with TAB key$/;"	c
.vim.res	vim/pack/minpac/opt/minpac/test/Make_win.mak	/^.vim.res:$/;"	t
.vim.res	vim/pack/minpac/opt/minpac/test/Makefile	/^.vim.res:$/;"	t
0	eslintrc.json	/^        ["&&", "||"],$/;"	s	array:rules.no-mixed-operators.1.groups.1
0	eslintrc.json	/^        ["==", "!=", "===", "!==", ">", ">=", "<", "<="],$/;"	a	array:rules.no-mixed-operators.1.groups
0	eslintrc.json	/^        ["==", "!=", "===", "!==", ">", ">=", "<", "<="],$/;"	s	array:rules.no-mixed-operators.1.groups.0
0	eslintrc.json	/^        ["in", "instanceof"]$/;"	s	array:rules.no-mixed-operators.1.groups.2
0	eslintrc.json	/^      "CallExpression": ["error", { "arguments": 1 }],$/;"	s	array:rules.CallExpression
0	eslintrc.json	/^      "FunctionDeclaration": ["error", { "parameters": 1, "body": 1 }],$/;"	s	array:rules.FunctionDeclaration
0	eslintrc.json	/^      "FunctionExpression": ["error", { "parameters": 1, "body": 1 }],$/;"	s	array:rules.FunctionExpression
0	eslintrc.json	/^      "block": { "balanced": true, "markers": ["*package", "!", ",", ":", "::", "flow-include"],/;"	s	array:rules.spaced-comment.2.block.exceptions
0	eslintrc.json	/^      "block": { "balanced": true, "markers": ["*package", "!", ",", ":", "::", "flow-include"],/;"	s	array:rules.spaced-comment.2.block.markers
0	eslintrc.json	/^      "line": { "markers": ["*package", "!", "\/", ",", "="] },$/;"	s	array:rules.spaced-comment.2.line.markers
0	eslintrc.json	/^    "arrow-spacing": ["error", { "before": true, "after": true }],$/;"	s	array:rules.arrow-spacing
0	eslintrc.json	/^    "block-spacing": ["error", "always"],$/;"	s	array:rules.block-spacing
0	eslintrc.json	/^    "brace-style": ["error", "1tbs", { "allowSingleLine": true }],$/;"	s	array:rules.brace-style
0	eslintrc.json	/^    "camelcase": ["error", { "properties": "never" }],$/;"	s	array:rules.camelcase
0	eslintrc.json	/^    "comma-dangle": ["error", {$/;"	s	array:rules.comma-dangle
0	eslintrc.json	/^    "comma-spacing": ["error", { "before": false, "after": true }],$/;"	s	array:rules.comma-spacing
0	eslintrc.json	/^    "comma-style": ["error", "last"],$/;"	s	array:rules.comma-style
0	eslintrc.json	/^    "curly": ["error", "multi-line"],$/;"	s	array:rules.curly
0	eslintrc.json	/^    "dot-location": ["error", "property"],$/;"	s	array:rules.dot-location
0	eslintrc.json	/^    "eqeqeq": ["error", "always", { "null": "ignore" }],$/;"	s	array:rules.eqeqeq
0	eslintrc.json	/^    "func-call-spacing": ["error", "never"],$/;"	s	array:rules.func-call-spacing
0	eslintrc.json	/^    "generator-star-spacing": ["error", { "before": true, "after": true }],$/;"	s	array:rules.generator-star-spacing
0	eslintrc.json	/^    "handle-callback-err": ["error", "^(err|error)$" ],$/;"	s	array:rules.handle-callback-err
0	eslintrc.json	/^    "import",$/;"	s	array:plugins
0	eslintrc.json	/^    "indent": ["error", 2],$/;"	s	array:rules.indent
0	eslintrc.json	/^    "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],$/;"	s	array:rules.key-spacing
0	eslintrc.json	/^    "keyword-spacing": ["error", { "before": true, "after": true }],$/;"	s	array:rules.keyword-spacing
0	eslintrc.json	/^    "new-cap": ["error", { "newIsCap": true, "capIsNew": false }],$/;"	s	array:rules.new-cap
0	eslintrc.json	/^    "no-constant-condition": ["error", { "checkLoops": false }],$/;"	s	array:rules.no-constant-condition
0	eslintrc.json	/^    "no-extra-parens": ["error", "functions"],$/;"	s	array:rules.no-extra-parens
0	eslintrc.json	/^    "no-inner-declarations": ["error", "functions"],$/;"	s	array:rules.no-inner-declarations
0	eslintrc.json	/^    "no-labels": ["error", { "allowLoop": false, "allowSwitch": false }],$/;"	s	array:rules.no-labels
0	eslintrc.json	/^    "no-mixed-operators": ["error", {$/;"	s	array:rules.no-mixed-operators
0	eslintrc.json	/^    "no-multiple-empty-lines": ["error", { "max": 1, "maxEOF": 0 }],$/;"	s	array:rules.no-multiple-empty-lines
0	eslintrc.json	/^    "no-return-assign": ["error", "except-parens"],$/;"	s	array:rules.no-return-assign
0	eslintrc.json	/^    "no-unneeded-ternary": ["error", { "defaultAssignment": false }],$/;"	s	array:rules.no-unneeded-ternary
0	eslintrc.json	/^    "no-unused-expressions": ["error", { "allowShortCircuit": true, "allowTernary": true, "allow/;"	s	array:rules.no-unused-expressions
0	eslintrc.json	/^    "no-unused-vars": ["error", { "vars": "all", "args": "none", "ignoreRestSiblings": true }],$/;"	s	array:rules.no-unused-vars
0	eslintrc.json	/^    "no-use-before-define": ["error", { "functions": false, "classes": false, "variables": false/;"	s	array:rules.no-use-before-define
0	eslintrc.json	/^    "object-property-newline": ["error", { "allowMultiplePropertiesPerLine": true }],$/;"	s	array:rules.object-property-newline
0	eslintrc.json	/^    "one-var": ["error", { "initialized": "never" }],$/;"	s	array:rules.one-var
0	eslintrc.json	/^    "operator-linebreak": ["error", "after", { "overrides": { "?": "before", ":": "before" } }],$/;"	s	array:rules.operator-linebreak
0	eslintrc.json	/^    "padded-blocks": ["error", { "blocks": "never", "switches": "never", "classes": "never" }],$/;"	s	array:rules.padded-blocks
0	eslintrc.json	/^    "quotes": ["error", "single", { "avoidEscape": true, "allowTemplateLiterals": true }],$/;"	s	array:rules.quotes
0	eslintrc.json	/^    "rest-spread-spacing": ["error", "never"],$/;"	s	array:rules.rest-spread-spacing
0	eslintrc.json	/^    "semi-spacing": ["error", { "before": false, "after": true }],$/;"	s	array:rules.semi-spacing
0	eslintrc.json	/^    "space-before-function-paren": ["error", "always"],$/;"	s	array:rules.space-before-function-paren
0	eslintrc.json	/^    "space-unary-ops": ["error", { "words": true, "nonwords": false }],$/;"	s	array:rules.space-unary-ops
0	eslintrc.json	/^    "spaced-comment": ["error", "always", {$/;"	s	array:rules.spaced-comment
0	eslintrc.json	/^    "standard\/array-bracket-even-spacing": ["error", "either"],$/;"	s	array:rules.standard/array-bracket-even-spacing
0	eslintrc.json	/^    "standard\/computed-property-even-spacing": ["error", "even"],$/;"	s	array:rules.standard/computed-property-even-spacing
0	eslintrc.json	/^    "standard\/object-curly-even-spacing": ["error", "either"]$/;"	s	array:rules.standard/object-curly-even-spacing
0	eslintrc.json	/^    "template-curly-spacing": ["error", "never"],$/;"	s	array:rules.template-curly-spacing
0	eslintrc.json	/^    "template-tag-spacing": ["error", "never"],$/;"	s	array:rules.template-tag-spacing
0	eslintrc.json	/^    "unicode-bom": ["error", "never"],$/;"	s	array:rules.unicode-bom
0	eslintrc.json	/^    "valid-typeof": ["error", { "requireStringLiterals": true }],$/;"	s	array:rules.valid-typeof
0	eslintrc.json	/^    "wrap-iife": ["error", "any", { "functionPrototypeMethods": true }],$/;"	s	array:rules.wrap-iife
0	eslintrc.json	/^    "yield-star-spacing": ["error", "both"],$/;"	s	array:rules.yield-star-spacing
0	eslintrc.json	/^    "yoda": ["error", "never"],$/;"	s	array:rules.yoda
0.10.0	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.10.0$/;"	s
0.10.1	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.10.1$/;"	s
0.10.2	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.10.2$/;"	s
0.10.3	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.10.3$/;"	s
0.10.4	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.10.4$/;"	s
0.10.5	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.10.5$/;"	s
0.10.6	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.10.6$/;"	s
0.10.7	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.10.7$/;"	s
0.10.8	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.10.8$/;"	s
0.10.9	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.10.9$/;"	s
0.11.0	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.11.0$/;"	s
0.11.1	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.11.1$/;"	s
0.11.2	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.11.2$/;"	s
0.11.3	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.11.3$/;"	s
0.11.4	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.11.4$/;"	s
0.12.0	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.12.0$/;"	s
0.12.1	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.12.1$/;"	s
0.12.2	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.12.2$/;"	s
0.13.0	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.13.0$/;"	s
0.13.1	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.13.1$/;"	s
0.13.2	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.13.2$/;"	s
0.13.3	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.13.3$/;"	s
0.13.4	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.13.4$/;"	s
0.13.5	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.13.5$/;"	s
0.15.0	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.15.0$/;"	s
0.15.1	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.15.1$/;"	s
0.15.2	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.15.2$/;"	s
0.15.3	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.15.3$/;"	s
0.15.4	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.15.4$/;"	s
0.15.5	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.15.5$/;"	s
0.15.6	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.15.6$/;"	s
0.15.7	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.15.7$/;"	s
0.15.8	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.15.8$/;"	s
0.15.9	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.15.9$/;"	s
0.16.0	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.16.0$/;"	s
0.16.1	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.16.1$/;"	s
0.16.10	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.16.10$/;"	s
0.16.11	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.16.11$/;"	s
0.16.2	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.16.2$/;"	s
0.16.3	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.16.3$/;"	s
0.16.4	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.16.4$/;"	s
0.16.5	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.16.5$/;"	s
0.16.6	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.16.6$/;"	s
0.16.7	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.16.7$/;"	s
0.16.8	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.16.8$/;"	s
0.16.9	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.16.9$/;"	s
0.17.0	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.17.0$/;"	s
0.17.0-2	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.17.0-2$/;"	s
0.17.1	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.17.1$/;"	s
0.17.3	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.17.3$/;"	s
0.9.10	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.9.10$/;"	s
0.9.11	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.9.11$/;"	s
0.9.12	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.9.12$/;"	s
0.9.13	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.9.13$/;"	s
0.9.3	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.9.3$/;"	s
0.9.4	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.9.4$/;"	s
0.9.5	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.9.5$/;"	s
0.9.6	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.9.6$/;"	s
0.9.7	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.9.7$/;"	s
0.9.8	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.9.8$/;"	s
0.9.9	vim/pack/minpac/start/fzf/CHANGELOG.md	/^0.9.9$/;"	s
1	eslintrc.json	/^        ["&&", "||"],$/;"	a	array:rules.no-mixed-operators.1.groups
1	eslintrc.json	/^        ["&&", "||"],$/;"	s	array:rules.no-mixed-operators.1.groups.1
1	eslintrc.json	/^        ["==", "!=", "===", "!==", ">", ">=", "<", "<="],$/;"	s	array:rules.no-mixed-operators.1.groups.0
1	eslintrc.json	/^        ["in", "instanceof"]$/;"	s	array:rules.no-mixed-operators.1.groups.2
1	eslintrc.json	/^      "CallExpression": ["error", { "arguments": 1 }],$/;"	o	array:rules.CallExpression
1	eslintrc.json	/^      "FunctionDeclaration": ["error", { "parameters": 1, "body": 1 }],$/;"	o	array:rules.FunctionDeclaration
1	eslintrc.json	/^      "FunctionExpression": ["error", { "parameters": 1, "body": 1 }],$/;"	o	array:rules.FunctionExpression
1	eslintrc.json	/^      "block": { "balanced": true, "markers": ["*package", "!", ",", ":", "::", "flow-include"],/;"	s	array:rules.spaced-comment.2.block.markers
1	eslintrc.json	/^      "line": { "markers": ["*package", "!", "\/", ",", "="] },$/;"	s	array:rules.spaced-comment.2.line.markers
1	eslintrc.json	/^    "arrow-spacing": ["error", { "before": true, "after": true }],$/;"	o	array:rules.arrow-spacing
1	eslintrc.json	/^    "block-spacing": ["error", "always"],$/;"	s	array:rules.block-spacing
1	eslintrc.json	/^    "brace-style": ["error", "1tbs", { "allowSingleLine": true }],$/;"	s	array:rules.brace-style
1	eslintrc.json	/^    "camelcase": ["error", { "properties": "never" }],$/;"	o	array:rules.camelcase
1	eslintrc.json	/^    "comma-dangle": ["error", {$/;"	o	array:rules.comma-dangle
1	eslintrc.json	/^    "comma-spacing": ["error", { "before": false, "after": true }],$/;"	o	array:rules.comma-spacing
1	eslintrc.json	/^    "comma-style": ["error", "last"],$/;"	s	array:rules.comma-style
1	eslintrc.json	/^    "curly": ["error", "multi-line"],$/;"	s	array:rules.curly
1	eslintrc.json	/^    "dot-location": ["error", "property"],$/;"	s	array:rules.dot-location
1	eslintrc.json	/^    "eqeqeq": ["error", "always", { "null": "ignore" }],$/;"	s	array:rules.eqeqeq
1	eslintrc.json	/^    "func-call-spacing": ["error", "never"],$/;"	s	array:rules.func-call-spacing
1	eslintrc.json	/^    "generator-star-spacing": ["error", { "before": true, "after": true }],$/;"	o	array:rules.generator-star-spacing
1	eslintrc.json	/^    "handle-callback-err": ["error", "^(err|error)$" ],$/;"	s	array:rules.handle-callback-err
1	eslintrc.json	/^    "indent": ["error", 2],$/;"	n	array:rules.indent
1	eslintrc.json	/^    "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],$/;"	o	array:rules.key-spacing
1	eslintrc.json	/^    "keyword-spacing": ["error", { "before": true, "after": true }],$/;"	o	array:rules.keyword-spacing
1	eslintrc.json	/^    "new-cap": ["error", { "newIsCap": true, "capIsNew": false }],$/;"	o	array:rules.new-cap
1	eslintrc.json	/^    "no-constant-condition": ["error", { "checkLoops": false }],$/;"	o	array:rules.no-constant-condition
1	eslintrc.json	/^    "no-extra-parens": ["error", "functions"],$/;"	s	array:rules.no-extra-parens
1	eslintrc.json	/^    "no-inner-declarations": ["error", "functions"],$/;"	s	array:rules.no-inner-declarations
1	eslintrc.json	/^    "no-labels": ["error", { "allowLoop": false, "allowSwitch": false }],$/;"	o	array:rules.no-labels
1	eslintrc.json	/^    "no-mixed-operators": ["error", {$/;"	o	array:rules.no-mixed-operators
1	eslintrc.json	/^    "no-multiple-empty-lines": ["error", { "max": 1, "maxEOF": 0 }],$/;"	o	array:rules.no-multiple-empty-lines
1	eslintrc.json	/^    "no-return-assign": ["error", "except-parens"],$/;"	s	array:rules.no-return-assign
1	eslintrc.json	/^    "no-unneeded-ternary": ["error", { "defaultAssignment": false }],$/;"	o	array:rules.no-unneeded-ternary
1	eslintrc.json	/^    "no-unused-expressions": ["error", { "allowShortCircuit": true, "allowTernary": true, "allow/;"	o	array:rules.no-unused-expressions
1	eslintrc.json	/^    "no-unused-vars": ["error", { "vars": "all", "args": "none", "ignoreRestSiblings": true }],$/;"	o	array:rules.no-unused-vars
1	eslintrc.json	/^    "no-use-before-define": ["error", { "functions": false, "classes": false, "variables": false/;"	o	array:rules.no-use-before-define
1	eslintrc.json	/^    "node",$/;"	s	array:plugins
1	eslintrc.json	/^    "object-property-newline": ["error", { "allowMultiplePropertiesPerLine": true }],$/;"	o	array:rules.object-property-newline
1	eslintrc.json	/^    "one-var": ["error", { "initialized": "never" }],$/;"	o	array:rules.one-var
1	eslintrc.json	/^    "operator-linebreak": ["error", "after", { "overrides": { "?": "before", ":": "before" } }],$/;"	s	array:rules.operator-linebreak
1	eslintrc.json	/^    "padded-blocks": ["error", { "blocks": "never", "switches": "never", "classes": "never" }],$/;"	o	array:rules.padded-blocks
1	eslintrc.json	/^    "quotes": ["error", "single", { "avoidEscape": true, "allowTemplateLiterals": true }],$/;"	s	array:rules.quotes
1	eslintrc.json	/^    "rest-spread-spacing": ["error", "never"],$/;"	s	array:rules.rest-spread-spacing
1	eslintrc.json	/^    "semi-spacing": ["error", { "before": false, "after": true }],$/;"	o	array:rules.semi-spacing
1	eslintrc.json	/^    "space-before-function-paren": ["error", "always"],$/;"	s	array:rules.space-before-function-paren
1	eslintrc.json	/^    "space-unary-ops": ["error", { "words": true, "nonwords": false }],$/;"	o	array:rules.space-unary-ops
1	eslintrc.json	/^    "spaced-comment": ["error", "always", {$/;"	s	array:rules.spaced-comment
1	eslintrc.json	/^    "standard\/array-bracket-even-spacing": ["error", "either"],$/;"	s	array:rules.standard/array-bracket-even-spacing
1	eslintrc.json	/^    "standard\/computed-property-even-spacing": ["error", "even"],$/;"	s	array:rules.standard/computed-property-even-spacing
1	eslintrc.json	/^    "standard\/object-curly-even-spacing": ["error", "either"]$/;"	s	array:rules.standard/object-curly-even-spacing
1	eslintrc.json	/^    "template-curly-spacing": ["error", "never"],$/;"	s	array:rules.template-curly-spacing
1	eslintrc.json	/^    "template-tag-spacing": ["error", "never"],$/;"	s	array:rules.template-tag-spacing
1	eslintrc.json	/^    "unicode-bom": ["error", "never"],$/;"	s	array:rules.unicode-bom
1	eslintrc.json	/^    "valid-typeof": ["error", { "requireStringLiterals": true }],$/;"	o	array:rules.valid-typeof
1	eslintrc.json	/^    "wrap-iife": ["error", "any", { "functionPrototypeMethods": true }],$/;"	s	array:rules.wrap-iife
1	eslintrc.json	/^    "yield-star-spacing": ["error", "both"],$/;"	s	array:rules.yield-star-spacing
1	eslintrc.json	/^    "yoda": ["error", "never"],$/;"	s	array:rules.yoda
1. Guidelines	vim/pack/minpac/start/ale/CONTRIBUTING.md	/^## 1. Guidelines$/;"	s
1. Supported Languages and Tools	vim/pack/minpac/start/ale/README.md	/^## 1. Supported Languages and Tools$/;"	s
2	eslintrc.json	/^        ["==", "!=", "===", "!==", ">", ">=", "<", "<="],$/;"	s	array:rules.no-mixed-operators.1.groups.0
2	eslintrc.json	/^        ["in", "instanceof"]$/;"	a	array:rules.no-mixed-operators.1.groups
2	eslintrc.json	/^      "block": { "balanced": true, "markers": ["*package", "!", ",", ":", "::", "flow-include"],/;"	s	array:rules.spaced-comment.2.block.markers
2	eslintrc.json	/^      "line": { "markers": ["*package", "!", "\/", ",", "="] },$/;"	s	array:rules.spaced-comment.2.line.markers
2	eslintrc.json	/^    "brace-style": ["error", "1tbs", { "allowSingleLine": true }],$/;"	o	array:rules.brace-style
2	eslintrc.json	/^    "eqeqeq": ["error", "always", { "null": "ignore" }],$/;"	o	array:rules.eqeqeq
2	eslintrc.json	/^    "operator-linebreak": ["error", "after", { "overrides": { "?": "before", ":": "before" } }],$/;"	o	array:rules.operator-linebreak
2	eslintrc.json	/^    "promise",$/;"	s	array:plugins
2	eslintrc.json	/^    "quotes": ["error", "single", { "avoidEscape": true, "allowTemplateLiterals": true }],$/;"	o	array:rules.quotes
2	eslintrc.json	/^    "spaced-comment": ["error", "always", {$/;"	o	array:rules.spaced-comment
2	eslintrc.json	/^    "wrap-iife": ["error", "any", { "functionPrototypeMethods": true }],$/;"	o	array:rules.wrap-iife
2. Creating Issues	vim/pack/minpac/start/ale/CONTRIBUTING.md	/^## 2. Creating Issues$/;"	s
2. Usage	vim/pack/minpac/start/ale/README.md	/^## 2. Usage$/;"	s
2.i Linting	vim/pack/minpac/start/ale/README.md	/^### 2.i Linting$/;"	S
2.ii Fixing	vim/pack/minpac/start/ale/README.md	/^### 2.ii Fixing$/;"	S
2.iii Completion	vim/pack/minpac/start/ale/README.md	/^### 2.iii Completion$/;"	S
2.iv Go To Definition	vim/pack/minpac/start/ale/README.md	/^### 2.iv Go To Definition$/;"	S
2.v Find References	vim/pack/minpac/start/ale/README.md	/^### 2.v Find References$/;"	S
2.vi Hovering	vim/pack/minpac/start/ale/README.md	/^### 2.vi Hovering$/;"	S
3	eslintrc.json	/^        ["==", "!=", "===", "!==", ">", ">=", "<", "<="],$/;"	s	array:rules.no-mixed-operators.1.groups.0
3	eslintrc.json	/^      "block": { "balanced": true, "markers": ["*package", "!", ",", ":", "::", "flow-include"],/;"	s	array:rules.spaced-comment.2.block.markers
3	eslintrc.json	/^      "line": { "markers": ["*package", "!", "\/", ",", "="] },$/;"	s	array:rules.spaced-comment.2.line.markers
3	eslintrc.json	/^    "standard"$/;"	s	array:plugins
3. Creating Pull Requests	vim/pack/minpac/start/ale/CONTRIBUTING.md	/^## 3. Creating Pull Requests$/;"	s
3. Installation	vim/pack/minpac/start/ale/README.md	/^## 3. Installation$/;"	s
3.i. Adding a New Linter	vim/pack/minpac/start/ale/CONTRIBUTING.md	/^### 3.i. Adding a New Linter$/;"	S
3.i. Installation with Vim package management	vim/pack/minpac/start/ale/README.md	/^### 3.i. Installation with Vim package management$/;"	S
3.ii. Adding New Options	vim/pack/minpac/start/ale/CONTRIBUTING.md	/^### 3.ii. Adding New Options$/;"	S
3.ii. Installation with Pathogen	vim/pack/minpac/start/ale/README.md	/^### 3.ii. Installation with Pathogen$/;"	S
3.iii. Installation with Vundle	vim/pack/minpac/start/ale/README.md	/^### 3.iii. Installation with Vundle$/;"	S
4	eslintrc.json	/^        ["==", "!=", "===", "!==", ">", ">=", "<", "<="],$/;"	s	array:rules.no-mixed-operators.1.groups.0
4	eslintrc.json	/^      "block": { "balanced": true, "markers": ["*package", "!", ",", ":", "::", "flow-include"],/;"	s	array:rules.spaced-comment.2.block.markers
4	eslintrc.json	/^      "line": { "markers": ["*package", "!", "\/", ",", "="] },$/;"	s	array:rules.spaced-comment.2.line.markers
4. Contributing	vim/pack/minpac/start/ale/README.md	/^## 4. Contributing$/;"	s
4. Writing Documentation	vim/pack/minpac/start/ale/CONTRIBUTING.md	/^## 4. Writing Documentation$/;"	s
4.i Documenting New Linters	vim/pack/minpac/start/ale/CONTRIBUTING.md	/^### 4.i Documenting New Linters$/;"	S
4.ii Editing the Online Documentation	vim/pack/minpac/start/ale/CONTRIBUTING.md	/^### 4.ii Editing the Online Documentation$/;"	S
4.iii Documenting Linter Options	vim/pack/minpac/start/ale/CONTRIBUTING.md	/^### 4.iii Documenting Linter Options$/;"	S
5	eslintrc.json	/^        ["==", "!=", "===", "!==", ">", ">=", "<", "<="],$/;"	s	array:rules.no-mixed-operators.1.groups.0
5	eslintrc.json	/^      "block": { "balanced": true, "markers": ["*package", "!", ",", ":", "::", "flow-include"],/;"	s	array:rules.spaced-comment.2.block.markers
5. FAQ	vim/pack/minpac/start/ale/README.md	/^## 5. FAQ$/;"	s
5. In Case of Busses	vim/pack/minpac/start/ale/CONTRIBUTING.md	/^## 5. In Case of Busses$/;"	s
5.i. How do I disable particular linters?	vim/pack/minpac/start/ale/README.md	/^### 5.i. How do I disable particular linters?$/;"	S
5.ii. How can I keep the sign gutter open?	vim/pack/minpac/start/ale/README.md	/^### 5.ii. How can I keep the sign gutter open?$/;"	S
5.iii. How can I change the signs ALE uses?	vim/pack/minpac/start/ale/README.md	/^### 5.iii. How can I change the signs ALE uses?$/;"	S
5.iv. How can I change or disable the highlights ALE uses?	vim/pack/minpac/start/ale/README.md	/^### 5.iv. How can I change or disable the highlights ALE uses?$/;"	S
5.ix. How can I navigate between errors quickly?	vim/pack/minpac/start/ale/README.md	/^### 5.ix. How can I navigate between errors quickly?$/;"	S
5.v. How can I show errors or warnings in my statusline?	vim/pack/minpac/start/ale/README.md	/^### 5.v. How can I show errors or warnings in my statusline?$/;"	S
5.vi. How can I show errors or warnings in my lightline?	vim/pack/minpac/start/ale/README.md	/^### 5.vi. How can I show errors or warnings in my lightline?$/;"	S
5.vii. How can I change the format for echo messages?	vim/pack/minpac/start/ale/README.md	/^### 5.vii. How can I change the format for echo messages?$/;"	S
5.viii. How can I execute some code when ALE starts or stops linting?	vim/pack/minpac/start/ale/README.md	/^### 5.viii. How can I execute some code when ALE starts or stops linting?$/;"	S
5.x. How can I run linters only when I save files?	vim/pack/minpac/start/ale/README.md	/^### 5.x. How can I run linters only when I save files?$/;"	S
5.xi. How can I use the quickfix list instead of the loclist?	vim/pack/minpac/start/ale/README.md	/^### 5.xi. How can I use the quickfix list instead of the loclist?$/;"	S
5.xii. How can I check JSX files with both stylelint and eslint?	vim/pack/minpac/start/ale/README.md	/^### 5.xii. How can I check JSX files with both stylelint and eslint?$/;"	S
5.xiii. Will this plugin eat all of my laptop battery power?	vim/pack/minpac/start/ale/README.md	/^### 5.xiii. Will this plugin eat all of my laptop battery power?$/;"	S
5.xiv. How can I configure my C or C++ project?	vim/pack/minpac/start/ale/README.md	/^### 5.xiv. How can I configure my C or C++ project?$/;"	S
5.xv. How can I configure ALE differently for different buffers?	vim/pack/minpac/start/ale/README.md	/^### 5.xv. How can I configure ALE differently for different buffers?$/;"	S
5.xvi. How can I configure the height of the list in which ALE displays errors?	vim/pack/minpac/start/ale/README.md	/^### 5.xvi. How can I configure the height of the list in which ALE displays errors?$/;"	S
6	eslintrc.json	/^        ["==", "!=", "===", "!==", ">", ">=", "<", "<="],$/;"	s	array:rules.no-mixed-operators.1.groups.0
7	eslintrc.json	/^        ["==", "!=", "===", "!==", ">", ">=", "<", "<="],$/;"	s	array:rules.no-mixed-operators.1.groups.0
:	eslintrc.json	/^    "operator-linebreak": ["error", "after", { "overrides": { "?": "before", ":": "before" } }],$/;"	s	object:rules.operator-linebreak.2.overrides
:ALEInfo	vim/pack/minpac/start/ale/ISSUE_TEMPLATE.md	/^### :ALEInfo$/;"	S
;;	vimrc	/^imap ;; <Esc>$/;"	m
<	vimrc	/^vnoremap < <gv$/;"	m
<2-LeftMouse>	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^    inoremap <script> <silent> <buffer> <2-LeftMouse>$/;"	m
<2-LeftMouse>	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^    nnoremap <script> <silent> <buffer> <2-LeftMouse>$/;"	m
<A-left>	vimrc	/^map <A-left> :tabp<CR>$/;"	m
<A-right>	vimrc	/^map <A-right> :tabn<CR>$/;"	m
<C-R><C-F>	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^    cmap <buffer>         <C-R><C-F> <Plug><cfile>$/;"	m
<C-W><C-F>	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^    nmap <buffer><silent> <C-W><C-F> <SID>:sfind <Plug><cfile><CR>$/;"	m
<C-W>f	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^    nmap <buffer><silent> <C-W>f     <SID>:sfind <Plug><cfile><CR>$/;"	m
<C-W>gf	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^    nmap <buffer><silent> <C-W>gf    <SID>:tabfind <Plug><cfile><CR>$/;"	m
<C-f>	vimrc	/^nnoremap <C-f> :<C-u>FZF<CR>$/;"	m
<C-q>	vim/pack/minpac/start/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <C-q> <NOP>$/;"	m
<C-v>	vim/pack/minpac/start/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <C-v> <NOP>$/;"	m
<CR>	vim/pack/minpac/start/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <CR> :call ale#preview#OpenSelectionInBuffer()<CR>$/;"	m
<F2>	vimrc	/^map <F2> :NERDTreeToggle<CR>:NERDTreeMirror<CR>$/;"	m
<F4>	vimrc	/^map <F4> :execute "noautocmd vimgrep \/" . expand("<cword>") . "\/j **" <Bar> cw<CR>$/;"	m
<Leader>tc	vim/pack/minpac/start/colorizer/plugin/colorizer.vim	/^  nmap <unique> <Leader>tc <Plug>Colorizer$/;"	m
<LeftRelease>	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^    inoremap <script> <silent> <buffer> <LeftRelease>$/;"	m
<LeftRelease>	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^    nnoremap <script> <silent> <buffer> <LeftRelease>$/;"	m
<Plug>(-fzf-complete-trigger)	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
<Plug>(ale_detail)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_detail) :ALEDetail<Return>$/;"	m
<Plug>(ale_disable)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_disable) :ALEDisable<Return>$/;"	m
<Plug>(ale_disable_buffer)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_disable_buffer) :ALEDisableBuffer<Return>$/;"	m
<Plug>(ale_enable)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_enable) :ALEEnable<Return>$/;"	m
<Plug>(ale_enable_buffer)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_enable_buffer) :ALEEnableBuffer<Return>$/;"	m
<Plug>(ale_find_references)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_find_references) :ALEFindReferences<Return>$/;"	m
<Plug>(ale_first)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_first) :ALEFirst<Return>$/;"	m
<Plug>(ale_fix)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_fix) :ALEFix<Return>$/;"	m
<Plug>(ale_go_to_definition)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition) :ALEGoToDefinition<Return>$/;"	m
<Plug>(ale_go_to_definition_in_tab)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_tab) :ALEGoToDefinitionInTab<Return>$/;"	m
<Plug>(ale_hover)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_hover) :ALEHover<Return>$/;"	m
<Plug>(ale_last)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_last) :ALELast<Return>$/;"	m
<Plug>(ale_lint)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_lint) :ALELint<Return>$/;"	m
<Plug>(ale_next)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next) :ALENext<Return>$/;"	m
<Plug>(ale_next_wrap)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_wrap) :ALENextWrap<Return>$/;"	m
<Plug>(ale_previous)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous) :ALEPrevious<Return>$/;"	m
<Plug>(ale_previous_wrap)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap) :ALEPreviousWrap<Return>$/;"	m
<Plug>(ale_reset)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_reset) :ALEReset<Return>$/;"	m
<Plug>(ale_reset_buffer)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_reset_buffer) :ALEResetBuffer<Return>$/;"	m
<Plug>(ale_toggle)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_toggle) :ALEToggle<Return>$/;"	m
<Plug>(ale_toggle_buffer)	vim/pack/minpac/start/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_toggle_buffer) :ALEToggleBuffer<Return>$/;"	m
<Plug><cfile>	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^  cnoremap <expr><buffer> <Plug><cfile> scriptease#cfile()$/;"	m
<Plug><cfile>	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^      cmap <buffer><script><expr> <Plug><cfile> rails#cfile()$/;"	m
<Plug>Colorizer	vim/pack/minpac/start/colorizer/plugin/colorizer.vim	/^nnoremap <silent> <Plug>Colorizer :ColorToggle<CR>$/;"	m
<Plug>ScripteaseFilter	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^nnoremap <expr> <Plug>ScripteaseFilter scriptease#filterop()$/;"	m
<Plug>ScripteaseFilter	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^xnoremap <expr> <Plug>ScripteaseFilter scriptease#filterop()$/;"	m
<Plug>ScripteaseHelp	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^  nnoremap <silent><buffer> <Plug>ScripteaseHelp :<C-U>exe 'help '.scriptease#helptopic()<CR>$/;"	m
<Plug>ScripteaseSynnames	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^nnoremap <silent> <Plug>ScripteaseSynnames :<C-U>exe scriptease#synnames_map(v:count)<CR>$/;"	m
<Plug>unimpairedBlankDown	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedBlankDown :<C-U>call <SID>BlankDown(v:count1)<CR>$/;"	m
<Plug>unimpairedBlankUp	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedBlankUp   :<C-U>call <SID>BlankUp(v:count1)<CR>$/;"	m
<Plug>unimpairedContextNext	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedContextNext     :call <SID>Context(0)<CR>$/;"	m
<Plug>unimpairedContextNext	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^onoremap <silent> <Plug>unimpairedContextNext     :call <SID>ContextMotion(0)<CR>$/;"	m
<Plug>unimpairedContextPrevious	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedContextPrevious :call <SID>Context(1)<CR>$/;"	m
<Plug>unimpairedContextPrevious	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^onoremap <silent> <Plug>unimpairedContextPrevious :call <SID>ContextMotion(1)<CR>$/;"	m
<Plug>unimpairedDirectoryNext	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedDirectoryNext     :<C-U>edit <C-R>=<SID>fnameescape(fnamemodif/;"	m
<Plug>unimpairedDirectoryPrevious	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedDirectoryPrevious :<C-U>edit <C-R>=<SID>fnameescape(fnamemodif/;"	m
<Plug>unimpairedMoveDown	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedMoveDown          :<C-U>call <SID>Move('+',v:count1,'Down')<CR/;"	m
<Plug>unimpairedMoveSelectionDown	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^noremap  <silent> <Plug>unimpairedMoveSelectionDown :<C-U>call <SID>MoveSelectionDown(v:count1)</;"	m
<Plug>unimpairedMoveSelectionUp	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^noremap  <silent> <Plug>unimpairedMoveSelectionUp   :<C-U>call <SID>MoveSelectionUp(v:count1)<CR/;"	m
<Plug>unimpairedMoveUp	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedMoveUp            :<C-U>call <SID>Move('--',v:count1,'Up')<CR>$/;"	m
<Plug>unimpairedPaste	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedPaste :call <SID>setup_paste()<CR>$/;"	m
<Plug>unimpairedPutAbove	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedPutAbove :call <SID>putline('[p', 'Above')<CR>$/;"	m
<Plug>unimpairedPutBelow	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedPutBelow :call <SID>putline(']p', 'Below')<CR>$/;"	m
<S-Insert>	vimrc	/^map <S-Insert> <MiddleMouse>      "middle mouse button pastes$/;"	m
<S-h>	vimrc	/^noremap <S-h> b$/;"	m
<S-j>	vimrc	/^noremap <S-j> <C-f>$/;"	m
<S-k>	vimrc	/^noremap <S-k> <C-b>$/;"	m
<S-l>	vimrc	/^noremap <S-l> w$/;"	m
<S-v>	vim/pack/minpac/start/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <S-v> <NOP>$/;"	m
<SID>:	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>_	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^onoremap <SID>_ _$/;"	m
<SID>xx	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^map <SID>xx <SID>xx$/;"	m
<c-h>	vimrc	/^nmap <silent> <c-h> :wincmd h<CR>$/;"	m
<c-j>	vimrc	/^nmap <silent> <c-j> :wincmd j<CR>$/;"	m
<c-k>	vimrc	/^nmap <silent> <c-k> :wincmd k<CR>$/;"	m
<c-l>	vimrc	/^nmap <silent> <c-l> :wincmd l<CR>$/;"	m
<c-s-h>	vimrc	/^nmap <silent> <c-s-h> <C-W>h$/;"	m
<c-s-j>	vimrc	/^nmap <silent> <c-s-j> <C-W>j$/;"	m
<c-s-k>	vimrc	/^nmap <silent> <c-s-k> <C-W>k$/;"	m
<c-s-l>	vimrc	/^nmap <silent> <c-s-l> <C-W>l$/;"	m
<cr>	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^    nnoremap <silent> <buffer> <cr> :call nerdtree#ui_glue#invokeKeyMap(g:NERDTreeMapActivateNod/;"	m
<cr>	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^  cnoremap <cr> <end><c-\\>e<sid>set_prompt_op('cr')<cr><cr>$/;"	m
<cr>	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^  nmap <buffer> <cr> <plug>(grepper-side-context-jump)<cr>$/;"	m
<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![travis-ci](https://travis-ci.org/junegunn/fzf.svg?branch=master)](https://travis-ci.org/junegunn/fzf)	vim/pack/minpac/start/fzf/README.md	/^<img src="https:\/\/raw.githubusercontent.com\/junegunn\/i\/master\/fzf.png" height="170" alt="f/;"	c
<leader>*	vimrc	/^nnoremap <leader>* :Grepper -tool grep -cword -noprompt<cr>$/;"	m
<leader>G	vimrc	/^nnoremap <leader>G :Grepper -tool git<cr>$/;"	m
<leader>a	vimrc	/^nnoremap <leader>a :Grepper -tool ack<cr>$/;"	m
<leader>e	vimrc	/^map <leader>e :NERDTreeFind<CR>$/;"	m
<leader>ev	vimrc	/^nmap <silent> <leader>ev :e $MYVIMRC<CR>    "edits the .vimrc file$/;"	m
<leader>g	vimrc	/^nnoremap <leader>g :Grepper -tool grep<cr>$/;"	m
<leader>nt	vimrc	/^nmap <leader>nt :NERDTreeFind<CR>$/;"	m
<leader>rv	vimrc	/^nmap <silent> <leader>rv :so $MYVIMRC<CR>   "reloads the .vimrc file$/;"	m
<leader>t	vimrc	/^map <silent><leader>t :TagbarToggle<CR>                " Display panel with y (or ,y)$/;"	m
<plug>(-fzf-vim-do)	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
<plug>(GrepperOperator)	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^nnoremap <silent> <plug>(GrepperOperator) :set opfunc=<sid>operator<cr>g@$/;"	m
<plug>(GrepperOperator)	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^xnoremap <silent> <plug>(GrepperOperator) :<c-u>call <sid>operator(visualmode())<cr>$/;"	m
<plug>(fzf-complete-buffer-line)	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-complete-file)	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-file)	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir \/s\/b\/a:-d')$/;"	m
<plug>(fzf-complete-file-ag)	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')$/;"	m
<plug>(fzf-complete-line)	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-path)	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-path)	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir \/s\/b')$/;"	m
<plug>(fzf-complete-word)	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-maps-i)	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-n)	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
<plug>(fzf-maps-x)	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^xnoremap <silent> <plug>(fzf-maps-x) :<c-u>call fzf#vim#maps('x', 0)<cr>$/;"	m
<plug>(grepper-side-context-jump)	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^  nnoremap <silent><plug>(grepper-side-context-jump) :<c-u>call <sid>context_jump(1)$/;"	m
<plug>(grepper-side-context-next)	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^  nnoremap <silent><plug>(grepper-side-context-next) :<c-u>call <sid>context_next()$/;"	m
<plug>(grepper-side-context-open)	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^  nnoremap <silent><plug>(grepper-side-context-open) :<c-u>call <sid>context_jump(0)$/;"	m
<plug>(grepper-side-context-prev)	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^  nnoremap <silent><plug>(grepper-side-context-prev) :<c-u>call <sid>context_previous()$/;"	m
=o	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^nmap =o yo$/;"	m
>	vimrc	/^vnoremap > >gv$/;"	m
?	eslintrc.json	/^    "operator-linebreak": ["error", "after", { "overrides": { "?": "before", ":": "before" } }],$/;"	s	object:rules.operator-linebreak.2.overrides
A	vim/pack/minpac/start/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> A <NOP>$/;"	m
A	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_alternate A   exe s:Al/;"	c
A code minimap for Vim	vim/pack/minpac/start/vim-minimap/README.md	/^A code minimap for Vim$/;"	c
AD	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_edit      AD  exe s:Al/;"	c
AE	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_alternate AE  exe s:Al/;"	c
ALEBufferFixGroup	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^augroup ALEBufferFixGroup$/;"	a
ALECleanupGroup	vim/pack/minpac/start/ale/plugin/ale.vim	/^augroup ALECleanupGroup$/;"	a
ALECompletionGroup	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^    augroup ALECompletionGroup$/;"	a
ALECursorGroup	vim/pack/minpac/start/ale/autoload/ale/autocmd.vim	/^    augroup ALECursorGroup$/;"	a
ALEDetail	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEDetail :call ale#cursor#ShowCursorDetail()$/;"	c
ALEDisable	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEDisable :call ale#toggle#Disable()$/;"	c
ALEDisableBuffer	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEDisableBuffer :call ale#toggle#DisableBuffer(bufnr(''))$/;"	c
ALEEnable	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEEnable :call ale#toggle#Enable()$/;"	c
ALEEnableBuffer	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEEnableBuffer :call ale#toggle#EnableBuffer(bufnr(''))$/;"	c
ALEFindReferences	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEFindReferences :call ale#references#Find()$/;"	c
ALEFirst	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEFirst :call ale#loclist_jumping#JumpToIndex(0)$/;"	c
ALEFix	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar -nargs=* -complete=customlist,ale#fix#registry#CompleteFixers ALEFix :call ale#fix/;"	c
ALEFixSuggest	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEFixSuggest :call ale#fix#registry#Suggest(&filetype)$/;"	c
ALEGetStatusLine	vim/pack/minpac/start/ale/plugin/ale.vim	/^function! ALEGetStatusLine() abort$/;"	f
ALEGoToDefinition	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEGoToDefinition :call ale#definition#GoTo({})$/;"	c
ALEGoToDefinitionInTab	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEGoToDefinitionInTab :call ale#definition#GoTo({'open_in_tab': 1})$/;"	c
ALEHighlightBufferGroup	vim/pack/minpac/start/ale/autoload/ale/highlight.vim	/^augroup ALEHighlightBufferGroup$/;"	a
ALEHover	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEHover :call ale#hover#Show()$/;"	c
ALEInfo	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEInfo :call ale#debugging#Info()$/;"	c
ALEInfoToClipboard	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEInfoToClipboard :call ale#debugging#InfoToClipboard()$/;"	c
ALEInfoToFile	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar -nargs=1 ALEInfoToFile :call ale#debugging#InfoToFile(<f-args>)$/;"	c
ALELast	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALELast :call ale#loclist_jumping#JumpToIndex(-1)$/;"	c
ALELint	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALELint :call ale#Queue(0, 'lint_file')$/;"	c
ALELint	vim/pack/minpac/start/ale/plugin/ale.vim	/^function! ALELint(delay) abort$/;"	f
ALENext	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALENext :call ale#loclist_jumping#Jump('after', 0)$/;"	c
ALENextWrap	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALENextWrap :call ale#loclist_jumping#Jump('after', 1)$/;"	c
ALEPatternOptionsGroup	vim/pack/minpac/start/ale/autoload/ale/autocmd.vim	/^    augroup ALEPatternOptionsGroup$/;"	a
ALEPrevious	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEPrevious :call ale#loclist_jumping#Jump('before', 0)$/;"	c
ALEPreviousWrap	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEPreviousWrap :call ale#loclist_jumping#Jump('before', 1)$/;"	c
ALEReset	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEReset :call ale#toggle#Reset()$/;"	c
ALEResetBuffer	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEResetBuffer :call ale#toggle#ResetBuffer(bufnr(''))$/;"	c
ALERunOnEnterGroup	vim/pack/minpac/start/ale/autoload/ale/autocmd.vim	/^    augroup ALERunOnEnterGroup$/;"	a
ALERunOnFiletypeChangeGroup	vim/pack/minpac/start/ale/autoload/ale/autocmd.vim	/^    augroup ALERunOnFiletypeChangeGroup$/;"	a
ALERunOnInsertLeave	vim/pack/minpac/start/ale/autoload/ale/autocmd.vim	/^    augroup ALERunOnInsertLeave$/;"	a
ALERunOnSaveGroup	vim/pack/minpac/start/ale/autoload/ale/autocmd.vim	/^    augroup ALERunOnSaveGroup$/;"	a
ALERunOnTextChangedGroup	vim/pack/minpac/start/ale/autoload/ale/autocmd.vim	/^    augroup ALERunOnTextChangedGroup$/;"	a
ALEStopAllLSPs	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEStopAllLSPs :call ale#lsp#reset#StopAllLSPs()$/;"	c
ALEToggle	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEToggle :call ale#toggle#Toggle()$/;"	c
ALEToggleBuffer	vim/pack/minpac/start/ale/plugin/ale.vim	/^command! -bar ALEToggleBuffer :call ale#toggle#ToggleBuffer(bufnr(''))$/;"	c
AR	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_edit      AR  exe s:Al/;"	c
AS	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_alternate AS  exe s:Al/;"	c
AT	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_alternate AT  exe s:Al/;"	c
AUTHOR	vim/pack/minpac/start/fzf/man/man1/fzf.1	/^.SH AUTHOR$/;"	s	title:fzf
AV	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_alternate AV  exe s:Al/;"	c
Add	vim/pack/minpac/start/fzf/src/cache.go	/^func (cc *ChunkCache) Add(chunk *Chunk, key string, list []Result) {$/;"	f	unknown:fzf.ChunkCache
Added	vim/pack/minpac/start/vim-grepper/CHANGELOG.md	/^### Added$/;"	S
Added `--ansi` option (#150)	vim/pack/minpac/start/fzf/CHANGELOG.md	/^#### Added `--ansi` option (#150)$/;"	t
Added `--expect` option (#163)	vim/pack/minpac/start/fzf/CHANGELOG.md	/^#### Added `--expect` option (#163)$/;"	t
Added `--tac` option to reverse the order of the input.	vim/pack/minpac/start/fzf/CHANGELOG.md	/^#### Added `--tac` option to reverse the order of the input.$/;"	t
Advanced configuration	vim/pack/minpac/start/lightline.vim/README.md	/^## Advanced configuration$/;"	s
Advanced customization	vim/pack/minpac/start/fzf.vim/README.md	/^#### Advanced customization$/;"	t
Advanced sample	vim/pack/minpac/opt/minpac/README.md	/^#### Advanced sample$/;"	t
Advanced topics	vim/pack/minpac/start/fzf/README.md	/^Advanced topics$/;"	s
AfterTheTest	vim/pack/minpac/opt/minpac/test/runtest.vim	/^func AfterTheTest()$/;"	f
Algo	vim/pack/minpac/start/fzf/src/algo/algo.go	/^type Algo func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []ru/;"	t	package:algo
Alt0	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Alt0$/;"	c	package:tui
AltA	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	AltA = Alt0 + 'a' - '0' + iota$/;"	c	package:tui
AltB	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	AltB$/;"	c	package:tui
AltBS	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	AltBS$/;"	c	package:tui
AltC	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	AltC$/;"	c	package:tui
AltD	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	AltD$/;"	c	package:tui
AltDown	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	AltDown$/;"	c	package:tui
AltE	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	AltE$/;"	c	package:tui
AltF	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	AltF$/;"	c	package:tui
AltLeft	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	AltLeft$/;"	c	package:tui
AltRight	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	AltRight$/;"	c	package:tui
AltSlash	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	AltSlash$/;"	c	package:tui
AltSpace	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	AltSpace$/;"	c	package:tui
AltUp	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	AltUp$/;"	c	package:tui
AltZ	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	AltZ     = AltA + 'z' - 'a'$/;"	c	package:tui
Alternate files	vim/pack/minpac/start/vim-projectionist/README.markdown	/^### Alternate files$/;"	S
Ansi	vim/pack/minpac/start/fzf/src/options.go	/^	Ansi        bool$/;"	m	struct:fzf.Options
Arch Linux	vim/pack/minpac/start/fzf/README.md	/^### Arch Linux$/;"	S
ArrayExpression	eslintrc.json	/^      "ArrayExpression": 1,$/;"	n	object:rules
As Vim plugin	vim/pack/minpac/start/fzf/README.md	/^### As Vim plugin$/;"	S
AsString	vim/pack/minpac/start/fzf/src/item.go	/^func (item *Item) AsString(stripAnsi bool) string {$/;"	f	unknown:fzf.Item
AsString	vim/pack/minpac/start/fzf/src/pattern.go	/^func (p *Pattern) AsString() string {$/;"	f	unknown:fzf.Pattern
AsUint16	vim/pack/minpac/start/fzf/src/util/util.go	/^func AsUint16(val int) uint16 {$/;"	f	package:util
Asynchronous Lint Engine [![Travis CI Build Status](https://travis-ci.org/w0rp/ale.svg?branch=master)](https://travis-ci.org/w0rp/ale) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/w0rp/ale)	vim/pack/minpac/start/ale/README.md	/^# Asynchronous Lint Engine [![Travis CI Build Status](https:\/\/travis-ci.org\/w0rp\/ale.svg?bra/;"	c
AtomicBool	vim/pack/minpac/start/fzf/src/util/atomicbool.go	/^type AtomicBool struct {$/;"	s	package:util
Attr	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^type Attr int$/;"	t	package:tui
Attr	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^type Attr tcell.Style$/;"	t	package:tui
AttrRegular	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^	AttrRegular Attr = Attr(0)$/;"	c	package:tui
AttrRegular	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	AttrRegular Attr = 0$/;"	c	package:tui
Author	vim/pack/minpac/start/lightline.vim/README.md	/^## Author$/;"	s
BINARY	vim/pack/minpac/start/fzf/Makefile	/^	BINARY := $(BINARY32)$/;"	m
BINARY	vim/pack/minpac/start/fzf/Makefile	/^	BINARY := $(BINARY64)$/;"	m
BINARY	vim/pack/minpac/start/fzf/Makefile	/^	BINARY := $(BINARYARM5)$/;"	m
BINARY	vim/pack/minpac/start/fzf/Makefile	/^	BINARY := $(BINARYARM6)$/;"	m
BINARY	vim/pack/minpac/start/fzf/Makefile	/^	BINARY := $(BINARYARM7)$/;"	m
BINARY32	vim/pack/minpac/start/fzf/Makefile	/^BINARY32    := fzf-$(GOOS)_386$/;"	m
BINARY64	vim/pack/minpac/start/fzf/Makefile	/^BINARY64    := fzf-$(GOOS)_amd64$/;"	m
BINARYARM5	vim/pack/minpac/start/fzf/Makefile	/^BINARYARM5  := fzf-$(GOOS)_arm5$/;"	m
BINARYARM6	vim/pack/minpac/start/fzf/Makefile	/^BINARYARM6  := fzf-$(GOOS)_arm6$/;"	m
BINARYARM7	vim/pack/minpac/start/fzf/Makefile	/^BINARYARM7  := fzf-$(GOOS)_arm7$/;"	m
BINARYARM8	vim/pack/minpac/start/fzf/Makefile	/^BINARYARM8  := fzf-$(GOOS)_arm8$/;"	m
BSpace	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	BSpace$/;"	c	package:tui
BTab	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	BTab$/;"	c	package:tui
BUILD_FLAGS	vim/pack/minpac/start/fzf/Makefile	/^BUILD_FLAGS := -a -ldflags "-X main.revision=$(REVISION) -w -extldflags=$(LDFLAGS)" -tags "$(TAG/;"	m
Bar	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^class Bar():$/;"	c
Basic sample	vim/pack/minpac/opt/minpac/README.md	/^#### Basic sample$/;"	t
Before submitting	vim/pack/minpac/start/fzf.vim/.github/ISSUE_TEMPLATE.md	/^Before submitting$/;"	c
Before submitting	vim/pack/minpac/start/fzf/.github/ISSUE_TEMPLATE.md	/^### Before submitting$/;"	S
Bg	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Bg           Color$/;"	m	struct:tui.ColorTheme
Bg	vim/pack/minpac/start/fzf/src/tui/tui.go	/^func (p ColorPair) Bg() Color {$/;"	f	unknown:tui.ColorPair
Black	vim/pack/minpac/start/fzf/src/options.go	/^	Black       bool$/;"	m	struct:fzf.Options
Blink	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^	Blink            = Attr(1 << 4)$/;"	c	package:tui
Blink	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	Blink          = Attr(tcell.AttrBlink)$/;"	c	package:tui
Blink2	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^	Blink2           = Attr(1 << 5)$/;"	c	package:tui
Bold	vim/pack/minpac/start/fzf/src/options.go	/^	Bold        bool$/;"	m	struct:fzf.Options
Bold	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^	Bold             = Attr(1)$/;"	c	package:tui
Bold	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	Bold      Attr = Attr(tcell.AttrBold)$/;"	c	package:tui
Bookmark	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=? Bookmark :call nerdtree#ui_glue#bookmarkNode('<args>')$/;"	c
BookmarkToRoot	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=+ BookmarkToRoot cal/;"	c
Border	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Border       Color$/;"	m	struct:tui.ColorTheme
BorderAround	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	BorderAround$/;"	c	package:tui
BorderHorizontal	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	BorderHorizontal$/;"	c	package:tui
BorderNone	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	BorderNone BorderStyle = iota$/;"	c	package:tui
BorderStyle	vim/pack/minpac/start/fzf/src/tui/tui.go	/^type BorderStyle int$/;"	t	package:tui
Bordered	vim/pack/minpac/start/fzf/src/options.go	/^	Bordered    bool$/;"	m	struct:fzf.Options
Breakadd	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^  command! -buffer -bar -nargs=? -complete=custom,s:Complete_breakadd Breakadd$/;"	c
Breakdel	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^  command! -buffer -bar -nargs=? -complete=custom,s:Complete_breakdel Breakdel$/;"	c
Buffer configuration	vim/pack/minpac/start/vim-projectionist/README.markdown	/^### Buffer configuration$/;"	S
Bug fixes	vim/pack/minpac/start/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S
Bugs	vim/pack/minpac/start/vim-minimap/autoload/drawille/README.md	/^### Bugs$/;"	S
Build 32-bit and 64-bit executables and tarballs in target	vim/pack/minpac/start/fzf/BUILD.md	/^# Build 32-bit and 64-bit executables and tarballs in target$/;"	c
Build fzf binary and copy it to bin directory	vim/pack/minpac/start/fzf/BUILD.md	/^# Build fzf binary and copy it to bin directory$/;"	c
Build fzf binary for your platform in target	vim/pack/minpac/start/fzf/BUILD.md	/^# Build fzf binary for your platform in target$/;"	c
Build instructions	vim/pack/minpac/start/fzf/BUILD.md	/^Build instructions$/;"	s
BuildPattern	vim/pack/minpac/start/fzf/src/pattern.go	/^func BuildPattern(fuzzy bool, fuzzyAlgo algo.Algo, extended bool, caseMode Case, normalize bool,/;"	f	package:fzf
Building fzf	vim/pack/minpac/start/fzf/BUILD.md	/^Building fzf$/;"	c
Building fzf	vim/pack/minpac/start/fzf/README.md	/^Building fzf$/;"	s
ByOrder	vim/pack/minpac/start/fzf/src/result.go	/^type ByOrder []Offset$/;"	t	package:fzf
ByRelevance	vim/pack/minpac/start/fzf/src/result.go	/^type ByRelevance []Result$/;"	t	package:fzf
ByRelevanceTac	vim/pack/minpac/start/fzf/src/result.go	/^type ByRelevanceTac []Result$/;"	t	package:fzf
Bytes	vim/pack/minpac/start/fzf/src/util/chars.go	/^func (chars *Chars) Bytes() []byte {$/;"	f	unknown:util.Chars
CACHED	vim/pack/minpac/opt/minpac/tools/appveyor-dl.bat	/^	set CACHED=no$/;"	v
CACHED	vim/pack/minpac/opt/minpac/tools/appveyor-dl.bat	/^set CACHED=yes$/;"	v
CFill	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) CFill(fg Color, bg Color, attr Attr, text string) FillReturn {$/;"	f	unknown:tui.LightWindow
CFill	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CFill(fg Color, bg Color, a Attr, str string) FillReturn {$/;"	f	unknown:tui.TcellWindow
CHANGELOG	vim/pack/minpac/start/fzf/CHANGELOG.md	/^CHANGELOG$/;"	c
COMPREPLY=	git-completion.bash	/^				COMPREPLY=()$/;"	f
COMPREPLY=	git-completion.bash	/^			COMPREPLY=()$/;"	f
COMPREPLY=	git-completion.bash	/^		COMPREPLY=()$/;"	f
COMPREPLY=	git-completion.bash	/^	COMPREPLY=()$/;"	f
COMPREPLY=	vim/pack/minpac/start/fzf/shell/completion.bash	/^    COMPREPLY=()$/;"	f
COMPREPLY=	vim/pack/minpac/start/fzf/shell/completion.bash	/^  COMPREPLY=()$/;"	f
CONTRIBUTING	vim/pack/minpac/start/vim-grepper/CONTRIBUTING.md	/^CONTRIBUTING$/;"	c
CPrint	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) CPrint(pair ColorPair, attr Attr, text string) {$/;"	f	unknown:tui.LightWindow
CPrint	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CPrint(pair ColorPair, attr Attr, text string) {$/;"	f	unknown:tui.TcellWindow
CSCOPE_ARGS	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -R$/;"	v
CSCOPE_ARGS	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -i %TAGS_FILE%.files$/;"	v
CSCOPE_ARGS	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_EXE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CTAGS_ARGS	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CacheKey	vim/pack/minpac/start/fzf/src/pattern.go	/^func (p *Pattern) CacheKey() string {$/;"	f	unknown:fzf.Pattern
CallExpression	eslintrc.json	/^      "CallExpression": ["error", { "arguments": 1 }],$/;"	a	object:rules
Can I display the plugin information at the filename component?	vim/pack/minpac/start/lightline.vim/README.md	/^### Can I display the plugin information at the filename component?$/;"	S
Can I display the plugin name at the mode component?	vim/pack/minpac/start/lightline.vim/README.md	/^### Can I display the plugin name at the mode component?$/;"	S
Can I hide the readonly component in other plugins buffer?	vim/pack/minpac/start/lightline.vim/README.md	/^### Can I hide the readonly component in other plugins buffer?$/;"	S
Can I hide the readonly component in the help buffer?	vim/pack/minpac/start/lightline.vim/README.md	/^### Can I hide the readonly component in the help buffer?$/;"	S
Can I trim the bar between the filename and modified sign?	vim/pack/minpac/start/lightline.vim/README.md	/^### Can I trim the bar between the filename and modified sign?$/;"	S
Can I trim the file format and encoding information on narrow windows?	vim/pack/minpac/start/lightline.vim/README.md	/^### Can I trim the file format and encoding information on narrow windows?$/;"	S
Can select multiple processes with <TAB> or <Shift-TAB> keys	vim/pack/minpac/start/fzf/README.md	/^# Can select multiple processes with <TAB> or <Shift-TAB> keys$/;"	c
Canvas	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^class Canvas(object):$/;"	c
CanvasTestCase	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^class CanvasTestCase(TestCase):$/;"	c
Case	vim/pack/minpac/start/fzf/src/options.go	/^	Case        Case$/;"	m	struct:fzf.Options
Case	vim/pack/minpac/start/fzf/src/options.go	/^type Case int$/;"	t	package:fzf
CaseIgnore	vim/pack/minpac/start/fzf/src/options.go	/^	CaseIgnore$/;"	c	package:fzf
CaseRespect	vim/pack/minpac/start/fzf/src/options.go	/^	CaseRespect$/;"	c	package:fzf
CaseSmart	vim/pack/minpac/start/fzf/src/options.go	/^	CaseSmart Case = iota$/;"	c	package:fzf
Cd	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^  command! -buffer -bar -bang -nargs=? -range=1 -complete=customlist,s:dir_complete Cd$/;"	c
Cd	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=? -complete=customlist,s:Complete_cd Cd    :cd `=rails#app().path/;"	c
Change	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Change$/;"	c	package:tui
Change Log	vim/pack/minpac/start/vim-grepper/CHANGELOG.md	/^# Change Log$/;"	c
Changed	vim/pack/minpac/start/vim-grepper/CHANGELOG.md	/^### Changed$/;"	S
Changed behavior on `--no-sort`	vim/pack/minpac/start/fzf/CHANGELOG.md	/^#### Changed behavior on `--no-sort`$/;"	t
Char	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Char       rune$/;"	m	struct:tui.Event
Chars	vim/pack/minpac/start/fzf/src/util/chars.go	/^type Chars struct {$/;"	s	package:util
Chunk	vim/pack/minpac/start/fzf/src/chunklist.go	/^type Chunk struct {$/;"	s	package:fzf
ChunkCache	vim/pack/minpac/start/fzf/src/cache.go	/^type ChunkCache struct {$/;"	s	package:fzf
ChunkList	vim/pack/minpac/start/fzf/src/chunklist.go	/^type ChunkList struct {$/;"	s	package:fzf
Clear	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Clear()      {}$/;"	f	unknown:tui.FullscreenRenderer
Clear	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Clear() {$/;"	f	unknown:tui.LightRenderer
Clear	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Clear() {$/;"	f	unknown:tui.FullscreenRenderer
Clear	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^func (events *Events) Clear() {$/;"	f	unknown:util.Events
ClearAllBookmarks	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ClearAllBookmarks call g:NERDTreeBookmark.ClearAll() <bar> call b:/;"	c
ClearBookmarks	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=* ClearBookmarks cal/;"	c
ClearOnExit	vim/pack/minpac/start/fzf/src/options.go	/^	ClearOnExit bool$/;"	m	struct:fzf.Options
Clog	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=? -bang -complete=customlist,s:Complete_log            Clog     e/;"	c
Close	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Close()      {}$/;"	f	unknown:tui.FullscreenRenderer
Close	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Close() {$/;"	f	unknown:tui.LightRenderer
Close	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) Close() {$/;"	f	unknown:tui.LightWindow
Close	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Close() {$/;"	f	unknown:tui.FullscreenRenderer
Close	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Close() {$/;"	f	unknown:tui.TcellWindow
ColBorder	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	ColBorder       ColorPair$/;"	v	package:tui
ColCurrent	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	ColCurrent      ColorPair$/;"	v	package:tui
ColCurrentMatch	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	ColCurrentMatch ColorPair$/;"	v	package:tui
ColCursor	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	ColCursor       ColorPair$/;"	v	package:tui
ColHeader	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	ColHeader       ColorPair$/;"	v	package:tui
ColInfo	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	ColInfo         ColorPair$/;"	v	package:tui
ColMatch	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	ColMatch        ColorPair$/;"	v	package:tui
ColNormal	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	ColNormal       ColorPair$/;"	v	package:tui
ColPrompt	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	ColPrompt       ColorPair$/;"	v	package:tui
ColSelected	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	ColSelected     ColorPair$/;"	v	package:tui
ColSpinner	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	ColSpinner      ColorPair$/;"	v	package:tui
Color	vim/pack/minpac/start/fzf/src/tui/tui.go	/^type Color int32$/;"	t	package:tui
ColorClear	vim/pack/minpac/start/colorizer/plugin/colorizer.vim	/^command! -bar ColorClear call colorizer#ColorClear()$/;"	c
ColorHighlight	vim/pack/minpac/start/colorizer/plugin/colorizer.vim	/^command! -bar -bang ColorHighlight call colorizer#ColorHighlight(1, "<bang>")$/;"	c
ColorPair	vim/pack/minpac/start/fzf/src/tui/tui.go	/^type ColorPair struct {$/;"	s	package:tui
ColorTheme	vim/pack/minpac/start/fzf/src/tui/tui.go	/^type ColorTheme struct {$/;"	s	package:tui
ColorToggle	vim/pack/minpac/start/colorizer/plugin/colorizer.vim	/^command! -bar ColorToggle call colorizer#ColorToggle()$/;"	c
Colorizer	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^  augroup Colorizer$/;"	a
Colors	vim/pack/minpac/start/fzf/src/item.go	/^func (item *Item) Colors() []ansiOffset {$/;"	f	unknown:fzf.Item
Colorscheme configuration	vim/pack/minpac/start/lightline.vim/README.md	/^## Colorscheme configuration$/;"	s
Command-local options	vim/pack/minpac/start/fzf.vim/README.md	/^#### Command-local options$/;"	t
Commands	vim/pack/minpac/opt/minpac/README.md	/^### Commands$/;"	S
Commands	vim/pack/minpac/start/fzf.vim/README.md	/^Commands$/;"	s
Completion helper	vim/pack/minpac/start/fzf.vim/README.md	/^### Completion helper$/;"	S
CompletionTest	vim/pack/minpac/start/fzf/test/test_go.rb	/^module CompletionTest$/;"	m
Concept	vim/pack/minpac/opt/minpac/README.md	/^Concept$/;"	s
Configuration	vim/pack/minpac/start/fzf/README-VIM.md	/^### Configuration$/;"	S
Configuration	vim/pack/minpac/start/vim-solarized/README.md	/^## Configuration$/;"	s
Console	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^  command! -bar -bang -buffer Console PP$/;"	c
Console	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^  command! -bar -bang -buffer Console Runtime|PP$/;"	c
Console	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bang -bar -nargs=* -complete=customlist,s:Complete_environments Console   :R/;"	c
Constrain	vim/pack/minpac/start/fzf/src/util/util.go	/^func Constrain(val int, min int, max int) int {$/;"	f	package:util
Constrain32	vim/pack/minpac/start/fzf/src/util/util.go	/^func Constrain32(val int32, min int32, max int32) int32 {$/;"	f	package:util
Contributing	vim/pack/minpac/opt/vim-scriptease/README.markdown	/^## Contributing$/;"	s
Contributing	vim/pack/minpac/start/vim-gutentags/CONTRIBUTING.md	/^# Contributing$/;"	c
Contributing	vim/pack/minpac/start/vim-solarized/README.md	/^## Contributing$/;"	s
Contributing	vim/pack/minpac/start/vim-unimpaired/README.markdown	/^## Contributing$/;"	s
Contributing to ALE	vim/pack/minpac/start/ale/CONTRIBUTING.md	/^# Contributing to ALE$/;"	c
CopyRunes	vim/pack/minpac/start/fzf/src/util/chars.go	/^func (chars *Chars) CopyRunes(dest []rune) {$/;"	f	unknown:util.Chars
CountItems	vim/pack/minpac/start/fzf/src/chunklist.go	/^func CountItems(cs []*Chunk) int {$/;"	f	package:fzf
Credit	vim/pack/minpac/opt/minpac/README.md	/^Credit$/;"	s
Criteria	vim/pack/minpac/start/fzf/src/options.go	/^	Criteria    []criterion$/;"	m	struct:fzf.Options
Ctags	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=0 Ctags       :execute rails#app().tags_command()$/;"	c
CtrlA	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlA$/;"	c	package:tui
CtrlAltA	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlAltA = AltZ + 1$/;"	c	package:tui
CtrlAltM	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlAltM = CtrlAltA + 'm' - 'a'$/;"	c	package:tui
CtrlB	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlB$/;"	c	package:tui
CtrlC	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlC$/;"	c	package:tui
CtrlD	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlD$/;"	c	package:tui
CtrlE	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlE$/;"	c	package:tui
CtrlF	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlF$/;"	c	package:tui
CtrlG	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlG$/;"	c	package:tui
CtrlH	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlH$/;"	c	package:tui
CtrlJ	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlJ$/;"	c	package:tui
CtrlK	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlK$/;"	c	package:tui
CtrlL	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlL$/;"	c	package:tui
CtrlM	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlM$/;"	c	package:tui
CtrlN	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlN$/;"	c	package:tui
CtrlO	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlO$/;"	c	package:tui
CtrlP	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlP$/;"	c	package:tui
CtrlQ	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlQ$/;"	c	package:tui
CtrlR	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlR$/;"	c	package:tui
CtrlS	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlS$/;"	c	package:tui
CtrlSpace	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlSpace$/;"	c	package:tui
CtrlT	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlT$/;"	c	package:tui
CtrlU	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlU$/;"	c	package:tui
CtrlV	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlV$/;"	c	package:tui
CtrlW	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlW$/;"	c	package:tui
CtrlX	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlX$/;"	c	package:tui
CtrlY	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlY$/;"	c	package:tui
CtrlZ	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CtrlZ$/;"	c	package:tui
Current	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Current      Color$/;"	m	struct:tui.ColorTheme
Current Result	vim/pack/minpac/start/nerdtree/.github/ISSUE_TEMPLATE.md	/^### Current Result$/;"	S
CurrentMatch	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	CurrentMatch Color$/;"	m	struct:tui.ColorTheme
Cursor	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Cursor       Color$/;"	m	struct:tui.ColorTheme
Custom	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^  function! Custom()$/;"	f
Custom	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^  function! Custom(n)$/;"	f
Custom statusline	vim/pack/minpac/start/fzf.vim/README.md	/^### Custom statusline$/;"	S
Custom1	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^  function! Custom1()$/;"	f
Custom2	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
Customization	vim/pack/minpac/start/fzf.vim/README.md	/^### Customization$/;"	S
Customizing 'packpath'	vim/pack/minpac/opt/minpac/README.md	/^#### Customizing 'packpath'$/;"	t
Cycle	vim/pack/minpac/start/fzf/src/options.go	/^	Cycle       bool$/;"	m	struct:fzf.Options
DB_FILE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DEBUG	vim/pack/minpac/start/fzf/src/algo/algo.go	/^var DEBUG bool$/;"	v	package:algo
DESCRIPTION	vim/pack/minpac/start/fzf/man/man1/fzf-tmux.1	/^.SH DESCRIPTION$/;"	s	title:fzf-tmux
DESCRIPTION	vim/pack/minpac/start/fzf/man/man1/fzf.1	/^.SH DESCRIPTION$/;"	s	title:fzf
DJANGO_SETTINGS_MODULE	vim/pack/minpac/start/ale/test/command_callback/python_paths/namespace_package_pytest/pytest.ini	/^DJANGO_SETTINGS_MODULE=foo.settings$/;"	k	section:pytest
DL	vim/pack/minpac/opt/minpac/tools/appveyor-dl.bat	/^	if not ERRORLEVEL 1 set DL=no$/;"	v
DL	vim/pack/minpac/opt/minpac/tools/appveyor-dl.bat	/^	set DL=no$/;"	v
DL	vim/pack/minpac/opt/minpac/tools/appveyor-dl.bat	/^set DL=yes$/;"	v
DOTVIM	vim/pack/minpac/start/colorizer/Makefile	/^DOTVIM=$(HOME)\/.vim$/;"	m
DRAWILLE	vim/pack/minpac/start/vim-minimap/autoload/drawille/README.md	/^DRAWILLE$/;"	c
Dark256	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Dark256   *ColorTheme$/;"	v	package:tui
DarkBg	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	DarkBg       Color$/;"	m	struct:tui.ColorTheme
Debug	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^function Debug(msg)$/;"	f
Default16	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Default16 *ColorTheme$/;"	v	package:tui
Del	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Del$/;"	c	package:tui
Delimiter	vim/pack/minpac/start/fzf/src/options.go	/^	Delimiter   Delimiter$/;"	m	struct:fzf.Options
Delimiter	vim/pack/minpac/start/fzf/src/tokenizer.go	/^type Delimiter struct {$/;"	s	package:fzf
Demo	vim/pack/minpac/start/vim-grepper/README.md	/^## Demo$/;"	s
Dependencies	vim/pack/minpac/start/tagbar/README.md	/^## Dependencies$/;"	s
Destroy	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=*       -complete=customlist,s:Complete_destroy  Destroy       :e/;"	c
Dim	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^	Dim              = Attr(1 << 1)$/;"	c	package:tui
Dim	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	Dim            = Attr(tcell.AttrDim)$/;"	c	package:tui
Directories under current directory (single-selection)	vim/pack/minpac/start/fzf/README.md	/^# Directories under current directory (single-selection)$/;"	c
Directories under ~/github that match `fzf`	vim/pack/minpac/start/fzf/README.md	/^# Directories under ~\/github that match `fzf`$/;"	c
Disarm	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -bang -bar -nargs=* -complete=customlist,scriptease#complete Disarm$/;"	c
Documentation	vim/pack/minpac/start/vim-grepper/README.md	/^## Documentation$/;"	s
DoesAutoWrap	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) DoesAutoWrap() bool { return false }$/;"	f	unknown:tui.FullscreenRenderer
DoesAutoWrap	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) DoesAutoWrap() bool {$/;"	f	unknown:tui.LightRenderer
DoesAutoWrap	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) DoesAutoWrap() bool {$/;"	f	unknown:tui.FullscreenRenderer
DoneParseArgs	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
Double	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Double bool$/;"	m	struct:tui.MouseEvent
DoubleClick	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	DoubleClick$/;"	c	package:tui
Down	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Down   bool$/;"	m	struct:tui.MouseEvent
Down	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Down$/;"	c	package:tui
DurWithin	vim/pack/minpac/start/fzf/src/util/util.go	/^func DurWithin($/;"	f	package:util
ENVIRONMENT	vim/pack/minpac/start/fzf/man/man1/fzf.1	/^.SH ENVIRONMENT VARIABLES$/;"	s	title:fzf
EOF	vim/pack/minpac/start/fzf/install	/^  cat << EOF$/;"	h
EOF	vim/pack/minpac/start/fzf/install	/^  cat > $src << EOF$/;"	h
EOF	vim/pack/minpac/start/fzf/install	/^  fish << EOF$/;"	h
ESC	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	ESC$/;"	c	package:tui
EXIT	vim/pack/minpac/start/fzf/man/man1/fzf.1	/^.SH EXIT STATUS$/;"	s	title:fzf
EXTENDED	vim/pack/minpac/start/fzf/man/man1/fzf.1	/^.SH EXTENDED SEARCH MODE$/;"	s	title:fzf
EmptyMerger	vim/pack/minpac/start/fzf/src/merger.go	/^var EmptyMerger = NewMerger(nil, [][]Result{}, false, false)$/;"	v	package:fzf
EmptyTheme	vim/pack/minpac/start/fzf/src/tui/tui.go	/^func EmptyTheme() *ColorTheme {$/;"	f	package:tui
Enclose	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) Enclose(y int, x int) bool {$/;"	f	unknown:tui.LightWindow
Enclose	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Enclose(y int, x int) bool {$/;"	f	unknown:tui.TcellWindow
End	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	End   int$/;"	m	struct:algo.Result
End	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	End$/;"	c	package:tui
Environment	vim/pack/minpac/start/nerdtree/.github/ISSUE_TEMPLATE.md	/^### Environment$/;"	S
Environment variables	vim/pack/minpac/start/fzf/README.md	/^#### Environment variables$/;"	t
Environment variables / Aliases	vim/pack/minpac/start/fzf/README.md	/^#### Environment variables \/ Aliases$/;"	t
EqualMatch	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func EqualMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []ru/;"	f	package:algo
Erase	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) Erase() {$/;"	f	unknown:tui.LightWindow
Erase	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Erase() {$/;"	f	unknown:tui.TcellWindow
Event	vim/pack/minpac/start/fzf/src/tui/tui.go	/^type Event struct {$/;"	s	package:tui
EventBox	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^type EventBox struct {$/;"	s	package:util
EventType	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^type EventType int$/;"	t	package:util
Events	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^type Events map[EventType]interface{}$/;"	t	package:util
EvtClose	vim/pack/minpac/start/fzf/src/util/eventbox_test.go	/^	EvtClose$/;"	c	package:util
EvtHeader	vim/pack/minpac/start/fzf/src/constants.go	/^	EvtHeader$/;"	c	package:fzf
EvtReadFin	vim/pack/minpac/start/fzf/src/constants.go	/^	EvtReadFin$/;"	c	package:fzf
EvtReadFin	vim/pack/minpac/start/fzf/src/util/eventbox_test.go	/^	EvtReadFin$/;"	c	package:util
EvtReadNew	vim/pack/minpac/start/fzf/src/constants.go	/^	EvtReadNew util.EventType = iota$/;"	c	package:fzf
EvtReadNew	vim/pack/minpac/start/fzf/src/util/eventbox_test.go	/^	EvtReadNew EventType = iota$/;"	c	package:util
EvtReady	vim/pack/minpac/start/fzf/src/constants.go	/^	EvtReady$/;"	c	package:fzf
EvtSearchFin	vim/pack/minpac/start/fzf/src/constants.go	/^	EvtSearchFin$/;"	c	package:fzf
EvtSearchFin	vim/pack/minpac/start/fzf/src/util/eventbox_test.go	/^	EvtSearchFin$/;"	c	package:util
EvtSearchNew	vim/pack/minpac/start/fzf/src/constants.go	/^	EvtSearchNew$/;"	c	package:fzf
EvtSearchNew	vim/pack/minpac/start/fzf/src/util/eventbox_test.go	/^	EvtSearchNew$/;"	c	package:util
EvtSearchProgress	vim/pack/minpac/start/fzf/src/constants.go	/^	EvtSearchProgress$/;"	c	package:fzf
EvtSearchProgress	vim/pack/minpac/start/fzf/src/util/eventbox_test.go	/^	EvtSearchProgress$/;"	c	package:util
ExactMatchNaive	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func ExactMatchNaive(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern/;"	f	package:algo
Example	vim/pack/minpac/start/vim-projectionist/README.markdown	/^## Example$/;"	s
Examples	vim/pack/minpac/start/fzf/README-VIM.md	/^#### Examples$/;"	t
Examples	vim/pack/minpac/start/fzf/README.md	/^Examples$/;"	s
Examples	vim/pack/minpac/start/vim-grepper/CONTRIBUTING.md	/^Examples$/;"	s
ExecCommand	vim/pack/minpac/start/fzf/src/util/util_unix.go	/^func ExecCommand(command string) *exec.Cmd {$/;"	f	package:util
ExecCommand	vim/pack/minpac/start/fzf/src/util/util_windows.go	/^func ExecCommand(command string) *exec.Cmd {$/;"	f	package:util
ExecCommandWith	vim/pack/minpac/start/fzf/src/util/util_unix.go	/^func ExecCommandWith(shell string, command string) *exec.Cmd {$/;"	f	package:util
ExecCommandWith	vim/pack/minpac/start/fzf/src/util/util_windows.go	/^func ExecCommandWith(_shell string, command string) *exec.Cmd {$/;"	f	package:util
Executing external programs	vim/pack/minpac/start/fzf/README.md	/^### Executing external programs$/;"	S
Exit0	vim/pack/minpac/start/fzf/src/options.go	/^	Exit0       bool$/;"	m	struct:fzf.Options
Expect	vim/pack/minpac/start/fzf/src/options.go	/^	Expect      map[int]string$/;"	m	struct:fzf.Options
Expected Result	vim/pack/minpac/start/nerdtree/.github/ISSUE_TEMPLATE.md	/^### Expected Result$/;"	S
Extended	vim/pack/minpac/start/fzf/src/options.go	/^	Extended    bool$/;"	m	struct:fzf.Options
Extract	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^    command! -buffer -bar -bang -nargs=1 -range Extract  :<line1>,<line2>call s:RubyExtract(<ban/;"	c
Extract	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^    command! -buffer -bar -bang -nargs=? -range -complete=customlist,s:controllerList Extract  :/;"	c
F.A.Q.	vim/pack/minpac/start/nerdtree/README.markdown	/^F.A.Q.$/;"	s
F1	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	F1$/;"	c	package:tui
F10	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	F10$/;"	c	package:tui
F11	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	F11$/;"	c	package:tui
F12	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	F12$/;"	c	package:tui
F2	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	F2$/;"	c	package:tui
F3	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	F3$/;"	c	package:tui
F4	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	F4$/;"	c	package:tui
F5	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	F5$/;"	c	package:tui
F6	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	F6$/;"	c	package:tui
F7	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	F7$/;"	c	package:tui
F8	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	F8$/;"	c	package:tui
F9	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	F9$/;"	c	package:tui
FAQ	vim/pack/minpac/start/vim-projectionist/README.markdown	/^## FAQ$/;"	s
FAQ	vim/pack/minpac/start/vim-rails/README.markdown	/^## FAQ$/;"	s
FAQ	vim/pack/minpac/start/vim-unimpaired/README.markdown	/^## FAQ$/;"	s
FIELD	vim/pack/minpac/start/fzf/man/man1/fzf.1	/^.SH FIELD INDEX EXPRESSION$/;"	s	title:fzf
FILES	vim/pack/minpac/start/colorizer/Makefile	/^FILES=plugin\/colorizer.vim autoload\/colorizer.vim$/;"	m
FILE_LIST_CMD	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
FZF	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^command! -nargs=* -complete=dir -bang FZF call s:cmd(<bang>0, <f-args>)$/;"	c
FZF Vim integration	vim/pack/minpac/start/fzf/README-VIM.md	/^FZF Vim integration$/;"	c
Features	vim/pack/minpac/opt/vim-scriptease/README.markdown	/^## Features$/;"	s
Features	vim/pack/minpac/start/vim-minimap/README.md	/^Features$/;"	s
Features	vim/pack/minpac/start/vim-projectionist/README.markdown	/^## Features$/;"	s
Fedora	vim/pack/minpac/start/fzf/README.md	/^### Fedora$/;"	S
Feed the output of fd into fzf	vim/pack/minpac/start/fzf/README.md	/^# Feed the output of fd into fzf$/;"	c
Feedback	vim/pack/minpac/start/vim-grepper/README.md	/^## Feedback$/;"	s
Fg	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Fg           Color$/;"	m	struct:tui.ColorTheme
Fg	vim/pack/minpac/start/fzf/src/tui/tui.go	/^func (p ColorPair) Fg() Color {$/;"	f	unknown:tui.ColorPair
FileWord	vim/pack/minpac/start/fzf/src/options.go	/^	FileWord    bool$/;"	m	struct:fzf.Options
Files and directories	vim/pack/minpac/start/fzf/README.md	/^#### Files and directories$/;"	t
Files under current directory	vim/pack/minpac/start/fzf/README.md	/^# Files under current directory$/;"	c
Files under parent directory	vim/pack/minpac/start/fzf/README.md	/^# Files under parent directory$/;"	c
Files under parent directory that match `fzf`	vim/pack/minpac/start/fzf/README.md	/^# Files under parent directory that match `fzf`$/;"	c
Files under your home directory	vim/pack/minpac/start/fzf/README.md	/^# Files under your home directory$/;"	c
Fill	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) Fill(text string) FillReturn {$/;"	f	unknown:tui.LightWindow
Fill	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Fill(str string) FillReturn {$/;"	f	unknown:tui.TcellWindow
FillContinue	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	FillContinue FillReturn = iota$/;"	c	package:tui
FillNextLine	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	FillNextLine$/;"	c	package:tui
FillReturn	vim/pack/minpac/start/fzf/src/tui/tui.go	/^type FillReturn int$/;"	t	package:tui
FillSuspend	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	FillSuspend$/;"	c	package:tui
Filter	vim/pack/minpac/start/fzf/src/options.go	/^	Filter      *string$/;"	m	struct:fzf.Options
FindRootDirectory	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^function! FindRootDirectory()$/;"	f
Finish-update hooks	vim/pack/minpac/opt/minpac/README.md	/^#### Finish-update hooks$/;"	t
FinishFill	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) FinishFill() {$/;"	f	unknown:tui.LightWindow
FinishFill	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) FinishFill() {$/;"	f	unknown:tui.TcellWindow
FinishTesting	vim/pack/minpac/opt/minpac/test/runtest.vim	/^func FinishTesting()$/;"	f
Fish shell	vim/pack/minpac/start/fzf/README.md	/^#### Fish shell$/;"	t
Fixes and improvements	vim/pack/minpac/start/fzf/CHANGELOG.md	/^### Fixes and improvements$/;"	S
FullscreenRenderer	vim/pack/minpac/start/fzf/src/tui/tui.go	/^type FullscreenRenderer struct {$/;"	s	package:tui
FunctionDeclaration	eslintrc.json	/^      "FunctionDeclaration": ["error", { "parameters": 1, "body": 1 }],$/;"	a	object:rules
FunctionExpression	eslintrc.json	/^      "FunctionExpression": ["error", { "parameters": 1, "body": 1 }],$/;"	a	object:rules
Functions	vim/pack/minpac/opt/minpac/README.md	/^### Functions$/;"	S
Further reading	vim/pack/minpac/start/vim-minimap/autoload/drawille/README.md	/^### Further reading$/;"	S
Fuzzy	vim/pack/minpac/start/fzf/src/options.go	/^	Fuzzy       bool$/;"	m	struct:fzf.Options
Fuzzy completion for bash and zsh	vim/pack/minpac/start/fzf/README.md	/^Fuzzy completion for bash and zsh$/;"	s
FuzzyAlgo	vim/pack/minpac/start/fzf/src/options.go	/^	FuzzyAlgo   algo.Algo$/;"	m	struct:fzf.Options
FuzzyMatchV1	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func FuzzyMatchV1(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []/;"	f	package:algo
FuzzyMatchV2	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func FuzzyMatchV2(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern [/;"	f	package:algo
G	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  nnoremap <buffer> <silent> G :<C-U>call <SID>reload_log()<Bar>exe v:count ? v:count : '$'<CR>$/;"	m
GLIDE_LOCK	vim/pack/minpac/start/fzf/Makefile	/^GLIDE_LOCK  := glide.lock$/;"	m
GLIDE_YAML	vim/pack/minpac/start/fzf/Makefile	/^GLIDE_YAML  := glide.yaml$/;"	m
GOOS	vim/pack/minpac/start/fzf/Makefile	/^GOOS        := $(word 1, $(subst \/, " ", $(word 4, $(shell go version))))$/;"	m
GOPATH	vim/pack/minpac/start/fzf/Makefile	/^GOPATH      := $(ROOT_DIR)\/gopath$/;"	m
GVim	vim/pack/minpac/start/fzf/README-VIM.md	/^GVim$/;"	s
Generate	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bang -bar -nargs=* -complete=customlist,s:Complete_generate Generate      :e/;"	c
Generating Vim help files	vim/pack/minpac/start/ale/README.md	/^#### Generating Vim help files$/;"	t
Get	vim/pack/minpac/start/fzf/src/merger.go	/^func (mg *Merger) Get(idx int) Result {$/;"	f	unknown:fzf.Merger
Get	vim/pack/minpac/start/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Get() bool {$/;"	f	unknown:util.AtomicBool
Get	vim/pack/minpac/start/fzf/src/util/chars.go	/^func (chars *Chars) Get(i int) rune {$/;"	f	unknown:util.Chars
GetAllocId	vim/pack/minpac/opt/minpac/test/runtest.vim	/^function GetAllocId(name)$/;"	f
GetChar	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) GetChar() Event     { return Event{} }$/;"	f	unknown:tui.FullscreenRenderer
GetChar	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) GetChar() Event {$/;"	f	unknown:tui.LightRenderer
GetChar	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) GetChar() Event {$/;"	f	unknown:tui.FullscreenRenderer
Global and per project projection definitions	vim/pack/minpac/start/vim-projectionist/README.markdown	/^### Global and per project projection definitions$/;"	S
Global options	vim/pack/minpac/start/fzf.vim/README.md	/^#### Global options$/;"	t
Grepper	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^command! -nargs=* -complete=customlist,grepper#complete Grepper call <sid>parse_flags(<q-args>)$/;"	c
GruvboxHlsHideCursor	vim/colors/gruvbox.vim	/^function! GruvboxHlsHideCursor()$/;"	f
GruvboxHlsShowCursor	vim/colors/gruvbox.vim	/^function! GruvboxHlsShowCursor()$/;"	f
Gutentags	vim/pack/minpac/start/vim-gutentags/README.md	/^# Gutentags$/;"	c
GutentagsToggleEnabled	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
GutentagsUpdate	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^    command! -buffer -bang GutentagsUpdate :call s:manual_update_tags(<bang>0)$/;"	c
HasFullscreenRenderer	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui
HasFullscreenRenderer	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui
Header	vim/pack/minpac/start/fzf/src/options.go	/^	Header      []string$/;"	m	struct:fzf.Options
Header	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Header       Color$/;"	m	struct:tui.ColorTheme
HeaderLines	vim/pack/minpac/start/fzf/src/options.go	/^	HeaderLines int$/;"	m	struct:fzf.Options
Height	vim/pack/minpac/start/fzf/src/options.go	/^	Height      sizeSpec$/;"	m	struct:fzf.Options
Height	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) Height() int {$/;"	f	unknown:tui.LightWindow
Height	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Height() int {$/;"	f	unknown:tui.TcellWindow
HexToColor	vim/pack/minpac/start/fzf/src/tui/tui.go	/^func HexToColor(rrggbb string) Color {$/;"	f	package:tui
Hide statusline	vim/pack/minpac/start/fzf.vim/README.md	/^### Hide statusline$/;"	S
Hide statusline	vim/pack/minpac/start/fzf/README-VIM.md	/^### Hide statusline$/;"	S
History	vim/pack/minpac/start/fzf/src/history.go	/^type History struct {$/;"	s	package:fzf
History	vim/pack/minpac/start/fzf/src/options.go	/^	History     *History$/;"	m	struct:fzf.Options
Home	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Home$/;"	c	package:tui
Hooks	vim/pack/minpac/opt/minpac/README.md	/^### Hooks$/;"	S
Host names	vim/pack/minpac/start/fzf/README.md	/^#### Host names$/;"	t
How?	vim/pack/minpac/start/vim-gutentags/README.md	/^## How?$/;"	s
Hscroll	vim/pack/minpac/start/fzf/src/options.go	/^	Hscroll     bool$/;"	m	struct:fzf.Options
HscrollOff	vim/pack/minpac/start/fzf/src/options.go	/^	HscrollOff  int$/;"	m	struct:fzf.Options
I	vim/pack/minpac/start/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> I <NOP>$/;"	m
I16	vim/pack/minpac/start/fzf/src/util/slab.go	/^	I16 []int16$/;"	m	struct:util.Slab
I32	vim/pack/minpac/start/fzf/src/util/slab.go	/^	I32 []int32$/;"	m	struct:util.Slab
INDEX_WHOLE_PROJECT	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
IS_PY3	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^IS_PY3 = version_info[0] == 3$/;"	v
ImportDeclaration	eslintrc.json	/^      "ImportDeclaration": 1,$/;"	n	object:rules
Improvements	vim/pack/minpac/start/fzf/CHANGELOG.md	/^### Improvements$/;"	S
Index	vim/pack/minpac/start/fzf/src/item.go	/^func (item *Item) Index() int32 {$/;"	f	unknown:fzf.Item
Index	vim/pack/minpac/start/fzf/src/result.go	/^func (result *Result) Index() int32 {$/;"	f	unknown:fzf.Result
Index	vim/pack/minpac/start/fzf/src/util/chars.go	/^	Index int32$/;"	m	struct:util.Chars
Info	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Info         Color$/;"	m	struct:tui.ColorTheme
Information	vim/pack/minpac/start/ale/ISSUE_TEMPLATE.md	/^## Information$/;"	s
Init	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Init()       {}$/;"	f	unknown:tui.FullscreenRenderer
Init	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Init() {$/;"	f	unknown:tui.LightRenderer
Init	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Init() {$/;"	f	unknown:tui.FullscreenRenderer
InlineInfo	vim/pack/minpac/start/fzf/src/options.go	/^	InlineInfo  bool$/;"	m	struct:fzf.Options
Input	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) Input() []rune {$/;"	f	unknown:fzf.Terminal
Installation	vim/pack/minpac/opt/minpac/README.md	/^Installation$/;"	s
Installation	vim/pack/minpac/opt/vim-scriptease/README.markdown	/^## Installation$/;"	s
Installation	vim/pack/minpac/start/fzf.vim/README.md	/^Installation$/;"	s
Installation	vim/pack/minpac/start/fzf/README.md	/^Installation$/;"	s
Installation	vim/pack/minpac/start/lightline.vim/README.md	/^## Installation$/;"	s
Installation	vim/pack/minpac/start/nerdtree/README.markdown	/^Installation$/;"	s
Installation	vim/pack/minpac/start/tagbar/README.md	/^## Installation$/;"	s
Installation	vim/pack/minpac/start/vim-grepper/README.md	/^## Installation$/;"	s
Installation	vim/pack/minpac/start/vim-minimap/README.md	/^Installation$/;"	s
Installation	vim/pack/minpac/start/vim-minimap/autoload/drawille/README.md	/^### Installation$/;"	S
Installation	vim/pack/minpac/start/vim-projectionist/README.markdown	/^## Installation$/;"	s
Installation	vim/pack/minpac/start/vim-rails/README.markdown	/^## Installation$/;"	s
Installation	vim/pack/minpac/start/vim-solarized/README.md	/^## Installation$/;"	s
Installation	vim/pack/minpac/start/vim-unimpaired/README.markdown	/^## Installation$/;"	s
Installing	vim/pack/minpac/start/vim-matchit/README.md	/^## Installing$/;"	s
Introduction	vim/pack/minpac/start/lightline.vim/README.md	/^## Introduction$/;"	s
Introduction	vim/pack/minpac/start/nerdtree/README.markdown	/^Introduction$/;"	s
Invalid	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Invalid$/;"	c	package:tui
IsBytes	vim/pack/minpac/start/fzf/src/util/chars.go	/^func (chars *Chars) IsBytes() bool {$/;"	f	unknown:util.Chars
IsEmpty	vim/pack/minpac/start/fzf/src/pattern.go	/^func (p *Pattern) IsEmpty() bool {$/;"	f	unknown:fzf.Pattern
IsFull	vim/pack/minpac/start/fzf/src/chunklist.go	/^func (c *Chunk) IsFull() bool {$/;"	f	unknown:fzf.Chunk
IsTty	vim/pack/minpac/start/fzf/src/util/util.go	/^func IsTty() bool {$/;"	f	package:util
IsWindows	vim/pack/minpac/start/fzf/src/util/util_unix.go	/^func IsWindows() bool {$/;"	f	package:util
IsWindows	vim/pack/minpac/start/fzf/src/util/util_windows.go	/^func IsWindows() bool {$/;"	f	package:util
Italic	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^	Italic           = Attr(1 << 2)$/;"	c	package:tui
Italic	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	Italic         = Attr(tcell.AttrNone) \/\/ Not supported$/;"	c	package:tui
Item	vim/pack/minpac/start/fzf/src/item.go	/^type Item struct {$/;"	s	package:fzf
ItemBuilder	vim/pack/minpac/start/fzf/src/chunklist.go	/^type ItemBuilder func(*Item, []byte) bool$/;"	t	package:fzf
Janus	vim/pack/minpac/start/vim-minimap/README.md	/^### Janus$/;"	S
JumpLabels	vim/pack/minpac/start/fzf/src/options.go	/^	JumpLabels  string$/;"	m	struct:fzf.Options
K	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^    nmap <silent><buffer> K <Plug>ScripteaseHelp$/;"	m
KEY	vim/pack/minpac/start/fzf/man/man1/fzf.1	/^.SH KEY BINDINGS$/;"	s	title:fzf
Key bindings for command line	vim/pack/minpac/start/fzf/README.md	/^Key bindings for command line$/;"	s
Keymap	vim/pack/minpac/start/fzf/src/options.go	/^	Keymap      map[int][]action$/;"	m	struct:fzf.Options
LICENSE	vim/pack/minpac/start/fzf/man/man1/fzf.1	/^.SH LICENSE$/;"	s	title:fzf
LICENSE	vim/pack/minpac/start/vim-minimap/autoload/drawille/README.md	/^### LICENSE$/;"	S
LOG_FILE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
Layout	vim/pack/minpac/start/fzf/README.md	/^#### Layout$/;"	t
Lcd	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^  command! -buffer -bar -bang -nargs=? -range=1 -complete=customlist,s:dir_complete Lcd$/;"	c
Lcd	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=? -complete=customlist,s:Complete_cd Lcd  :lcd `=rails#app().path/;"	c
Left	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) Left() int {$/;"	f	unknown:tui.LightWindow
Left	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Left() int {$/;"	f	unknown:tui.TcellWindow
Left	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Left   bool$/;"	m	struct:tui.MouseEvent
Left	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Left$/;"	c	package:tui
LeftClick	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	LeftClick$/;"	c	package:tui
Len	vim/pack/minpac/start/fzf/src/result.go	/^func (a ByOrder) Len() int {$/;"	f	unknown:fzf.ByOrder
Len	vim/pack/minpac/start/fzf/src/result.go	/^func (a ByRelevance) Len() int {$/;"	f	unknown:fzf.ByRelevance
Len	vim/pack/minpac/start/fzf/src/result.go	/^func (a ByRelevanceTac) Len() int {$/;"	f	unknown:fzf.ByRelevanceTac
Len	vim/pack/minpac/start/fzf/src/terminal.go	/^func (a byTimeOrder) Len() int {$/;"	f	unknown:fzf.byTimeOrder
Length	vim/pack/minpac/start/fzf/src/merger.go	/^func (mg *Merger) Length() int {$/;"	f	unknown:fzf.Merger
Length	vim/pack/minpac/start/fzf/src/util/chars.go	/^func (chars *Chars) Length() int {$/;"	f	unknown:util.Chars
Less	vim/pack/minpac/start/fzf/src/result.go	/^func (a ByOrder) Less(i, j int) bool {$/;"	f	unknown:fzf.ByOrder
Less	vim/pack/minpac/start/fzf/src/result.go	/^func (a ByRelevance) Less(i, j int) bool {$/;"	f	unknown:fzf.ByRelevance
Less	vim/pack/minpac/start/fzf/src/result.go	/^func (a ByRelevanceTac) Less(i, j int) bool {$/;"	f	unknown:fzf.ByRelevanceTac
Less	vim/pack/minpac/start/fzf/src/terminal.go	/^func (a byTimeOrder) Less(i, j int) bool {$/;"	f	unknown:fzf.byTimeOrder
License	vim/pack/minpac/opt/minpac/README.md	/^License$/;"	s
License	vim/pack/minpac/opt/vim-scriptease/README.markdown	/^## License$/;"	s
License	vim/pack/minpac/start/fzf.vim/README.md	/^License$/;"	s
License	vim/pack/minpac/start/fzf/BUILD.md	/^License$/;"	s
License	vim/pack/minpac/start/lightline.vim/README.md	/^## License$/;"	s
License	vim/pack/minpac/start/tagbar/README.md	/^## License$/;"	s
License	vim/pack/minpac/start/vim-projectionist/README.markdown	/^## License$/;"	s
License	vim/pack/minpac/start/vim-rails/README.markdown	/^## License$/;"	s
License	vim/pack/minpac/start/vim-solarized/README.md	/^## License$/;"	s
License	vim/pack/minpac/start/vim-unimpaired/README.markdown	/^## License$/;"	s
Light256	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Light256  *ColorTheme$/;"	v	package:tui
LightRenderer	vim/pack/minpac/start/fzf/src/tui/light.go	/^type LightRenderer struct {$/;"	s	package:tui
LightWindow	vim/pack/minpac/start/fzf/src/tui/light.go	/^type LightWindow struct {$/;"	s	package:tui
LineTestCase	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^class LineTestCase(TestCase):$/;"	c
Linux, macOS	vim/pack/minpac/opt/minpac/README.md	/^### Linux, macOS$/;"	S
Load minpac on demand	vim/pack/minpac/opt/minpac/README.md	/^#### Load minpac on demand$/;"	t
Log	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^function Log(msg)$/;"	f
Lookup	vim/pack/minpac/start/fzf/src/cache.go	/^func (cc *ChunkCache) Lookup(chunk *Chunk, key string) []Result {$/;"	f	unknown:fzf.ChunkCache
Loop	vim/pack/minpac/start/fzf/src/matcher.go	/^func (m *Matcher) Loop() {$/;"	f	unknown:fzf.Matcher
Loop	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) Loop() {$/;"	f	unknown:fzf.Terminal
LoopParseArgs	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
MAKEFILE	vim/pack/minpac/start/fzf/Makefile	/^MAKEFILE    := $(realpath $(lastword $(MAKEFILE_LIST)))$/;"	m
MINIMAP	vim/pack/minpac/start/vim-minimap/autoload/minimap.py	/^MINIMAP = "vim-minimap"$/;"	v
Maintainer	vim/pack/minpac/start/tagbar/README.md	/^## Maintainer$/;"	s
Make release archives for all supported platforms in target	vim/pack/minpac/start/fzf/BUILD.md	/^# Make release archives for all supported platforms in target$/;"	c
MakeSlab	vim/pack/minpac/start/fzf/src/util/slab.go	/^func MakeSlab(size16 int, size32 int) *Slab {$/;"	f	package:util
Mappings	vim/pack/minpac/start/fzf.vim/README.md	/^Mappings$/;"	s
Margin	vim/pack/minpac/start/fzf/src/options.go	/^	Margin      [4]sizeSpec$/;"	m	struct:fzf.Options
Match	vim/pack/minpac/start/fzf/src/pattern.go	/^func (p *Pattern) Match(chunk *Chunk, slab *util.Slab) []Result {$/;"	f	unknown:fzf.Pattern
Match	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Match        Color$/;"	m	struct:tui.ColorTheme
MatchDebug	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^  command! -nargs=0 MatchDebug call s:Match_debug()$/;"	c
MatchItem	vim/pack/minpac/start/fzf/src/pattern.go	/^func (p *Pattern) MatchItem(item *Item, withPos bool, slab *util.Slab) (*Result, []Offset, *[]in/;"	f	unknown:fzf.Pattern
MatchRequest	vim/pack/minpac/start/fzf/src/matcher.go	/^type MatchRequest struct {$/;"	s	package:fzf
Matcher	vim/pack/minpac/start/fzf/src/matcher.go	/^type Matcher struct {$/;"	s	package:fzf
Max	vim/pack/minpac/start/fzf/src/util/util.go	/^func Max(first int, second int) int {$/;"	f	package:util
Max16	vim/pack/minpac/start/fzf/src/util/util.go	/^func Max16(first int16, second int16) int16 {$/;"	f	package:util
Max32	vim/pack/minpac/start/fzf/src/util/util.go	/^func Max32(first int32, second int32) int32 {$/;"	f	package:util
MaxX	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxX() int          { return 0 }$/;"	f	unknown:tui.FullscreenRenderer
MaxX	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxX() int {$/;"	f	unknown:tui.LightRenderer
MaxX	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxX() int {$/;"	f	unknown:tui.FullscreenRenderer
MaxY	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxY() int          { return 0 }$/;"	f	unknown:tui.FullscreenRenderer
MaxY	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxY() int {$/;"	f	unknown:tui.LightRenderer
MaxY	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxY() int {$/;"	f	unknown:tui.FullscreenRenderer
MemberExpression	eslintrc.json	/^      "MemberExpression": 1,$/;"	n	object:rules
Merge	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	unknown:tui.Attr
Merge	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	unknown:tui.Attr
Merger	vim/pack/minpac/start/fzf/src/merger.go	/^type Merger struct {$/;"	s	package:fzf
Messages	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -bar -bang Messages :execute scriptease#messages_command(<bang>0)$/;"	c
Min	vim/pack/minpac/start/fzf/src/util/util.go	/^func Min(first int, second int) int {$/;"	f	package:util
Min32	vim/pack/minpac/start/fzf/src/util/util.go	/^func Min32(first int32, second int32) int32 {$/;"	f	package:util
MinHeight	vim/pack/minpac/start/fzf/src/options.go	/^	MinHeight   int$/;"	m	struct:fzf.Options
Minimap	vim/pack/minpac/start/vim-minimap/plugin/minimap.vim	/^command! Minimap call minimap#ShowMinimap()$/;"	c
MinimapClose	vim/pack/minpac/start/vim-minimap/plugin/minimap.vim	/^command! MinimapClose call minimap#CloseMinimap()$/;"	c
MinimapToggle	vim/pack/minpac/start/vim-minimap/plugin/minimap.vim	/^command! MinimapToggle call minimap#ToggleMinimap()$/;"	c
MinimapUpdate	vim/pack/minpac/start/vim-minimap/plugin/minimap.vim	/^command! MinimapUpdate call minimap#UpdateMinimap()$/;"	c
Minor improvements/fixes	vim/pack/minpac/start/fzf/CHANGELOG.md	/^### Minor improvements\/fixes$/;"	S
Mod	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Mod    bool$/;"	m	struct:tui.MouseEvent
Mouse	vim/pack/minpac/start/fzf/src/options.go	/^	Mouse       bool$/;"	m	struct:fzf.Options
Mouse	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Mouse$/;"	c	package:tui
MouseEvent	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	MouseEvent *MouseEvent$/;"	m	struct:tui.Event
MouseEvent	vim/pack/minpac/start/fzf/src/tui/tui.go	/^type MouseEvent struct {$/;"	s	package:tui
Move	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) Move(y int, x int) {$/;"	f	unknown:tui.LightWindow
Move	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Move(y int, x int) {$/;"	f	unknown:tui.TcellWindow
MoveAndClear	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) MoveAndClear(y int, x int) {$/;"	f	unknown:tui.LightWindow
MoveAndClear	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) MoveAndClear(y int, x int) {$/;"	f	unknown:tui.TcellWindow
Multi	vim/pack/minpac/start/fzf/src/options.go	/^	Multi       bool$/;"	m	struct:fzf.Options
N	vimrc	/^map N Nzz$/;"	m
NAME	vim/pack/minpac/start/fzf/man/man1/fzf-tmux.1	/^.SH NAME$/;"	s	title:fzf-tmux
NAME	vim/pack/minpac/start/fzf/man/man1/fzf.1	/^.SH NAME$/;"	s	title:fzf
NERDChristmasTree	vimrc	/^let NERDChristmasTree=1$/;"	v
NERDTree	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTree :call g:NERDTreeCreator.CreateTabTree('<args>')$/;"	c
NERDTree	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTreeAddKeyMap	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddPathFilter	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
NERDTreeAddSubmenu	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeAutoCenter	vimrc	/^let NERDTreeAutoCenter=1$/;"	v
NERDTreeCWD	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeCWD call NERDTreeCWD()$/;"	c
NERDTreeCWD	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeChDirMode	vimrc	/^let NERDTreeChDirMode=0$/;"	v
NERDTreeClose	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeClose :call g:NERDTree.Close()$/;"	c
NERDTreeCopyNode	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	vim/pack/minpac/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	vim/pack/minpac/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeExecuteFileLinux	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileLinux()$/;"	f
NERDTreeFind	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=file -bar NERDTreeFind call s:findAndRevealPath('<args>')$/;"	c
NERDTreeFocus	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeFocus call NERDTreeFocus()$/;"	c
NERDTreeFocus	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeFromBookmark	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=1 -complete=customlist,nerdtree#completeBookmarks -bar NERDTreeFromBookmark call/;"	c
NERDTreeHijackNetrw	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeHijackNetrw	vimrc	/^let NERDTreeHijackNetrw=1$/;"	v
NERDTreeIgnore	vimrc	/^let NERDTreeIgnore=['\\.pyc', '\\~$', '\\.swo$', '\\.swp$', '\\.git', '\\.hg', '\\.svn', '\\.bzr/;"	v
NERDTreeKeepTreeInNewTab	vimrc	/^let NERDTreeKeepTreeInNewTab=1$/;"	v
NERDTreeListNode	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeMirror	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeMirror call g:NERDTreeCreator.CreateMirror()$/;"	c
NERDTreeMoveNode	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRender	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealFileLinux	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealFileLinux()$/;"	f
NERDTreeRevealInFinder	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeShowBookmarks	vimrc	/^let NERDTreeShowBookmarks=1     " display the bookmarks table on startup.$/;"	v
NERDTreeShowFiles	vimrc	/^let NERDTreeShowFiles=1$/;"	v
NERDTreeShowHidden	vimrc	/^let NERDTreeShowHidden=1$/;"	v
NERDTreeToggle	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTreeToggle :call g:NERDTreeCreator.ToggleTabTree('<args/;"	c
NEW_TESTS	vim/pack/minpac/opt/minpac/test/Make_all.mak	/^NEW_TESTS = \\$/;"	m
NO_INITS	vim/pack/minpac/opt/minpac/test/Make_all.mak	/^NO_INITS = -U NONE $(NO_PLUGINS)$/;"	m
NO_PLUGINS	vim/pack/minpac/opt/minpac/test/Make_all.mak	/^NO_PLUGINS = --noplugin # --not-a-term$/;"	m
Navigation commands	vim/pack/minpac/start/vim-projectionist/README.markdown	/^### Navigation commands$/;"	S
NeoVim on Unix	vim/pack/minpac/start/ale/README.md	/^#### NeoVim on Unix$/;"	t
New features	vim/pack/minpac/start/fzf/CHANGELOG.md	/^### New features$/;"	S
NewAtomicBool	vim/pack/minpac/start/fzf/src/util/atomicbool.go	/^func NewAtomicBool(initialState bool) *AtomicBool {$/;"	f	package:util
NewChunkCache	vim/pack/minpac/start/fzf/src/cache.go	/^func NewChunkCache() ChunkCache {$/;"	f	package:fzf
NewChunkList	vim/pack/minpac/start/fzf/src/chunklist.go	/^func NewChunkList(trans ItemBuilder) *ChunkList {$/;"	f	package:fzf
NewColorPair	vim/pack/minpac/start/fzf/src/tui/tui.go	/^func NewColorPair(fg Color, bg Color) ColorPair {$/;"	f	package:tui
NewEventBox	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^func NewEventBox() *EventBox {$/;"	f	package:util
NewFullscreenRenderer	vim/pack/minpac/start/fzf/src/tui/tui.go	/^func NewFullscreenRenderer(theme *ColorTheme, forceBlack bool, mouse bool) Renderer {$/;"	f	package:tui
NewHistory	vim/pack/minpac/start/fzf/src/history.go	/^func NewHistory(path string, maxSize int) (*History, error) {$/;"	f	package:fzf
NewLightRenderer	vim/pack/minpac/start/fzf/src/tui/light.go	/^func NewLightRenderer(theme *ColorTheme, forceBlack bool, mouse bool, tabstop int, clearOnExit b/;"	f	package:tui
NewMatcher	vim/pack/minpac/start/fzf/src/matcher.go	/^func NewMatcher(patternBuilder func([]rune) *Pattern,$/;"	f	package:fzf
NewMerger	vim/pack/minpac/start/fzf/src/merger.go	/^func NewMerger(pattern *Pattern, lists [][]Result, sorted bool, tac bool) *Merger {$/;"	f	package:fzf
NewReader	vim/pack/minpac/start/fzf/src/reader.go	/^func NewReader(pusher func([]byte) bool, eventBox *util.EventBox, delimNil bool) *Reader {$/;"	f	package:fzf
NewTerminal	vim/pack/minpac/start/fzf/src/terminal.go	/^func NewTerminal(opts *Options, eventBox *util.EventBox) *Terminal {$/;"	f	package:fzf
NewWindow	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, borderStyle Bor/;"	f	unknown:tui.FullscreenRenderer
NewWindow	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) NewWindow(top int, left int, width int, height int, borderStyle BorderSt/;"	f	unknown:tui.LightRenderer
NewWindow	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, borderStyle Bor/;"	f	unknown:tui.FullscreenRenderer
NilClass	vim/pack/minpac/start/fzf/test/test_go.rb	/^class NilClass$/;"	c
Normalize	vim/pack/minpac/start/fzf/src/options.go	/^	Normalize   bool$/;"	m	struct:fzf.Options
NormalizeRunes	vim/pack/minpac/start/fzf/src/algo/normalize.go	/^func NormalizeRunes(runes []rune) []rune {$/;"	f	package:algo
Note for developers of other plugins	vim/pack/minpac/start/lightline.vim/README.md	/^## Note for developers of other plugins$/;"	s
Note: If the file structure display is wrong	vim/pack/minpac/start/tagbar/README.md	/^## Note: If the file structure display is wrong$/;"	s
Now fzf (w/o pipe) will use fd instead of find	vim/pack/minpac/start/fzf/README.md	/^# Now fzf (w\/o pipe) will use fd instead of find$/;"	c
Nth	vim/pack/minpac/start/fzf/src/options.go	/^	Nth         []Range$/;"	m	struct:fzf.Options
O	vim/pack/minpac/start/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> O <NOP>$/;"	m
OPTIONS	vim/pack/minpac/start/fzf/man/man1/fzf-tmux.1	/^.SH OPTIONS$/;"	s	title:fzf-tmux
OPTIONS	vim/pack/minpac/start/fzf/man/man1/fzf.1	/^.SH OPTIONS$/;"	s	title:fzf
ObjectExpression	eslintrc.json	/^      "ObjectExpression": 1,$/;"	n	object:rules
Offset	vim/pack/minpac/start/fzf/src/result.go	/^type Offset [2]int32$/;"	t	package:fzf
OpenBookmark	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 OpenBookmark call /;"	c
OpenURL	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^      command -bar -nargs=1 OpenURL Browse <args>$/;"	c
OpenURL	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^      command -bar -nargs=1 OpenURL exe '!git web--browse' shellescape(<q-args>, 1)$/;"	c
OpenURL	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^      command -bar -nargs=1 OpenURL exe '!launchy' shellescape(<q-args>, 1)$/;"	c
OpenURL	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^      command -bar -nargs=1 OpenURL exe '!open' shellescape(<q-args>, 1)$/;"	c
OpenURL	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^      command -bar -nargs=1 OpenURL exe '!sensible-browser' shellescape(<q-args>, 1)$/;"	c
OpenURL	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^      command -bar -nargs=1 OpenURL exe '!start cmd \/cstart \/b' shellescape(<q-args>, 1)$/;"	c
OpenURL	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^      command -bar -nargs=1 OpenURL exe '!xdg-open' shellescape(<q-args>, 1) '&'$/;"	c
Options	vim/pack/minpac/start/fzf/README.md	/^#### Options$/;"	t
Options	vim/pack/minpac/start/fzf/src/options.go	/^type Options struct {$/;"	s	package:fzf
Options to fzf command	vim/pack/minpac/start/fzf/README.md	/^# Options to fzf command$/;"	c
Other implementations / similar projects	vim/pack/minpac/start/vim-minimap/autoload/drawille/README.md	/^### Other implementations \/ similar projects$/;"	S
Overview	vim/pack/minpac/opt/minpac/README.md	/^Overview$/;"	s
PAUSE_BEFORE_EXIT	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
POST_PROCESS_CMD	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PP	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -bang -range=-1 -nargs=? -complete=expression PP$/;"	c
PPmsg	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -bang -range=0      -nargs=? -complete=expression PPmsg$/;"	c
PROJECT_ROOT	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PY3	vim/pack/minpac/start/vim-minimap/autoload/minimap.py	/^PY3 = sys.version_info[0] == 3$/;"	v
PaperColor light	vim/pack/minpac/start/lightline.vim/README.md	/^### PaperColor light$/;"	S
ParseArgs	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParseOptions	vim/pack/minpac/start/fzf/src/options.go	/^func ParseOptions() *Options {$/;"	f	package:fzf
ParseRange	vim/pack/minpac/start/fzf/src/tokenizer.go	/^func ParseRange(str *string) (Range, bool) {$/;"	f	package:fzf
PassMerger	vim/pack/minpac/start/fzf/src/merger.go	/^func PassMerger(chunks *[]*Chunk, tac bool) *Merger {$/;"	f	package:fzf
Pattern	vim/pack/minpac/start/fzf/src/pattern.go	/^type Pattern struct {$/;"	s	package:fzf
Pause	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Pause(bool)  {}$/;"	f	unknown:tui.FullscreenRenderer
Pause	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Pause(clear bool) {$/;"	f	unknown:tui.LightRenderer
Pause	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Pause(bool) {$/;"	f	unknown:tui.FullscreenRenderer
Peek	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Peek(event EventType) bool {$/;"	f	unknown:util.EventBox
Performance	vim/pack/minpac/start/fzf/README.md	/^### Performance$/;"	S
PgDn	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	PgDn$/;"	c	package:tui
PgUp	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	PgUp$/;"	c	package:tui
Point3D	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^class Point3D:$/;"	c
Possible Fix	vim/pack/minpac/start/nerdtree/.github/ISSUE_TEMPLATE.md	/^### Possible Fix$/;"	S
Post-update hooks	vim/pack/minpac/opt/minpac/README.md	/^#### Post-update hooks$/;"	t
PrefixMatch	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func PrefixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo
Prerequisites	vim/pack/minpac/start/fzf/BUILD.md	/^### Prerequisites$/;"	S
Press CTRL-Y to copy the line to clipboard and aborts fzf (requires pbcopy)	vim/pack/minpac/start/fzf/README.md	/^# Press CTRL-Y to copy the line to clipboard and aborts fzf (requires pbcopy)$/;"	c
Press F1 to open the file with less without leaving fzf	vim/pack/minpac/start/fzf/README.md	/^# Press F1 to open the file with less without leaving fzf$/;"	c
Preview	vim/pack/minpac/start/fzf/src/options.go	/^	Preview     previewOpts$/;"	m	struct:fzf.Options
Preview	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=? -bang -range -complete=customlist,s:Complete_preview Preview :c/;"	c
Preview window	vim/pack/minpac/start/fzf/README.md	/^### Preview window$/;"	S
Print	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) Print(text string) {$/;"	f	unknown:tui.LightWindow
Print	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Print(text string) {$/;"	f	unknown:tui.TcellWindow
PrintQuery	vim/pack/minpac/start/fzf/src/options.go	/^	PrintQuery  bool$/;"	m	struct:fzf.Options
Printer	vim/pack/minpac/start/fzf/src/options.go	/^	Printer     func(string)$/;"	m	struct:fzf.Options
Process	vim/pack/minpac/start/nerdtree/.github/ISSUE_TEMPLATE.md	/^### Process$/;"	S
Process IDs	vim/pack/minpac/start/fzf/README.md	/^#### Process IDs$/;"	t
ProjectDo	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^  command! -buffer -bang -nargs=1 -range=0 -complete=command ProjectDo execute s:do('<bang>', <c/;"	c
ProjectionistDetect	vim/pack/minpac/start/vim-projectionist/plugin/projectionist.vim	/^function! ProjectionistDetect(path) abort$/;"	f
Prompt	vim/pack/minpac/start/fzf/src/options.go	/^	Prompt      string$/;"	m	struct:fzf.Options
Prompt	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Prompt       Color$/;"	m	struct:tui.ColorTheme
Pros	vim/pack/minpac/start/fzf/README.md	/^Pros$/;"	s
Push	vim/pack/minpac/start/fzf/src/chunklist.go	/^func (cl *ChunkList) Push(data []byte) bool {$/;"	f	unknown:fzf.ChunkList
Pushing	vim/pack/minpac/start/vim-gutentags/CONTRIBUTING.md	/^## Pushing$/;"	s
Query	vim/pack/minpac/start/fzf/src/options.go	/^	Query       string$/;"	m	struct:fzf.Options
Quickstart	vim/pack/minpac/start/tagbar/README.md	/^## Quickstart$/;"	s
R	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_related   R   exe   s:/;"	c
R	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  nnoremap <buffer> <silent> R :<C-U>call <SID>reload_log()<CR>$/;"	m
RD	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_edit      RD  exe   s:/;"	c
RE	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_related   RE  exe   s:/;"	c
RELEASE32	vim/pack/minpac/start/fzf/Makefile	/^RELEASE32   := fzf-$(VERSION)-$(GOOS)_386$/;"	m
RELEASE64	vim/pack/minpac/start/fzf/Makefile	/^RELEASE64   := fzf-$(VERSION)-$(GOOS)_amd64$/;"	m
RELEASEARM5	vim/pack/minpac/start/fzf/Makefile	/^RELEASEARM5 := fzf-$(VERSION)-$(GOOS)_arm5$/;"	m
RELEASEARM6	vim/pack/minpac/start/fzf/Makefile	/^RELEASEARM6 := fzf-$(VERSION)-$(GOOS)_arm6$/;"	m
RELEASEARM7	vim/pack/minpac/start/fzf/Makefile	/^RELEASEARM7 := fzf-$(VERSION)-$(GOOS)_arm7$/;"	m
RELEASEARM8	vim/pack/minpac/start/fzf/Makefile	/^RELEASEARM8 := fzf-$(VERSION)-$(GOOS)_arm8$/;"	m
REVISION	vim/pack/minpac/start/fzf/Makefile	/^REVISION    := $(shell git log -n 1 --pretty=format:%h -- $(SOURCES))$/;"	m
ROOT_DIR	vim/pack/minpac/start/fzf/Makefile	/^ROOT_DIR    := $(shell dirname $(MAKEFILE))$/;"	m
RS	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_related   RS  exe   s:/;"	c
RT	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_related   RT  exe   s:/;"	c
RUN_VIMTEST	vim/pack/minpac/opt/minpac/test/Makefile	/^RUN_VIMTEST = $(VIMPROG) -u NONE$/;"	m
RV	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_related   RV  exe   s:/;"	c
Rabbrev	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -bang Rabbrev :call s:Abbrev(<bang>0,<f-args>)$/;"	c
Rails	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^command! -bang -bar -nargs=* -count -complete=customlist,rails#complete_rails Rails execute rail/;"	c
RailsDetect	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^function! RailsDetect(...) abort$/;"	f
Rake	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=? -bang -count -complete=customlist,rails#complete_rake Rake    :/;"	c
Random	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^function Random(min, max)$/;"	f
Range	vim/pack/minpac/start/fzf/src/tokenizer.go	/^type Range struct {$/;"	s	package:fzf
Rationale	vim/pack/minpac/start/fzf.vim/README.md	/^Rationale$/;"	s
Rbrowse	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=? -bang -range -complete=customlist,s:Complete_preview Rbrowse :c/;"	c
Rcd	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=? -complete=customlist,s:Complete_cd Rcd   :cd `=rails#app().path/;"	c
Rdbext	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^    command! -buffer -bar -nargs=? -complete=customlist,s:Complete_environments Rdbext  :call s:/;"	c
Read	vim/pack/minpac/start/fzf/src/util/util_unix.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util
Read	vim/pack/minpac/start/fzf/src/util/util_windows.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util
ReadBookmarks	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ReadBookmarks call g:NERDTreeBookmark.CacheBookmarks(0) <bar> call/;"	c
ReadSource	vim/pack/minpac/start/fzf/src/reader.go	/^func (r *Reader) ReadSource() {$/;"	f	unknown:fzf.Reader
ReadZero	vim/pack/minpac/start/fzf/src/options.go	/^	ReadZero    bool$/;"	m	struct:fzf.Options
Reader	vim/pack/minpac/start/fzf/src/reader.go	/^type Reader struct {$/;"	s	package:fzf
Reduced initial memory footprint (#151)	vim/pack/minpac/start/fzf/CHANGELOG.md	/^#### Reduced initial memory footprint (#151)$/;"	t
Reducer example	vim/pack/minpac/start/fzf.vim/README.md	/^#### Reducer example$/;"	t
Refresh	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Refresh()    {}$/;"	f	unknown:tui.FullscreenRenderer
Refresh	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Refresh() {$/;"	f	unknown:tui.LightRenderer
Refresh	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) Refresh() {$/;"	f	unknown:tui.LightWindow
Refresh	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Refresh() {$/;"	f	unknown:tui.FullscreenRenderer
Refresh	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Refresh() {$/;"	f	unknown:tui.TcellWindow
RefreshWindows	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {}$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) RefreshWindows(windows []Window) {$/;"	f	unknown:tui.LightRenderer
RefreshWindows	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {$/;"	f	unknown:tui.FullscreenRenderer
Removed	vim/pack/minpac/start/vim-grepper/CHANGELOG.md	/^### Removed$/;"	S
Renderer	vim/pack/minpac/start/fzf/src/tui/tui.go	/^type Renderer interface {$/;"	i	package:tui
Reproducing the bug	vim/pack/minpac/start/ale/ISSUE_TEMPLATE.md	/^## Reproducing the bug$/;"	s
Requirements	vim/pack/minpac/opt/minpac/README.md	/^Requirements$/;"	s
Requirements	vim/pack/minpac/start/vim-solarized/README.md	/^## Requirements$/;"	s
Reset	vim/pack/minpac/start/fzf/src/matcher.go	/^func (m *Matcher) Reset(chunks []*Chunk, patternRunes []rune, cancel bool, final bool, sort bool/;"	f	unknown:fzf.Matcher
Resize	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Resize$/;"	c	package:tui
Respecting `.gitignore`	vim/pack/minpac/start/fzf/README.md	/^#### Respecting `.gitignore`$/;"	t
Result	vim/pack/minpac/start/fzf/src/algo/algo.go	/^type Result struct {$/;"	s	package:algo
Result	vim/pack/minpac/start/fzf/src/result.go	/^type Result struct {$/;"	s	package:fzf
Resume	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Resume(bool) {}$/;"	f	unknown:tui.FullscreenRenderer
Resume	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Resume(clear bool) {$/;"	f	unknown:tui.LightRenderer
Resume	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Resume(bool) {$/;"	f	unknown:tui.FullscreenRenderer
RevealBookmark	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 RevealBookmark :ca/;"	c
Reverse	vim/pack/minpac/start/fzf/src/options.go	/^	Reverse     bool$/;"	m	struct:fzf.Options
Reverse	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^	Reverse          = Attr(1 << 6)$/;"	c	package:tui
Reverse	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	Reverse        = Attr(tcell.AttrReverse)$/;"	c	package:tui
Right	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Right$/;"	c	package:tui
RightClick	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	RightClick$/;"	c	package:tui
Rinvert	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^    command! -buffer -bar                 Rinvert  :call s:Invert(<bang>0)$/;"	c
Rlcd	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=? -complete=customlist,s:Complete_cd Rlcd :lcd `=rails#app().path/;"	c
Rooter	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^command! Rooter :call <SID>ChangeToRootDirectory()$/;"	c
Rp	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer       -nargs=1 -range=0 -complete=customlist,s:Complete_ruby Rp            :e/;"	c
Rpp	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer       -nargs=1 -range=0 -complete=customlist,s:Complete_ruby Rpp           :e/;"	c
Rrefresh	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=0 -bang Rrefresh :if <bang>0|unlet! g:autoloaded_rails|source `=s/;"	c
Rtags	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=0 Rtags       :execute rails#app().tags_command()$/;"	c
Run	vim/pack/minpac/start/fzf/src/core.go	/^func Run(opts *Options, revision string) {$/;"	f	package:fzf
Run these commands in the "Git for Windows" Bash terminal	vim/pack/minpac/start/ale/README.md	/^# Run these commands in the "Git for Windows" Bash terminal$/;"	c
RunTest	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^function RunTest(test)$/;"	f
RunTheTest	vim/pack/minpac/opt/minpac/test/runtest.vim	/^func RunTheTest(test)$/;"	f
Rune	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Rune = iota$/;"	c	package:tui
RuneWidth	vim/pack/minpac/start/fzf/src/util/util.go	/^func RuneWidth(r rune, prefixWidth int, tabstop int) int {$/;"	f	package:util
RunesToChars	vim/pack/minpac/start/fzf/src/util/chars.go	/^func RunesToChars(runes []rune) Chars {$/;"	f	package:util
Runner	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bang -nargs=? -range=0 -complete=customlist,s:Complete_edit Runner        :e/;"	c
Runtime	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -bang -bar -range=-1 -nargs=* -complete=customlist,scriptease#complete Runtime$/;"	c
S	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	S      int$/;"	m	struct:tui.MouseEvent
SDown	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	SDown$/;"	c	package:tui
SEE	vim/pack/minpac/start/fzf/man/man1/fzf.1	/^.SH SEE ALSO$/;"	s	title:fzf
SLeft	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	SLeft$/;"	c	package:tui
SOURCES	vim/pack/minpac/start/fzf/Makefile	/^SOURCES     := $(wildcard *.go src\/*.go src\/*\/*.go) $(SRC_LINK) $(VENDOR_LINK) $(GLIDE_LOCK) /;"	m
SRC_LINK	vim/pack/minpac/start/fzf/Makefile	/^SRC_LINK    := $(GOPATH)\/src\/github.com\/junegunn\/fzf\/src$/;"	m
SRight	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	SRight$/;"	c	package:tui
SUp	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	SUp$/;"	c	package:tui
SYNOPSIS	vim/pack/minpac/start/fzf/man/man1/fzf-tmux.1	/^.SH SYNOPSIS$/;"	s	title:fzf-tmux
SYNOPSIS	vim/pack/minpac/start/fzf/man/man1/fzf.1	/^.SH SYNOPSIS$/;"	s	title:fzf
Sample .vimrc	vim/pack/minpac/opt/minpac/README.md	/^### Sample .vimrc$/;"	S
Score	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	Score int$/;"	m	struct:algo.Result
Screenshot(s)	vim/pack/minpac/start/nerdtree/.github/ISSUE_TEMPLATE.md	/^### Screenshot(s)$/;"	S
Screenshots	vim/pack/minpac/start/tagbar/README.md	/^## Screenshots$/;"	s
Scriptnames	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -bar -count=0 Scriptnames$/;"	c
Search	vim/pack/minpac/start/fzf/src/cache.go	/^func (cc *ChunkCache) Search(chunk *Chunk, key string) []Result {$/;"	f	unknown:fzf.ChunkCache
Search syntax	vim/pack/minpac/start/fzf/README.md	/^#### Search syntax$/;"	t
Select1	vim/pack/minpac/start/fzf/src/options.go	/^	Select1     bool$/;"	m	struct:fzf.Options
Selected	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Selected     Color$/;"	m	struct:tui.ColorTheme
Self-Promotion	vim/pack/minpac/opt/vim-scriptease/README.markdown	/^## Self-Promotion$/;"	s
Self-Promotion	vim/pack/minpac/start/vim-rails/README.markdown	/^## Self-Promotion$/;"	s
Self-Promotion	vim/pack/minpac/start/vim-unimpaired/README.markdown	/^## Self-Promotion$/;"	s
Server	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=? -bang -complete=customlist,s:Complete_server   Server        :e/;"	c
Set	vim/pack/minpac/start/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Set(newState bool) bool {$/;"	f	unknown:util.AtomicBool
Set	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Set(event EventType, value interface{}) {$/;"	f	unknown:util.EventBox
SetNonblock	vim/pack/minpac/start/fzf/src/util/util_unix.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
SetNonblock	vim/pack/minpac/start/fzf/src/util/util_windows.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
SetUp	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function SetUp()$/;"	f
Setting fd as the default source for fzf	vim/pack/minpac/start/fzf/README.md	/^# Setting fd as the default source for fzf$/;"	c
Settings	vim/pack/minpac/start/fzf/README.md	/^#### Settings$/;"	t
Settings	vim/pack/minpac/start/vim-minimap/README.md	/^Settings$/;"	s
Shell	vim/pack/minpac/start/fzf/test/test_go.rb	/^class Shell$/;"	c
ShowUsage	vim/pack/minpac/start/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	vim/pack/minpac/start/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
Shuffle	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^function Shuffle(list)$/;"	f
Similar projects	vim/pack/minpac/opt/minpac/README.md	/^Similar projects$/;"	s
Slab	vim/pack/minpac/start/fzf/src/util/slab.go	/^type Slab struct {$/;"	s	package:util
Snapshot	vim/pack/minpac/start/fzf/src/chunklist.go	/^func (cl *ChunkList) Snapshot() ([]*Chunk, int) {$/;"	f	unknown:fzf.ChunkList
Sort	vim/pack/minpac/start/fzf/src/options.go	/^	Sort        int$/;"	m	struct:fzf.Options
Spinner	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Spinner      Color$/;"	m	struct:tui.ColorTheme
Spirit of this plugin	vim/pack/minpac/start/lightline.vim/README.md	/^## Spirit of this plugin$/;"	s
Start	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	Start int$/;"	m	struct:algo.Result
Start Vim with a minimal configuration	vim/pack/minpac/start/fzf.vim/.github/ISSUE_TEMPLATE.md	/^Start Vim with a minimal configuration$/;"	c
Status line of terminal buffer	vim/pack/minpac/start/fzf.vim/README.md	/^Status line of terminal buffer$/;"	s
String	vim/pack/minpac/start/fzf/src/pattern.go	/^func (t term) String() string {$/;"	f	unknown:fzf.term
String	vim/pack/minpac/start/fzf/src/tokenizer.go	/^func (d Delimiter) String() string {$/;"	f	unknown:fzf.Delimiter
String	vim/pack/minpac/start/fzf/src/tokenizer.go	/^func (t Token) String() string {$/;"	f	unknown:fzf.Token
String	vim/pack/minpac/start/fzf/src/util/chars.go	/^func (chars *Chars) String() string {$/;"	f	unknown:util.Chars
Style	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (c Color) Style() tcell.Color {$/;"	f	unknown:tui.Color
SuffixMatch	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func SuffixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo
Support for additional filetypes	vim/pack/minpac/start/tagbar/README.md	/^## Support for additional filetypes$/;"	s
Supported commands	vim/pack/minpac/start/fzf/README.md	/^#### Supported commands$/;"	t
Swap	vim/pack/minpac/start/fzf/src/result.go	/^func (a ByOrder) Swap(i, j int) {$/;"	f	unknown:fzf.ByOrder
Swap	vim/pack/minpac/start/fzf/src/result.go	/^func (a ByRelevance) Swap(i, j int) {$/;"	f	unknown:fzf.ByRelevance
Swap	vim/pack/minpac/start/fzf/src/result.go	/^func (a ByRelevanceTac) Swap(i, j int) {$/;"	f	unknown:fzf.ByRelevanceTac
Swap	vim/pack/minpac/start/fzf/src/terminal.go	/^func (a byTimeOrder) Swap(i, j int) {$/;"	f	unknown:fzf.byTimeOrder
SwitchCase	eslintrc.json	/^      "SwitchCase": 1,$/;"	n	object:rules
Sync	vim/pack/minpac/start/fzf/src/options.go	/^	Sync        bool$/;"	m	struct:fzf.Options
TAGS_FILE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
Tab	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Tab$/;"	c	package:tui
Table of Contents	vim/pack/minpac/start/ale/README.md	/^## Table of Contents$/;"	s
Table of Contents	vim/pack/minpac/start/fzf/README.md	/^Table of Contents$/;"	s
Tabstop	vim/pack/minpac/start/fzf/src/options.go	/^	Tabstop     int$/;"	m	struct:fzf.Options
Tac	vim/pack/minpac/start/fzf/src/options.go	/^	Tac         bool$/;"	m	struct:fzf.Options
Tagbar	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 Tagbar              call tagbar#ToggleWindow()$/;"	c
Tagbar: a class outline viewer for Vim	vim/pack/minpac/start/tagbar/README.md	/^# Tagbar: a class outline viewer for Vim$/;"	c
TagbarAutoCmds	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^    augroup TagbarAutoCmds$/;"	a
TagbarBalloonExpr	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! TagbarBalloonExpr() abort$/;"	f
TagbarClose	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarClose         call tagbar#CloseWindow()$/;"	c
TagbarCurrentTag	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarCurrentTag    echo tagbar#currenttag('%s', 'No current tag', <f-args>)$/;"	c
TagbarDebug	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarDebug         call tagbar#debug#start_debug(<f-args>)$/;"	c
TagbarDebugEnd	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarDebugEnd      call tagbar#debug#stop_debug()$/;"	c
TagbarGetTypeConfig	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^command! -nargs=1 TagbarGetTypeConfig call tagbar#gettypeconfig(<f-args>)$/;"	c
TagbarOpen	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarOpen          call tagbar#OpenWindow(<f-args>)$/;"	c
TagbarOpenAutoClose	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarOpenAutoClose call tagbar#OpenWindow('fcj')$/;"	c
TagbarSession	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^augroup TagbarSession$/;"	a
TagbarSetFoldlevel	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)$/;"	c
TagbarShowTag	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarShowTag       call tagbar#highlighttag(1, 1)$/;"	c
TagbarToggle	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarToggle        call tagbar#ToggleWindow()$/;"	c
TagbarTogglePause	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarTogglePause   call tagbar#toggle_pause()$/;"	c
TcellWindow	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^type TcellWindow struct {$/;"	s	package:tui
TearDown	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function TearDown()$/;"	f
Terminal	vim/pack/minpac/start/fzf/src/terminal.go	/^type Terminal struct {$/;"	s	package:fzf
TestAdditiveExpect	vim/pack/minpac/start/fzf/src/options_test.go	/^func TestAdditiveExpect(t *testing.T) {$/;"	f	package:fzf
TestAtomicBool	vim/pack/minpac/start/fzf/src/util/atomicbool_test.go	/^func TestAtomicBool(t *testing.T) {$/;"	f	package:util
TestBase	vim/pack/minpac/start/fzf/test/test_go.rb	/^class TestBase < Minitest::Test$/;"	c
TestBash	vim/pack/minpac/start/fzf/test/test_go.rb	/^class TestBash < TestBase$/;"	c
TestBind	vim/pack/minpac/start/fzf/src/options_test.go	/^func TestBind(t *testing.T) {$/;"	f	package:fzf
TestCacheKey	vim/pack/minpac/start/fzf/src/pattern_test.go	/^func TestCacheKey(t *testing.T) {$/;"	f	package:fzf
TestCacheable	vim/pack/minpac/start/fzf/src/pattern_test.go	/^func TestCacheable(t *testing.T) {$/;"	f	package:fzf
TestCaseSensitivity	vim/pack/minpac/start/fzf/src/pattern_test.go	/^func TestCaseSensitivity(t *testing.T) {$/;"	f	package:fzf
TestCharsLength	vim/pack/minpac/start/fzf/src/util/chars_test.go	/^func TestCharsLength(t *testing.T) {$/;"	f	package:util
TestCharsToString	vim/pack/minpac/start/fzf/src/util/chars_test.go	/^func TestCharsToString(t *testing.T) {$/;"	f	package:util
TestChunkCache	vim/pack/minpac/start/fzf/src/cache_test.go	/^func TestChunkCache(t *testing.T) {$/;"	f	package:fzf
TestChunkList	vim/pack/minpac/start/fzf/src/chunklist_test.go	/^func TestChunkList(t *testing.T) {$/;"	f	package:fzf
TestColorOffset	vim/pack/minpac/start/fzf/src/result_test.go	/^func TestColorOffset(t *testing.T) {$/;"	f	package:fzf
TestColorSpec	vim/pack/minpac/start/fzf/src/options_test.go	/^func TestColorSpec(t *testing.T) {$/;"	f	package:fzf
TestContrain	vim/pack/minpac/start/fzf/src/util/util_test.go	/^func TestContrain(t *testing.T) {$/;"	f	package:util
TestDefaultCtrlNP	vim/pack/minpac/start/fzf/src/options_test.go	/^func TestDefaultCtrlNP(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegex	vim/pack/minpac/start/fzf/src/options_test.go	/^func TestDelimiterRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexRegex	vim/pack/minpac/start/fzf/src/options_test.go	/^func TestDelimiterRegexRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexString	vim/pack/minpac/start/fzf/src/options_test.go	/^func TestDelimiterRegexString(t *testing.T) {$/;"	f	package:fzf
TestEmptyMerger	vim/pack/minpac/start/fzf/src/merger_test.go	/^func TestEmptyMerger(t *testing.T) {$/;"	f	package:fzf
TestEmptyPattern	vim/pack/minpac/start/fzf/src/algo/algo_test.go	/^func TestEmptyPattern(t *testing.T) {$/;"	f	package:algo
TestEqual	vim/pack/minpac/start/fzf/src/pattern_test.go	/^func TestEqual(t *testing.T) {$/;"	f	package:fzf
TestEventBox	vim/pack/minpac/start/fzf/src/util/eventbox_test.go	/^func TestEventBox(t *testing.T) {$/;"	f	package:util
TestExact	vim/pack/minpac/start/fzf/src/pattern_test.go	/^func TestExact(t *testing.T) {$/;"	f	package:fzf
TestExactMatchNaive	vim/pack/minpac/start/fzf/src/algo/algo_test.go	/^func TestExactMatchNaive(t *testing.T) {$/;"	f	package:algo
TestExactMatchNaiveBackward	vim/pack/minpac/start/fzf/src/algo/algo_test.go	/^func TestExactMatchNaiveBackward(t *testing.T) {$/;"	f	package:algo
TestExtractColor	vim/pack/minpac/start/fzf/src/ansi_test.go	/^func TestExtractColor(t *testing.T) {$/;"	f	package:fzf
TestFish	vim/pack/minpac/start/fzf/test/test_go.rb	/^class TestFish < TestBase$/;"	c
TestFuzzyMatch	vim/pack/minpac/start/fzf/src/algo/algo_test.go	/^func TestFuzzyMatch(t *testing.T) {$/;"	f	package:algo
TestFuzzyMatchBackward	vim/pack/minpac/start/fzf/src/algo/algo_test.go	/^func TestFuzzyMatchBackward(t *testing.T) {$/;"	f	package:algo
TestGoFZF	vim/pack/minpac/start/fzf/test/test_go.rb	/^class TestGoFZF < TestBase$/;"	c
TestHexToColor	vim/pack/minpac/start/fzf/src/tui/tui_test.go	/^func TestHexToColor(t *testing.T) {$/;"	f	package:tui
TestHistory	vim/pack/minpac/start/fzf/src/history_test.go	/^func TestHistory(t *testing.T) {$/;"	f	package:fzf
TestIrrelevantNth	vim/pack/minpac/start/fzf/src/options_test.go	/^func TestIrrelevantNth(t *testing.T) {$/;"	f	package:fzf
TestLongString	vim/pack/minpac/start/fzf/src/algo/algo_test.go	/^func TestLongString(t *testing.T) {$/;"	f	package:algo
TestMax	vim/pack/minpac/start/fzf/src/util/util_test.go	/^func TestMax(t *testing.T) {$/;"	f	package:util
TestMergerSorted	vim/pack/minpac/start/fzf/src/merger_test.go	/^func TestMergerSorted(t *testing.T) {$/;"	f	package:fzf
TestMergerUnsorted	vim/pack/minpac/start/fzf/src/merger_test.go	/^func TestMergerUnsorted(t *testing.T) {$/;"	f	package:fzf
TestNormalize	vim/pack/minpac/start/fzf/src/algo/algo_test.go	/^func TestNormalize(t *testing.T) {$/;"	f	package:algo
TestOffsetSort	vim/pack/minpac/start/fzf/src/result_test.go	/^func TestOffsetSort(t *testing.T) {$/;"	f	package:fzf
TestOrigTextAndTransformed	vim/pack/minpac/start/fzf/src/pattern_test.go	/^func TestOrigTextAndTransformed(t *testing.T) {$/;"	f	package:fzf
TestParseKeys	vim/pack/minpac/start/fzf/src/options_test.go	/^func TestParseKeys(t *testing.T) {$/;"	f	package:fzf
TestParseKeysWithComma	vim/pack/minpac/start/fzf/src/options_test.go	/^func TestParseKeysWithComma(t *testing.T) {$/;"	f	package:fzf
TestParseNilTheme	vim/pack/minpac/start/fzf/src/options_test.go	/^func TestParseNilTheme(t *testing.T) {$/;"	f	package:fzf
TestParseRange	vim/pack/minpac/start/fzf/src/tokenizer_test.go	/^func TestParseRange(t *testing.T) {$/;"	f	package:fzf
TestParseTermsEmpty	vim/pack/minpac/start/fzf/src/pattern_test.go	/^func TestParseTermsEmpty(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtended	vim/pack/minpac/start/fzf/src/pattern_test.go	/^func TestParseTermsExtended(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtendedExact	vim/pack/minpac/start/fzf/src/pattern_test.go	/^func TestParseTermsExtendedExact(t *testing.T) {$/;"	f	package:fzf
TestPrefixMatch	vim/pack/minpac/start/fzf/src/algo/algo_test.go	/^func TestPrefixMatch(t *testing.T) {$/;"	f	package:algo
TestPreviewOpts	vim/pack/minpac/start/fzf/src/options_test.go	/^func TestPreviewOpts(t *testing.T) {$/;"	f	package:fzf
TestQuoteEntryCmd	vim/pack/minpac/start/fzf/src/terminal_test.go	/^func TestQuoteEntryCmd(t *testing.T) {$/;"	f	package:fzf
TestRankComparison	vim/pack/minpac/start/fzf/src/result_test.go	/^func TestRankComparison(t *testing.T) {$/;"	f	package:fzf
TestReadFromCommand	vim/pack/minpac/start/fzf/src/reader_test.go	/^func TestReadFromCommand(t *testing.T) {$/;"	f	package:fzf
TestReplacePlaceholder	vim/pack/minpac/start/fzf/src/terminal_test.go	/^func TestReplacePlaceholder(t *testing.T) {$/;"	f	package:fzf
TestResultRank	vim/pack/minpac/start/fzf/src/result_test.go	/^func TestResultRank(t *testing.T) {$/;"	f	package:fzf
TestShell	vim/pack/minpac/start/fzf/test/test_go.rb	/^module TestShell$/;"	m
TestSplitNth	vim/pack/minpac/start/fzf/src/options_test.go	/^func TestSplitNth(t *testing.T) {$/;"	f	package:fzf
TestStringPtr	vim/pack/minpac/start/fzf/src/item_test.go	/^func TestStringPtr(t *testing.T) {$/;"	f	package:fzf
TestSuffixMatch	vim/pack/minpac/start/fzf/src/algo/algo_test.go	/^func TestSuffixMatch(t *testing.T) {$/;"	f	package:algo
TestToCharsAscii	vim/pack/minpac/start/fzf/src/util/chars_test.go	/^func TestToCharsAscii(t *testing.T) {$/;"	f	package:util
TestToggle	vim/pack/minpac/start/fzf/src/options_test.go	/^func TestToggle(t *testing.T) {$/;"	f	package:fzf
TestTokenize	vim/pack/minpac/start/fzf/src/tokenizer_test.go	/^func TestTokenize(t *testing.T) {$/;"	f	package:fzf
TestTransform	vim/pack/minpac/start/fzf/src/tokenizer_test.go	/^func TestTransform(t *testing.T) {$/;"	f	package:fzf
TestTransformIndexOutOfBounds	vim/pack/minpac/start/fzf/src/tokenizer_test.go	/^func TestTransformIndexOutOfBounds(t *testing.T) {$/;"	f	package:fzf
TestTrimLength	vim/pack/minpac/start/fzf/src/util/chars_test.go	/^func TestTrimLength(t *testing.T) {$/;"	f	package:util
TestZsh	vim/pack/minpac/start/fzf/test/test_go.rb	/^class TestZsh < TestBase$/;"	c
Test_dir_in_project	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_dir_in_project()$/;"	f
Test_directory_is_ancestor	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_directory_is_ancestor()$/;"	f
Test_file_in_project	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_file_in_project()$/;"	f
Test_file_in_project_subdir	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_file_in_project_subdir()$/;"	f
Test_ignores_suffixesadd	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_ignores_suffixesadd()$/;"	f
Test_minpac_add	vim/pack/minpac/opt/minpac/test/test_minpac.vim	/^func Test_minpac_add()$/;"	f
Test_minpac_clean	vim/pack/minpac/opt/minpac/test/test_minpac.vim	/^func Test_minpac_clean()$/;"	f
Test_minpac_getpackages	vim/pack/minpac/opt/minpac/test/test_minpac.vim	/^func Test_minpac_getpackages()$/;"	f
Test_minpac_init	vim/pack/minpac/opt/minpac/test/test_minpac.vim	/^func Test_minpac_init()$/;"	f
Test_minpac_update	vim/pack/minpac/opt/minpac/test/test_minpac.vim	/^func Test_minpac_update()$/;"	f
Test_non_project_file_change_to_home	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_non_project_file_change_to_home()$/;"	f
Test_non_project_file_change_to_parent	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_non_project_file_change_to_parent()$/;"	f
Test_non_project_file_default	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_non_project_file_default()$/;"	f
Test_project_dir	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_project_dir()$/;"	f
Test_resolve_symlinks	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_resolve_symlinks()$/;"	f
Test_target_directories_only	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_target_directories_only()$/;"	f
Test_target_some_files_only	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_target_some_files_only()$/;"	f
Test_user_autocmd	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_user_autocmd()$/;"	f
Test_write_file_to_different_name	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_write_file_to_different_name()$/;"	f
Test_write_new_file	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^function Test_write_new_file()$/;"	f
Testing	vim/pack/minpac/start/vim-gutentags/CONTRIBUTING.md	/^## Testing$/;"	s
Testing	vim/pack/minpac/start/vim-rooter/test/README.markdown	/^# Testing$/;"	c
The NERDTree	vim/pack/minpac/start/nerdtree/README.markdown	/^The NERDTree$/;"	c
Theme	vim/pack/minpac/start/fzf/src/options.go	/^	Theme       *tui.ColorTheme$/;"	m	struct:fzf.Options
Third-party libraries used	vim/pack/minpac/start/fzf/BUILD.md	/^Third-party libraries used$/;"	s
Time	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -count=1 -nargs=? -complete=command Time :exe scriptease#time_command(<q-args>, <count>/;"	c
Tips	vim/pack/minpac/start/fzf/README.md	/^Tips$/;"	s
Tmux	vim/pack/minpac/start/fzf/test/test_go.rb	/^class Tmux$/;"	c
To apply the command to CTRL-T as well	vim/pack/minpac/start/fzf/README.md	/^# To apply the command to CTRL-T as well$/;"	c
To install useful key bindings and fuzzy completion:	vim/pack/minpac/start/fzf/README.md	/^# To install useful key bindings and fuzzy completion:$/;"	c
ToChars	vim/pack/minpac/start/fzf/src/util/chars.go	/^func ToChars(bytes []byte) Chars {$/;"	f	package:util
ToRunes	vim/pack/minpac/start/fzf/src/util/chars.go	/^func (chars *Chars) ToRunes() []rune {$/;"	f	unknown:util.Chars
ToString	vim/pack/minpac/start/fzf/src/util/chars.go	/^func (chars *Chars) ToString() string {$/;"	f	unknown:util.Chars
Todo	vimrc	/^command! Todo :Grepper -tool git -query '\\(TODO\\|FIXME\\)'$/;"	c
ToggleSort	vim/pack/minpac/start/fzf/src/options.go	/^	ToggleSort  bool$/;"	m	struct:fzf.Options
Token	vim/pack/minpac/start/fzf/src/tokenizer.go	/^type Token struct {$/;"	s	package:fzf
Tokenize	vim/pack/minpac/start/fzf/src/tokenizer.go	/^func Tokenize(text string, delimiter Delimiter) []Token {$/;"	f	package:fzf
Top	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) Top() int {$/;"	f	unknown:tui.LightWindow
Top	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Top() int {$/;"	f	unknown:tui.TcellWindow
TrailingWhitespaces	vim/pack/minpac/start/fzf/src/util/chars.go	/^func (chars *Chars) TrailingWhitespaces() int {$/;"	f	unknown:util.Chars
Transform	vim/pack/minpac/start/fzf/src/tokenizer.go	/^func Transform(tokens []Token, withNth []Range) []Token {$/;"	f	package:fzf
TrimLength	vim/pack/minpac/start/fzf/src/item.go	/^func (item *Item) TrimLength() uint16 {$/;"	f	unknown:fzf.Item
TrimLength	vim/pack/minpac/start/fzf/src/util/chars.go	/^func (chars *Chars) TrimLength() uint16 {$/;"	f	unknown:util.Chars
Troubleshooting	vim/pack/minpac/start/vim-minimap/README.md	/^Troubleshooting$/;"	s
True-color support	vim/pack/minpac/start/vim-solarized/README.md	/^## True-color support$/;"	s
Try highlight, coderay, rougify in turn, then fall back to cat	vim/pack/minpac/start/fzf/README.md	/^# Try highlight, coderay, rougify in turn, then fall back to cat$/;"	c
Turtle	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^class Turtle(Canvas):$/;"	c
TurtleTestCase	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^class TurtleTestCase(TestCase):$/;"	c
Type	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Type       int$/;"	m	struct:tui.Event
UNAME_M	vim/pack/minpac/start/fzf/Makefile	/^UNAME_M := $(shell uname -m)$/;"	m
UPDATED_SOURCE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
USAGE	vim/pack/minpac/start/vim-minimap/autoload/drawille/README.md	/^### USAGE$/;"	S
Underline	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^	Underline        = Attr(1 << 3)$/;"	c	package:tui
Underline	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	Underline      = Attr(tcell.AttrUnderline)$/;"	c	package:tui
UnimpairedMapTransform	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! UnimpairedMapTransform(algorithm, key) abort$/;"	f
Unlock	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Unwatch	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Unwatch(events ...EventType) {$/;"	f	unknown:util.EventBox
Up	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Up$/;"	c	package:tui
UpdateCount	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) UpdateCount(cnt int, final bool, success bool) {$/;"	f	unknown:fzf.Terminal
UpdateHeader	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) UpdateHeader(header []string) {$/;"	f	unknown:fzf.Terminal
UpdateList	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) UpdateList(merger *Merger) {$/;"	f	unknown:fzf.Terminal
UpdatePacks	vimrc	/^command! UpdatePacks call minpac#update()$/;"	c
UpdateProgress	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) UpdateProgress(progress float32) {$/;"	f	unknown:fzf.Terminal
Upgrading fzf	vim/pack/minpac/start/fzf/README.md	/^Upgrading fzf$/;"	s
Usage	vim/pack/minpac/opt/minpac/README.md	/^Usage$/;"	s
Usage	vim/pack/minpac/start/fzf.vim/README.md	/^### Usage$/;"	S
Usage	vim/pack/minpac/start/fzf/README.md	/^Usage$/;"	s
Usage	vim/pack/minpac/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
Usage	vim/pack/minpac/start/vim-minimap/README.md	/^Usage$/;"	s
Use fd (https://github.com/sharkdp/fd) instead of the default find	vim/pack/minpac/start/fzf/README.md	/^# Use fd (https:\/\/github.com\/sharkdp\/fd) instead of the default find$/;"	c
Use fd to generate the list for directory completion	vim/pack/minpac/start/fzf/README.md	/^# Use fd to generate the list for directory completion$/;"	c
Use head instead of cat so that the command doesn't take too long to finish	vim/pack/minpac/start/fzf/README.md	/^# Use head instead of cat so that the command doesn't take too long to finish$/;"	c
Use ~~ as the trigger sequence instead of the default **	vim/pack/minpac/start/fzf/README.md	/^# Use ~~ as the trigger sequence instead of the default **$/;"	c
Using Homebrew or Linuxbrew	vim/pack/minpac/start/fzf/README.md	/^### Using Homebrew or Linuxbrew$/;"	S
Using Makefile	vim/pack/minpac/start/fzf/BUILD.md	/^### Using Makefile$/;"	S
Using [vim-plug](https://github.com/junegunn/vim-plug)	vim/pack/minpac/start/fzf.vim/README.md	/^### Using [vim-plug](https:\/\/github.com\/junegunn\/vim-plug)$/;"	S
Using `go get`	vim/pack/minpac/start/fzf/BUILD.md	/^### Using `go get`$/;"	S
Using git	vim/pack/minpac/start/fzf/README.md	/^### Using git$/;"	S
Using the finder	vim/pack/minpac/start/fzf/README.md	/^#### Using the finder$/;"	t
VADER_OUTPUT_FILE	vim/pack/minpac/start/ale/run-tests.bat	/^set VADER_OUTPUT_FILE=%~dp0\\vader_output$/;"	v
VENDOR_LINK	vim/pack/minpac/start/fzf/Makefile	/^VENDOR_LINK := $(GOPATH)\/src\/github.com\/junegunn\/fzf\/vendor$/;"	m
VERSION	vim/pack/minpac/start/fzf/Makefile	/^VERSION     := $(shell awk -F= '\/version =\/ {print $$2}' src\/constants.go | tr -d "\\" ")$/;"	m
VIMPROG	vim/pack/minpac/opt/minpac/test/Make_win.mak	/^VIMPROG = vim$/;"	m
VIMPROG	vim/pack/minpac/opt/minpac/test/Makefile	/^VIMPROG = vim$/;"	m
VariableDeclarator	eslintrc.json	/^      "VariableDeclarator": 1,$/;"	n	object:rules
Ve	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Ve$/;"	c
Vedit	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Vedit$/;"	c
Verbose	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -range=-1 -nargs=1 -complete=command Verbose$/;"	c
Version	vim/pack/minpac/start/fzf/src/options.go	/^	Version     bool$/;"	m	struct:fzf.Options
Vim 8 on Unix	vim/pack/minpac/start/ale/README.md	/^#### Vim 8 on Unix$/;"	t
Vim 8 on Windows	vim/pack/minpac/start/ale/README.md	/^#### Vim 8 on Windows$/;"	t
Vim plugin	vim/pack/minpac/start/fzf/README.md	/^Vim plugin$/;"	s
Vim-Matchit	vim/pack/minpac/start/vim-matchit/README.md	/^# Vim-Matchit$/;"	c
Vopen	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Vopen$/;"	c
Vpedit	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Vpedit$/;"	c
Vread	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Vread$/;"	c
Vsplit	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Vsplit$/;"	c
Vtabedit	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Vtabedit$/;"	c
Vundle	vim/pack/minpac/start/vim-minimap/README.md	/^### Vundle$/;"	S
Vvsplit	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,scriptease#complete Vvsplit$/;"	c
WIDTH	vim/pack/minpac/start/vim-minimap/autoload/minimap.py	/^WIDTH = 20$/;"	v
Wait	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Wait(callback func(*Events)) {$/;"	f	unknown:util.EventBox
WaitFor	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^func (b *EventBox) WaitFor(event EventType) {$/;"	f	unknown:util.EventBox
Watch	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Watch(events ...EventType) {$/;"	f	unknown:util.EventBox
What Tagbar is	vim/pack/minpac/start/tagbar/README.md	/^## What Tagbar is$/;"	s
What Tagbar is not	vim/pack/minpac/start/tagbar/README.md	/^## What Tagbar is not$/;"	s
What went wrong	vim/pack/minpac/start/ale/ISSUE_TEMPLATE.md	/^## What went wrong$/;"	s
What?	vim/pack/minpac/start/vim-gutentags/README.md	/^## What?$/;"	s
Why yet another clone of powerline?	vim/pack/minpac/start/lightline.vim/README.md	/^## Why yet another clone of powerline?$/;"	s
Why you should use fzf on Vim	vim/pack/minpac/start/fzf.vim/README.md	/^Why you should use fzf on Vim$/;"	s
Why?	vim/pack/minpac/start/vim-gutentags/README.md	/^## Why?$/;"	s
Width	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) Width() int {$/;"	f	unknown:tui.LightWindow
Width	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Width() int {$/;"	f	unknown:tui.TcellWindow
Window	vim/pack/minpac/start/fzf/src/tui/tui.go	/^type Window interface {$/;"	i	package:tui
Windows	vim/pack/minpac/opt/minpac/README.md	/^### Windows$/;"	S
Windows	vim/pack/minpac/start/fzf/README.md	/^### Windows$/;"	S
WithNth	vim/pack/minpac/start/fzf/src/options.go	/^	WithNth     []Range$/;"	m	struct:fzf.Options
WriteBookmarks	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 WriteBookmarks call g:NERDTreeBookmark.Write()$/;"	c
Writing	vim/pack/minpac/start/vim-gutentags/CONTRIBUTING.md	/^## Writing$/;"	s
X	vim/colors/twilight256.vim	/^    fun <SID>X(group, fg, bg, attr)$/;"	f
X	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) X() int {$/;"	f	unknown:tui.LightWindow
X	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) X() int {$/;"	f	unknown:tui.TcellWindow
X	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	X      int$/;"	m	struct:tui.MouseEvent
Y	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) Y() int {$/;"	f	unknown:tui.LightWindow
Y	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Y() int {$/;"	f	unknown:tui.TcellWindow
Y	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	Y      int$/;"	m	struct:tui.MouseEvent
Y	vimrc	/^nnoremap Y y\$$/;"	m
[%	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>$/;"	m
[%	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>$/;"	m
[%	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^vmap [% <Esc>[%m'gv``$/;"	m
[1.0] - 2015-12-09	vim/pack/minpac/start/vim-grepper/CHANGELOG.md	/^## [1.0] - 2015-12-09$/;"	s
[1.1] - 2016-01-18	vim/pack/minpac/start/vim-grepper/CHANGELOG.md	/^## [1.1] - 2016-01-18$/;"	s
[1.2] - 2016-01-23	vim/pack/minpac/start/vim-grepper/CHANGELOG.md	/^## [1.2] - 2016-01-23$/;"	s
[1.3] - 2016-09-26	vim/pack/minpac/start/vim-grepper/CHANGELOG.md	/^## [1.3] - 2016-09-26$/;"	s
[1.4] - 2016-11-11	vim/pack/minpac/start/vim-grepper/CHANGELOG.md	/^## [1.4] - 2016-11-11$/;"	s
[License](LICENSE)	vim/pack/minpac/start/fzf/README-VIM.md	/^[License](LICENSE)$/;"	s
[License](LICENSE)	vim/pack/minpac/start/fzf/README.md	/^[License](LICENSE)$/;"	s
[NeoBundle](https://github.com/Shougo/neobundle.vim)	vim/pack/minpac/start/lightline.vim/README.md	/^### [NeoBundle](https:\/\/github.com\/Shougo\/neobundle.vim)$/;"	S
[Pathogen](https://github.com/tpope/vim-pathogen)	vim/pack/minpac/start/lightline.vim/README.md	/^### [Pathogen](https:\/\/github.com\/tpope\/vim-pathogen)$/;"	S
[Vundle](https://github.com/VundleVim/Vundle.vim)	vim/pack/minpac/start/lightline.vim/README.md	/^### [Vundle](https:\/\/github.com\/VundleVim\/Vundle.vim)$/;"	S
[W	vimrc	/^nmap <silent> [W <Plug>(ale_first)$/;"	m
[apt-vim](https://github.com/egalpin/apt-vim)	vim/pack/minpac/start/nerdtree/README.markdown	/^#### [apt-vim](https:\/\/github.com\/egalpin\/apt-vim)$/;"	t
[pathogen.vim](https://github.com/tpope/vim-pathogen)	vim/pack/minpac/start/nerdtree/README.markdown	/^#### [pathogen.vim](https:\/\/github.com\/tpope\/vim-pathogen)$/;"	t
[vim-plug](https://github.com/junegunn/vim-plug)	vim/pack/minpac/start/lightline.vim/README.md	/^### [vim-plug](https:\/\/github.com\/junegunn\/vim-plug)$/;"	S
[w	vimrc	/^nmap <silent> [w <Plug>(ale_previous)$/;"	m
]%	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "n") <CR>$/;"	m
]%	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W",  "o") <CR>$/;"	m
]%	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^vmap ]% <Esc>]%m'gv``$/;"	m
]W	vimrc	/^nmap <silent> ]W <Plug>(ale_last)$/;"	m
]w	vimrc	/^nmap <silent> ]w <Plug>(ale_next)$/;"	m
__fsel	vim/pack/minpac/start/fzf/shell/key-bindings.zsh	/^__fsel() {$/;"	f
__fzf_cd__	vim/pack/minpac/start/fzf/shell/key-bindings.bash	/^__fzf_cd__() {$/;"	f
__fzf_generic_path_completion	vim/pack/minpac/start/fzf/shell/completion.bash	/^__fzf_generic_path_completion() {$/;"	f
__fzf_generic_path_completion	vim/pack/minpac/start/fzf/shell/completion.zsh	/^__fzf_generic_path_completion() {$/;"	f
__fzf_history__	vim/pack/minpac/start/fzf/shell/key-bindings.bash	/^__fzf_history__() ($/;"	f
__fzf_orig_completion_filter	vim/pack/minpac/start/fzf/shell/completion.bash	/^__fzf_orig_completion_filter() {$/;"	f
__fzf_select__	vim/pack/minpac/start/fzf/shell/key-bindings.bash	/^__fzf_select__() {$/;"	f
__fzf_select_tmux__	vim/pack/minpac/start/fzf/shell/key-bindings.bash	/^__fzf_select_tmux__() {$/;"	f
__fzf_use_tmux__	vim/pack/minpac/start/fzf/shell/key-bindings.bash	/^__fzf_use_tmux__() {$/;"	f
__fzf_use_tmux__	vim/pack/minpac/start/fzf/shell/key-bindings.zsh	/^__fzf_use_tmux__() {$/;"	f
__fzfcmd	vim/pack/minpac/start/fzf/shell/key-bindings.bash	/^__fzfcmd() {$/;"	f
__fzfcmd	vim/pack/minpac/start/fzf/shell/key-bindings.zsh	/^__fzfcmd() {$/;"	f
__fzfcmd_complete	vim/pack/minpac/start/fzf/shell/completion.bash	/^__fzfcmd_complete() {$/;"	f
__fzfcmd_complete	vim/pack/minpac/start/fzf/shell/completion.zsh	/^__fzfcmd_complete() {$/;"	f
__git_aliased_command	git-completion.bash	/^__git_aliased_command ()$/;"	f
__git_aliases	git-completion.bash	/^__git_aliases ()$/;"	f
__git_complete	git-completion.bash	/^__git_complete ()$/;"	f
__git_complete_file	git-completion.bash	/^__git_complete_file ()$/;"	f
__git_complete_remote_or_refspec	git-completion.bash	/^__git_complete_remote_or_refspec ()$/;"	f
__git_complete_revlist	git-completion.bash	/^__git_complete_revlist ()$/;"	f
__git_complete_revlist_file	git-completion.bash	/^__git_complete_revlist_file ()$/;"	f
__git_complete_strategy	git-completion.bash	/^__git_complete_strategy ()$/;"	f
__git_compute_all_commands	git-completion.bash	/^__git_compute_all_commands ()$/;"	f
__git_compute_merge_strategies	git-completion.bash	/^__git_compute_merge_strategies ()$/;"	f
__git_compute_porcelain_commands	git-completion.bash	/^__git_compute_porcelain_commands ()$/;"	f
__git_config_get_set_variables	git-completion.bash	/^__git_config_get_set_variables ()$/;"	f
__git_find_on_cmdline	git-completion.bash	/^__git_find_on_cmdline ()$/;"	f
__git_func_wrap	git-completion.bash	/^__git_func_wrap ()$/;"	f
__git_has_doubledash	git-completion.bash	/^__git_has_doubledash ()$/;"	f
__git_heads	git-completion.bash	/^__git_heads ()$/;"	f
__git_list_all_commands	git-completion.bash	/^__git_list_all_commands ()$/;"	f
__git_list_merge_strategies	git-completion.bash	/^__git_list_merge_strategies ()$/;"	f
__git_list_porcelain_commands	git-completion.bash	/^__git_list_porcelain_commands ()$/;"	f
__git_main	git-completion.bash	/^__git_main ()$/;"	f
__git_match_ctag	git-completion.bash	/^__git_match_ctag() {$/;"	f
__git_pretty_aliases	git-completion.bash	/^__git_pretty_aliases ()$/;"	f
__git_reassemble_comp_words_by_ref	git-completion.bash	/^__git_reassemble_comp_words_by_ref()$/;"	f
__git_refs	git-completion.bash	/^__git_refs ()$/;"	f
__git_refs2	git-completion.bash	/^__git_refs2 ()$/;"	f
__git_refs_remotes	git-completion.bash	/^__git_refs_remotes ()$/;"	f
__git_remotes	git-completion.bash	/^__git_remotes ()$/;"	f
__git_tags	git-completion.bash	/^__git_tags ()$/;"	f
__git_zsh_helper	git-completion.bash	/^	__git_zsh_helper ()$/;"	f
__gitcomp	git-completion.bash	/^	__gitcomp ()$/;"	f
__gitcomp	git-completion.bash	/^__gitcomp ()$/;"	f
__gitcomp_1	git-completion.bash	/^__gitcomp_1 ()$/;"	f
__gitcomp_nl	git-completion.bash	/^	__gitcomp_nl ()$/;"	f
__gitcomp_nl	git-completion.bash	/^__gitcomp_nl ()$/;"	f
__gitdir	git-completion.bash	/^__gitdir ()$/;"	f
__gitk_main	git-completion.bash	/^__gitk_main ()$/;"	f
__init__	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def __init__(self, line_ending=os.linesep):$/;"	m	class:Canvas
__init__	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def __init__(self, pos_x=0, pos_y=0):$/;"	m	class:Turtle
__init__	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^    def __init__(self, bar_width, cap_height=4, space=3*13):$/;"	m	class:Bar
__init__	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^    def __init__(self, x = 0, y = 0, z = 0):$/;"	m	class:Point3D
__main__	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/image2term.py	/^def __main__():$/;"	f
__main__	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^def __main__(stdscr, projection=False):$/;"	f
__main__	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/sine_tracking.py	/^def __main__():$/;"	f
_cache	vim/pack/minpac/start/fzf/src/pattern.go	/^	_cache        ChunkCache$/;"	v	package:fzf
_colorToAttribute	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	_colorToAttribute = []tcell.Color{$/;"	v	package:tui
_fzf_compgen_dir	vim/pack/minpac/start/fzf/shell/completion.bash	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_dir	vim/pack/minpac/start/fzf/shell/completion.zsh	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_path	vim/pack/minpac/start/fzf/shell/completion.bash	/^  _fzf_compgen_path() {$/;"	f
_fzf_compgen_path	vim/pack/minpac/start/fzf/shell/completion.zsh	/^  _fzf_compgen_path() {$/;"	f
_fzf_complete	vim/pack/minpac/start/fzf/shell/completion.bash	/^_fzf_complete() {$/;"	f
_fzf_complete	vim/pack/minpac/start/fzf/shell/completion.zsh	/^_fzf_complete() {$/;"	f
_fzf_complete_export	vim/pack/minpac/start/fzf/shell/completion.bash	/^_fzf_complete_export() {$/;"	f
_fzf_complete_export	vim/pack/minpac/start/fzf/shell/completion.zsh	/^_fzf_complete_export() {$/;"	f
_fzf_complete_kill	vim/pack/minpac/start/fzf/shell/completion.bash	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_ssh	vim/pack/minpac/start/fzf/shell/completion.bash	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_ssh	vim/pack/minpac/start/fzf/shell/completion.zsh	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_telnet	vim/pack/minpac/start/fzf/shell/completion.bash	/^_fzf_complete_telnet() {$/;"	f
_fzf_complete_telnet	vim/pack/minpac/start/fzf/shell/completion.zsh	/^_fzf_complete_telnet() {$/;"	f
_fzf_complete_unalias	vim/pack/minpac/start/fzf/shell/completion.bash	/^_fzf_complete_unalias() {$/;"	f
_fzf_complete_unalias	vim/pack/minpac/start/fzf/shell/completion.zsh	/^_fzf_complete_unalias() {$/;"	f
_fzf_complete_unset	vim/pack/minpac/start/fzf/shell/completion.bash	/^_fzf_complete_unset() {$/;"	f
_fzf_complete_unset	vim/pack/minpac/start/fzf/shell/completion.zsh	/^_fzf_complete_unset() {$/;"	f
_fzf_defc	vim/pack/minpac/start/fzf/shell/completion.bash	/^_fzf_defc() {$/;"	f
_fzf_dir_completion	vim/pack/minpac/start/fzf/shell/completion.bash	/^_fzf_dir_completion() {$/;"	f
_fzf_dir_completion	vim/pack/minpac/start/fzf/shell/completion.zsh	/^_fzf_dir_completion() {$/;"	f
_fzf_feed_fifo	vim/pack/minpac/start/fzf/shell/completion.zsh	/^_fzf_feed_fifo() ($/;"	f
_fzf_file_completion	vim/pack/minpac/start/fzf/shell/completion.bash	/^_fzf_file_completion() {$/;"	f
_fzf_handle_dynamic_completion	vim/pack/minpac/start/fzf/shell/completion.bash	/^_fzf_handle_dynamic_completion() {$/;"	f
_fzf_opts_completion	vim/pack/minpac/start/fzf/shell/completion.bash	/^_fzf_opts_completion() {$/;"	f
_fzf_path_completion	vim/pack/minpac/start/fzf/shell/completion.bash	/^_fzf_path_completion() {$/;"	f
_fzf_path_completion	vim/pack/minpac/start/fzf/shell/completion.zsh	/^_fzf_path_completion() {$/;"	f
_fzf_statusline	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^  augroup _fzf_statusline$/;"	a
_get_comp_words_by_ref	git-completion.bash	/^_get_comp_words_by_ref ()$/;"	f
_git	git-completion.bash	/^	_git ()$/;"	f
_git	git-completion.bash	/^_git ()$/;"	f
_git_add	git-completion.bash	/^_git_add ()$/;"	f
_git_am	git-completion.bash	/^_git_am ()$/;"	f
_git_apply	git-completion.bash	/^_git_apply ()$/;"	f
_git_archive	git-completion.bash	/^_git_archive ()$/;"	f
_git_bisect	git-completion.bash	/^_git_bisect ()$/;"	f
_git_branch	git-completion.bash	/^_git_branch ()$/;"	f
_git_bundle	git-completion.bash	/^_git_bundle ()$/;"	f
_git_checkout	git-completion.bash	/^_git_checkout ()$/;"	f
_git_cherry	git-completion.bash	/^_git_cherry ()$/;"	f
_git_cherry_pick	git-completion.bash	/^_git_cherry_pick ()$/;"	f
_git_clean	git-completion.bash	/^_git_clean ()$/;"	f
_git_clone	git-completion.bash	/^_git_clone ()$/;"	f
_git_commit	git-completion.bash	/^_git_commit ()$/;"	f
_git_config	git-completion.bash	/^_git_config ()$/;"	f
_git_describe	git-completion.bash	/^_git_describe ()$/;"	f
_git_diff	git-completion.bash	/^_git_diff ()$/;"	f
_git_difftool	git-completion.bash	/^_git_difftool ()$/;"	f
_git_fetch	git-completion.bash	/^_git_fetch ()$/;"	f
_git_format_patch	git-completion.bash	/^_git_format_patch ()$/;"	f
_git_fsck	git-completion.bash	/^_git_fsck ()$/;"	f
_git_gc	git-completion.bash	/^_git_gc ()$/;"	f
_git_gitk	git-completion.bash	/^_git_gitk ()$/;"	f
_git_grep	git-completion.bash	/^_git_grep ()$/;"	f
_git_help	git-completion.bash	/^_git_help ()$/;"	f
_git_init	git-completion.bash	/^_git_init ()$/;"	f
_git_log	git-completion.bash	/^_git_log ()$/;"	f
_git_ls_files	git-completion.bash	/^_git_ls_files ()$/;"	f
_git_ls_remote	git-completion.bash	/^_git_ls_remote ()$/;"	f
_git_ls_tree	git-completion.bash	/^_git_ls_tree ()$/;"	f
_git_merge	git-completion.bash	/^_git_merge ()$/;"	f
_git_merge_base	git-completion.bash	/^_git_merge_base ()$/;"	f
_git_mergetool	git-completion.bash	/^_git_mergetool ()$/;"	f
_git_mv	git-completion.bash	/^_git_mv ()$/;"	f
_git_name_rev	git-completion.bash	/^_git_name_rev ()$/;"	f
_git_notes	git-completion.bash	/^_git_notes ()$/;"	f
_git_pull	git-completion.bash	/^_git_pull ()$/;"	f
_git_push	git-completion.bash	/^_git_push ()$/;"	f
_git_rebase	git-completion.bash	/^_git_rebase ()$/;"	f
_git_reflog	git-completion.bash	/^_git_reflog ()$/;"	f
_git_remote	git-completion.bash	/^_git_remote ()$/;"	f
_git_replace	git-completion.bash	/^_git_replace ()$/;"	f
_git_reset	git-completion.bash	/^_git_reset ()$/;"	f
_git_revert	git-completion.bash	/^_git_revert ()$/;"	f
_git_rm	git-completion.bash	/^_git_rm ()$/;"	f
_git_send_email	git-completion.bash	/^_git_send_email ()$/;"	f
_git_shortlog	git-completion.bash	/^_git_shortlog ()$/;"	f
_git_show	git-completion.bash	/^_git_show ()$/;"	f
_git_show_branch	git-completion.bash	/^_git_show_branch ()$/;"	f
_git_stage	git-completion.bash	/^_git_stage ()$/;"	f
_git_stash	git-completion.bash	/^_git_stash ()$/;"	f
_git_submodule	git-completion.bash	/^_git_submodule ()$/;"	f
_git_svn	git-completion.bash	/^_git_svn ()$/;"	f
_git_tag	git-completion.bash	/^_git_tag ()$/;"	f
_git_whatchanged	git-completion.bash	/^_git_whatchanged ()$/;"	f
_gitk	git-completion.bash	/^_gitk ()$/;"	f
_patternCache	vim/pack/minpac/start/fzf/src/pattern.go	/^	_patternCache map[string]*Pattern$/;"	v	package:fzf
_runeWidths	vim/pack/minpac/start/fzf/src/util/util.go	/^var _runeWidths = make(map[rune]int)$/;"	v	package:util
_screen	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	_screen tcell.Screen$/;"	v	package:tui
_spinner	vim/pack/minpac/start/fzf/src/terminal.go	/^var _spinner = []string{`-`, `\\`, `|`, `\/`, `-`, `\\`, `|`, `\/`}$/;"	v	package:fzf
_splitRegex	vim/pack/minpac/start/fzf/src/pattern.go	/^	_splitRegex   *regexp.Regexp$/;"	v	package:fzf
`--filter` will not block when sort is disabled	vim/pack/minpac/start/fzf/CHANGELOG.md	/^#### `--filter` will not block when sort is disabled$/;"	t
`:FZF[!]`	vim/pack/minpac/start/fzf/README-VIM.md	/^`:FZF[!]`$/;"	s
`fzf#run`	vim/pack/minpac/start/fzf/README-VIM.md	/^`fzf#run`$/;"	s
`fzf#wrap`	vim/pack/minpac/start/fzf/README-VIM.md	/^`fzf#wrap`$/;"	s
`fzf-tmux` script	vim/pack/minpac/start/fzf/README.md	/^`fzf-tmux` script$/;"	s
`git ls-tree` for fast traversal	vim/pack/minpac/start/fzf/README.md	/^#### `git ls-tree` for fast traversal$/;"	t
a	vim/pack/minpac/start/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> a <NOP>$/;"	m
a	vim/pack/minpac/start/fzf/src/terminal.go	/^	a string$/;"	m	struct:fzf.action
a%	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^vmap a% <Esc>[%v]%$/;"	m
accessor-pairs	eslintrc.json	/^    "accessor-pairs": "error",$/;"	s	object:rules
actAbort	vim/pack/minpac/start/fzf/src/terminal.go	/^	actAbort$/;"	c	package:fzf
actAccept	vim/pack/minpac/start/fzf/src/terminal.go	/^	actAccept$/;"	c	package:fzf
actAcceptNonEmpty	vim/pack/minpac/start/fzf/src/terminal.go	/^	actAcceptNonEmpty$/;"	c	package:fzf
actBackwardChar	vim/pack/minpac/start/fzf/src/terminal.go	/^	actBackwardChar$/;"	c	package:fzf
actBackwardDeleteChar	vim/pack/minpac/start/fzf/src/terminal.go	/^	actBackwardDeleteChar$/;"	c	package:fzf
actBackwardKillWord	vim/pack/minpac/start/fzf/src/terminal.go	/^	actBackwardKillWord$/;"	c	package:fzf
actBackwardWord	vim/pack/minpac/start/fzf/src/terminal.go	/^	actBackwardWord$/;"	c	package:fzf
actBeginningOfLine	vim/pack/minpac/start/fzf/src/terminal.go	/^	actBeginningOfLine$/;"	c	package:fzf
actCancel	vim/pack/minpac/start/fzf/src/terminal.go	/^	actCancel$/;"	c	package:fzf
actClearScreen	vim/pack/minpac/start/fzf/src/terminal.go	/^	actClearScreen$/;"	c	package:fzf
actDeleteChar	vim/pack/minpac/start/fzf/src/terminal.go	/^	actDeleteChar$/;"	c	package:fzf
actDeleteCharEOF	vim/pack/minpac/start/fzf/src/terminal.go	/^	actDeleteCharEOF$/;"	c	package:fzf
actDeselectAll	vim/pack/minpac/start/fzf/src/terminal.go	/^	actDeselectAll$/;"	c	package:fzf
actDown	vim/pack/minpac/start/fzf/src/terminal.go	/^	actDown$/;"	c	package:fzf
actEndOfLine	vim/pack/minpac/start/fzf/src/terminal.go	/^	actEndOfLine$/;"	c	package:fzf
actExecute	vim/pack/minpac/start/fzf/src/terminal.go	/^	actExecute$/;"	c	package:fzf
actExecuteMulti	vim/pack/minpac/start/fzf/src/terminal.go	/^	actExecuteMulti \/\/ Deprecated$/;"	c	package:fzf
actExecuteSilent	vim/pack/minpac/start/fzf/src/terminal.go	/^	actExecuteSilent$/;"	c	package:fzf
actForwardChar	vim/pack/minpac/start/fzf/src/terminal.go	/^	actForwardChar$/;"	c	package:fzf
actForwardWord	vim/pack/minpac/start/fzf/src/terminal.go	/^	actForwardWord$/;"	c	package:fzf
actHalfPageDown	vim/pack/minpac/start/fzf/src/terminal.go	/^	actHalfPageDown$/;"	c	package:fzf
actHalfPageUp	vim/pack/minpac/start/fzf/src/terminal.go	/^	actHalfPageUp$/;"	c	package:fzf
actIgnore	vim/pack/minpac/start/fzf/src/terminal.go	/^	actIgnore actionType = iota$/;"	c	package:fzf
actInvalid	vim/pack/minpac/start/fzf/src/terminal.go	/^	actInvalid$/;"	c	package:fzf
actJump	vim/pack/minpac/start/fzf/src/terminal.go	/^	actJump$/;"	c	package:fzf
actJumpAccept	vim/pack/minpac/start/fzf/src/terminal.go	/^	actJumpAccept$/;"	c	package:fzf
actKillLine	vim/pack/minpac/start/fzf/src/terminal.go	/^	actKillLine$/;"	c	package:fzf
actKillWord	vim/pack/minpac/start/fzf/src/terminal.go	/^	actKillWord$/;"	c	package:fzf
actMouse	vim/pack/minpac/start/fzf/src/terminal.go	/^	actMouse$/;"	c	package:fzf
actNextHistory	vim/pack/minpac/start/fzf/src/terminal.go	/^	actNextHistory$/;"	c	package:fzf
actPageDown	vim/pack/minpac/start/fzf/src/terminal.go	/^	actPageDown$/;"	c	package:fzf
actPageUp	vim/pack/minpac/start/fzf/src/terminal.go	/^	actPageUp$/;"	c	package:fzf
actPreviewDown	vim/pack/minpac/start/fzf/src/terminal.go	/^	actPreviewDown$/;"	c	package:fzf
actPreviewPageDown	vim/pack/minpac/start/fzf/src/terminal.go	/^	actPreviewPageDown$/;"	c	package:fzf
actPreviewPageUp	vim/pack/minpac/start/fzf/src/terminal.go	/^	actPreviewPageUp$/;"	c	package:fzf
actPreviewUp	vim/pack/minpac/start/fzf/src/terminal.go	/^	actPreviewUp$/;"	c	package:fzf
actPreviousHistory	vim/pack/minpac/start/fzf/src/terminal.go	/^	actPreviousHistory$/;"	c	package:fzf
actPrintQuery	vim/pack/minpac/start/fzf/src/terminal.go	/^	actPrintQuery$/;"	c	package:fzf
actReplaceQuery	vim/pack/minpac/start/fzf/src/terminal.go	/^	actReplaceQuery$/;"	c	package:fzf
actRune	vim/pack/minpac/start/fzf/src/terminal.go	/^	actRune$/;"	c	package:fzf
actSelectAll	vim/pack/minpac/start/fzf/src/terminal.go	/^	actSelectAll$/;"	c	package:fzf
actSigStop	vim/pack/minpac/start/fzf/src/terminal.go	/^	actSigStop$/;"	c	package:fzf
actToggle	vim/pack/minpac/start/fzf/src/terminal.go	/^	actToggle$/;"	c	package:fzf
actToggleAll	vim/pack/minpac/start/fzf/src/terminal.go	/^	actToggleAll$/;"	c	package:fzf
actToggleDown	vim/pack/minpac/start/fzf/src/terminal.go	/^	actToggleDown$/;"	c	package:fzf
actToggleIn	vim/pack/minpac/start/fzf/src/terminal.go	/^	actToggleIn$/;"	c	package:fzf
actToggleOut	vim/pack/minpac/start/fzf/src/terminal.go	/^	actToggleOut$/;"	c	package:fzf
actTogglePreview	vim/pack/minpac/start/fzf/src/terminal.go	/^	actTogglePreview$/;"	c	package:fzf
actTogglePreviewWrap	vim/pack/minpac/start/fzf/src/terminal.go	/^	actTogglePreviewWrap$/;"	c	package:fzf
actToggleSort	vim/pack/minpac/start/fzf/src/terminal.go	/^	actToggleSort$/;"	c	package:fzf
actToggleUp	vim/pack/minpac/start/fzf/src/terminal.go	/^	actToggleUp$/;"	c	package:fzf
actTop	vim/pack/minpac/start/fzf/src/terminal.go	/^	actTop$/;"	c	package:fzf
actUnixLineDiscard	vim/pack/minpac/start/fzf/src/terminal.go	/^	actUnixLineDiscard$/;"	c	package:fzf
actUnixWordRubout	vim/pack/minpac/start/fzf/src/terminal.go	/^	actUnixWordRubout$/;"	c	package:fzf
actUp	vim/pack/minpac/start/fzf/src/terminal.go	/^	actUp$/;"	c	package:fzf
actYank	vim/pack/minpac/start/fzf/src/terminal.go	/^	actYank$/;"	c	package:fzf
action	vim/pack/minpac/start/fzf/src/terminal.go	/^type action struct {$/;"	s	package:fzf
actionType	vim/pack/minpac/start/fzf/src/terminal.go	/^type actionType int$/;"	t	package:fzf
after	eslintrc.json	/^    "arrow-spacing": ["error", { "before": true, "after": true }],$/;"	b	object:rules.arrow-spacing.1
after	eslintrc.json	/^    "comma-spacing": ["error", { "before": false, "after": true }],$/;"	b	object:rules.comma-spacing.1
after	eslintrc.json	/^    "generator-star-spacing": ["error", { "before": true, "after": true }],$/;"	b	object:rules.generator-star-spacing.1
after	eslintrc.json	/^    "keyword-spacing": ["error", { "before": true, "after": true }],$/;"	b	object:rules.keyword-spacing.1
after	eslintrc.json	/^    "semi-spacing": ["error", { "before": false, "after": true }],$/;"	b	object:rules.semi-spacing.1
afterColon	eslintrc.json	/^    "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],$/;"	b	object:rules.key-spacing.1
ale#CallWithCooldown	vim/pack/minpac/start/ale/autoload/ale.vim	/^function! ale#CallWithCooldown(timestamp_key, func, arglist) abort$/;"	f
ale#Escape	vim/pack/minpac/start/ale/autoload/ale.vim	/^function! ale#Escape(str) abort$/;"	f
ale#FileTooLarge	vim/pack/minpac/start/ale/autoload/ale.vim	/^function! ale#FileTooLarge() abort$/;"	f
ale#GetLocItemMessage	vim/pack/minpac/start/ale/autoload/ale.vim	/^function! ale#GetLocItemMessage(item, format_string) abort$/;"	f
ale#Has	vim/pack/minpac/start/ale/autoload/ale.vim	/^function! ale#Has(feature) abort$/;"	f
ale#Lint	vim/pack/minpac/start/ale/autoload/ale.vim	/^function! ale#Lint(...) abort$/;"	f
ale#Queue	vim/pack/minpac/start/ale/autoload/ale.vim	/^function! ale#Queue(delay, ...) abort$/;"	f
ale#ResetErrorDelays	vim/pack/minpac/start/ale/autoload/ale.vim	/^function! ale#ResetErrorDelays() abort$/;"	f
ale#ResetLintFileMarkers	vim/pack/minpac/start/ale/autoload/ale.vim	/^function! ale#ResetLintFileMarkers() abort$/;"	f
ale#Set	vim/pack/minpac/start/ale/autoload/ale.vim	/^function! ale#Set(variable_name, default) abort$/;"	f
ale#ShouldDoNothing	vim/pack/minpac/start/ale/autoload/ale.vim	/^function! ale#ShouldDoNothing(buffer) abort$/;"	f
ale#Var	vim/pack/minpac/start/ale/autoload/ale.vim	/^function! ale#Var(buffer, variable_name) abort$/;"	f
ale#autocmd#InitAuGroups	vim/pack/minpac/start/ale/autoload/ale/autocmd.vim	/^function! ale#autocmd#InitAuGroups() abort$/;"	f
ale#balloon#Disable	vim/pack/minpac/start/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Disable() abort$/;"	f
ale#balloon#Enable	vim/pack/minpac/start/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Enable() abort$/;"	f
ale#balloon#Expr	vim/pack/minpac/start/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Expr() abort$/;"	f
ale#balloon#MessageForPos	vim/pack/minpac/start/ale/autoload/ale/balloon.vim	/^function! ale#balloon#MessageForPos(bufnr, lnum, col) abort$/;"	f
ale#c#FindCompileCommands	vim/pack/minpac/start/ale/autoload/ale/c.vim	/^function! ale#c#FindCompileCommands(buffer) abort$/;"	f
ale#c#FindLocalHeaderPaths	vim/pack/minpac/start/ale/autoload/ale/c.vim	/^function! ale#c#FindLocalHeaderPaths(buffer) abort$/;"	f
ale#c#FindProjectRoot	vim/pack/minpac/start/ale/autoload/ale/c.vim	/^function! ale#c#FindProjectRoot(buffer) abort$/;"	f
ale#c#GetCFlags	vim/pack/minpac/start/ale/autoload/ale/c.vim	/^function! ale#c#GetCFlags(buffer, output) abort$/;"	f
ale#c#GetMakeCommand	vim/pack/minpac/start/ale/autoload/ale/c.vim	/^function! ale#c#GetMakeCommand(buffer) abort$/;"	f
ale#c#IncludeOptions	vim/pack/minpac/start/ale/autoload/ale/c.vim	/^function! ale#c#IncludeOptions(include_paths) abort$/;"	f
ale#c#ParseCFlags	vim/pack/minpac/start/ale/autoload/ale/c.vim	/^function! ale#c#ParseCFlags(buffer, stdout_make) abort$/;"	f
ale#c#ParseCFlagsToList	vim/pack/minpac/start/ale/autoload/ale/c.vim	/^function! ale#c#ParseCFlagsToList(path_prefix, cflags) abort$/;"	f
ale#command#FormatCommand	vim/pack/minpac/start/ale/autoload/ale/command.vim	/^function! ale#command#FormatCommand(buffer, command, pipe_file_if_needed) abort$/;"	f
ale#completion#Disable	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#Disable() abort$/;"	f
ale#completion#Done	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#Done() abort$/;"	f
ale#completion#Enable	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#Enable() abort$/;"	f
ale#completion#Filter	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#Filter(buffer, suggestions, prefix) abort$/;"	f
ale#completion#GetCompletions	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletions() abort$/;"	f
ale#completion#GetPrefix	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#GetPrefix(filetype, line, column) abort$/;"	f
ale#completion#GetTriggerCharacter	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#GetTriggerCharacter(filetype, prefix) abort$/;"	f
ale#completion#HandleLSPResponse	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#completion#HandleTSServerResponse	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#completion#NullFilter	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#NullFilter(buffer, item) abort$/;"	f
ale#completion#OmniFunc	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#OmniFunc(findstart, base) abort$/;"	f
ale#completion#ParseLSPCompletions	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#ParseLSPCompletions(response) abort$/;"	f
ale#completion#ParseTSServerCompletionEntryDetails	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#ParseTSServerCompletionEntryDetails(response) abort$/;"	f
ale#completion#ParseTSServerCompletions	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#ParseTSServerCompletions(response) abort$/;"	f
ale#completion#Queue	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#Queue() abort$/;"	f
ale#completion#Show	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#Show(response, completion_parser) abort$/;"	f
ale#completion#StopTimer	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! ale#completion#StopTimer() abort$/;"	f
ale#completion#python#CompletionItemFilter	vim/pack/minpac/start/ale/autoload/ale/completion/python.vim	/^function! ale#completion#python#CompletionItemFilter(buffer, item) abort$/;"	f
ale#cursor#EchoCursorWarning	vim/pack/minpac/start/ale/autoload/ale/cursor.vim	/^function! ale#cursor#EchoCursorWarning(...) abort$/;"	f
ale#cursor#EchoCursorWarningWithDelay	vim/pack/minpac/start/ale/autoload/ale/cursor.vim	/^function! ale#cursor#EchoCursorWarningWithDelay() abort$/;"	f
ale#cursor#ShowCursorDetail	vim/pack/minpac/start/ale/autoload/ale/cursor.vim	/^function! ale#cursor#ShowCursorDetail() abort$/;"	f
ale#cursor#TruncatedEcho	vim/pack/minpac/start/ale/autoload/ale/cursor.vim	/^function! ale#cursor#TruncatedEcho(original_message) abort$/;"	f
ale#debugging#Info	vim/pack/minpac/start/ale/autoload/ale/debugging.vim	/^function! ale#debugging#Info() abort$/;"	f
ale#debugging#InfoToClipboard	vim/pack/minpac/start/ale/autoload/ale/debugging.vim	/^function! ale#debugging#InfoToClipboard() abort$/;"	f
ale#debugging#InfoToFile	vim/pack/minpac/start/ale/autoload/ale/debugging.vim	/^function! ale#debugging#InfoToFile(filename) abort$/;"	f
ale#definition#ClearLSPData	vim/pack/minpac/start/ale/autoload/ale/definition.vim	/^function! ale#definition#ClearLSPData() abort$/;"	f
ale#definition#GetMap	vim/pack/minpac/start/ale/autoload/ale/definition.vim	/^function! ale#definition#GetMap() abort$/;"	f
ale#definition#GoTo	vim/pack/minpac/start/ale/autoload/ale/definition.vim	/^function! ale#definition#GoTo(options) abort$/;"	f
ale#definition#HandleLSPResponse	vim/pack/minpac/start/ale/autoload/ale/definition.vim	/^function! ale#definition#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#definition#HandleTSServerResponse	vim/pack/minpac/start/ale/autoload/ale/definition.vim	/^function! ale#definition#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#definition#SetMap	vim/pack/minpac/start/ale/autoload/ale/definition.vim	/^function! ale#definition#SetMap(map) abort$/;"	f
ale#engine#Cleanup	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#Cleanup(buffer) abort$/;"	f
ale#engine#ClearLSPData	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#ClearLSPData() abort$/;"	f
ale#engine#CreateDirectory	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#CreateDirectory(buffer) abort$/;"	f
ale#engine#EscapeCommandPart	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#EscapeCommandPart(command_part) abort$/;"	f
ale#engine#FixLocList	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#FixLocList(buffer, linter_name, loclist) abort$/;"	f
ale#engine#GetLoclist	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#GetLoclist(buffer) abort$/;"	f
ale#engine#HandleLSPResponse	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#engine#HandleLoclist	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#HandleLoclist(linter_name, buffer, loclist) abort$/;"	f
ale#engine#InitBufferInfo	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#InitBufferInfo(buffer) abort$/;"	f
ale#engine#IsCheckingBuffer	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#IsCheckingBuffer(buffer) abort$/;"	f
ale#engine#IsExecutable	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#IsExecutable(buffer, executable) abort$/;"	f
ale#engine#ManageDirectory	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#ManageDirectory(buffer, directory) abort$/;"	f
ale#engine#ManageFile	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#ManageFile(buffer, filename) abort$/;"	f
ale#engine#ProcessChain	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#ProcessChain(buffer, linter, chain_index, input) abort$/;"	f
ale#engine#RemoveManagedFiles	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#RemoveManagedFiles(buffer) abort$/;"	f
ale#engine#ResetExecutableCache	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#ResetExecutableCache() abort$/;"	f
ale#engine#RunLinters	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#RunLinters(buffer, linters, should_lint_file) abort$/;"	f
ale#engine#SetResults	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#SetResults(buffer, loclist) abort$/;"	f
ale#engine#WaitForJobs	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! ale#engine#WaitForJobs(deadline) abort$/;"	f
ale#events#EnterEvent	vim/pack/minpac/start/ale/autoload/ale/events.vim	/^function! ale#events#EnterEvent(buffer) abort$/;"	f
ale#events#FileChangedEvent	vim/pack/minpac/start/ale/autoload/ale/events.vim	/^function! ale#events#FileChangedEvent(buffer) abort$/;"	f
ale#events#FileTypeEvent	vim/pack/minpac/start/ale/autoload/ale/events.vim	/^function! ale#events#FileTypeEvent(buffer, new_filetype) abort$/;"	f
ale#events#QuitEvent	vim/pack/minpac/start/ale/autoload/ale/events.vim	/^function! ale#events#QuitEvent(buffer) abort$/;"	f
ale#events#QuitRecently	vim/pack/minpac/start/ale/autoload/ale/events.vim	/^function! ale#events#QuitRecently(buffer) abort$/;"	f
ale#events#SaveEvent	vim/pack/minpac/start/ale/autoload/ale/events.vim	/^function! ale#events#SaveEvent(buffer) abort$/;"	f
ale#filetypes#GuessExtension	vim/pack/minpac/start/ale/autoload/ale/filetypes.vim	/^function! ale#filetypes#GuessExtension(filetype) abort$/;"	f
ale#filetypes#LoadExtensionMap	vim/pack/minpac/start/ale/autoload/ale/filetypes.vim	/^function! ale#filetypes#LoadExtensionMap() abort$/;"	f
ale#fix#ApplyFixes	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^function! ale#fix#ApplyFixes(buffer, output) abort$/;"	f
ale#fix#ApplyQueuedFixes	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^function! ale#fix#ApplyQueuedFixes() abort$/;"	f
ale#fix#Fix	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^function! ale#fix#Fix(buffer, fixing_flag, ...) abort$/;"	f
ale#fix#InitBufferData	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^function! ale#fix#InitBufferData(buffer, fixing_flag) abort$/;"	f
ale#fix#ManageDirectory	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^function! ale#fix#ManageDirectory(buffer, directory) abort$/;"	f
ale#fix#RemoveManagedFiles	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^function! ale#fix#RemoveManagedFiles(buffer) abort$/;"	f
ale#fix#registry#Add	vim/pack/minpac/start/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Add(name, func, filetypes, desc, ...) abort$/;"	f
ale#fix#registry#Clear	vim/pack/minpac/start/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Clear() abort$/;"	f
ale#fix#registry#CompleteFixers	vim/pack/minpac/start/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#CompleteFixers(ArgLead, CmdLine, CursorPos) abort$/;"	f
ale#fix#registry#GetApplicableFixers	vim/pack/minpac/start/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#GetApplicableFixers(filetype) abort$/;"	f
ale#fix#registry#GetFunc	vim/pack/minpac/start/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#GetFunc(name) abort$/;"	f
ale#fix#registry#ResetToDefaults	vim/pack/minpac/start/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#ResetToDefaults() abort$/;"	f
ale#fix#registry#Suggest	vim/pack/minpac/start/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Suggest(filetype) abort$/;"	f
ale#fixers#autopep8#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/autopep8.vim	/^function! ale#fixers#autopep8#Fix(buffer) abort$/;"	f
ale#fixers#black#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/black.vim	/^function! ale#fixers#black#Fix(buffer) abort$/;"	f
ale#fixers#brittany#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/brittany.vim	/^function! ale#fixers#brittany#Fix(buffer) abort$/;"	f
ale#fixers#clangformat#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/clangformat.vim	/^function! ale#fixers#clangformat#Fix(buffer) abort$/;"	f
ale#fixers#clangformat#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/fixers/clangformat.vim	/^function! ale#fixers#clangformat#GetExecutable(buffer) abort$/;"	f
ale#fixers#elm_format#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/elm_format.vim	/^function! ale#fixers#elm_format#Fix(buffer) abort$/;"	f
ale#fixers#elm_format#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/fixers/elm_format.vim	/^function! ale#fixers#elm_format#GetExecutable(buffer) abort$/;"	f
ale#fixers#eslint#ApplyFixForVersion	vim/pack/minpac/start/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#ApplyFixForVersion(buffer, version_output) abort$/;"	f
ale#fixers#eslint#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#Fix(buffer) abort$/;"	f
ale#fixers#eslint#ProcessEslintDOutput	vim/pack/minpac/start/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#ProcessEslintDOutput(buffer, output) abort$/;"	f
ale#fixers#eslint#ProcessFixDryRunOutput	vim/pack/minpac/start/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#ProcessFixDryRunOutput(buffer, output) abort$/;"	f
ale#fixers#fixjson#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/fixjson.vim	/^function! ale#fixers#fixjson#Fix(buffer) abort$/;"	f
ale#fixers#fixjson#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/fixers/fixjson.vim	/^function! ale#fixers#fixjson#GetExecutable(buffer) abort$/;"	f
ale#fixers#generic#RemoveTrailingBlankLines	vim/pack/minpac/start/ale/autoload/ale/fixers/generic.vim	/^function! ale#fixers#generic#RemoveTrailingBlankLines(buffer, lines) abort$/;"	f
ale#fixers#generic#TrimWhitespace	vim/pack/minpac/start/ale/autoload/ale/fixers/generic.vim	/^function! ale#fixers#generic#TrimWhitespace(buffer, lines) abort$/;"	f
ale#fixers#generic_python#AddLinesBeforeControlStatements	vim/pack/minpac/start/ale/autoload/ale/fixers/generic_python.vim	/^function! ale#fixers#generic_python#AddLinesBeforeControlStatements(buffer, lines) abort$/;"	f
ale#fixers#generic_python#BreakUpLongLines	vim/pack/minpac/start/ale/autoload/ale/fixers/generic_python.vim	/^function! ale#fixers#generic_python#BreakUpLongLines(buffer, lines) abort$/;"	f
ale#fixers#gofmt#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/gofmt.vim	/^function! ale#fixers#gofmt#Fix(buffer) abort$/;"	f
ale#fixers#goimports#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/goimports.vim	/^function! ale#fixers#goimports#Fix(buffer) abort$/;"	f
ale#fixers#google_java_format#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/google_java_format.vim	/^function! ale#fixers#google_java_format#Fix(buffer) abort$/;"	f
ale#fixers#hackfmt#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/hackfmt.vim	/^function! ale#fixers#hackfmt#Fix(buffer) abort$/;"	f
ale#fixers#help#AlignTags	vim/pack/minpac/start/ale/autoload/ale/fixers/help.vim	/^function! ale#fixers#help#AlignTags(buffer, lines) abort$/;"	f
ale#fixers#hfmt#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/hfmt.vim	/^function! ale#fixers#hfmt#Fix(buffer) abort$/;"	f
ale#fixers#importjs#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/importjs.vim	/^function! ale#fixers#importjs#Fix(buffer) abort$/;"	f
ale#fixers#importjs#ProcessOutput	vim/pack/minpac/start/ale/autoload/ale/fixers/importjs.vim	/^function! ale#fixers#importjs#ProcessOutput(buffer, output) abort$/;"	f
ale#fixers#isort#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/isort.vim	/^function! ale#fixers#isort#Fix(buffer) abort$/;"	f
ale#fixers#jq#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/jq.vim	/^function! ale#fixers#jq#Fix(buffer) abort$/;"	f
ale#fixers#jq#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/fixers/jq.vim	/^function! ale#fixers#jq#GetExecutable(buffer) abort$/;"	f
ale#fixers#mix_format#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/mix_format.vim	/^function! ale#fixers#mix_format#Fix(buffer) abort$/;"	f
ale#fixers#mix_format#GetCommand	vim/pack/minpac/start/ale/autoload/ale/fixers/mix_format.vim	/^function! ale#fixers#mix_format#GetCommand(buffer) abort$/;"	f
ale#fixers#mix_format#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/fixers/mix_format.vim	/^function! ale#fixers#mix_format#GetExecutable(buffer) abort$/;"	f
ale#fixers#perltidy#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/perltidy.vim	/^function! ale#fixers#perltidy#Fix(buffer) abort$/;"	f
ale#fixers#php_cs_fixer#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/php_cs_fixer.vim	/^function! ale#fixers#php_cs_fixer#Fix(buffer) abort$/;"	f
ale#fixers#php_cs_fixer#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/fixers/php_cs_fixer.vim	/^function! ale#fixers#php_cs_fixer#GetExecutable(buffer) abort$/;"	f
ale#fixers#phpcbf#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/phpcbf.vim	/^function! ale#fixers#phpcbf#Fix(buffer) abort$/;"	f
ale#fixers#phpcbf#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/fixers/phpcbf.vim	/^function! ale#fixers#phpcbf#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier#ApplyFixForVersion	vim/pack/minpac/start/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#ApplyFixForVersion(buffer, version_output) abort$/;"	f
ale#fixers#prettier#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#Fix(buffer) abort$/;"	f
ale#fixers#prettier#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier_eslint#ApplyFixForVersion	vim/pack/minpac/start/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#ApplyFixForVersion(buffer, version_output) abort$/;"	f
ale#fixers#prettier_eslint#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#Fix(buffer) abort$/;"	f
ale#fixers#prettier_eslint#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier_eslint#SetOptionDefaults	vim/pack/minpac/start/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#SetOptionDefaults() abort$/;"	f
ale#fixers#prettier_standard#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/prettier_standard.vim	/^function! ale#fixers#prettier_standard#Fix(buffer) abort$/;"	f
ale#fixers#prettier_standard#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/fixers/prettier_standard.vim	/^function! ale#fixers#prettier_standard#GetExecutable(buffer) abort$/;"	f
ale#fixers#puppetlint#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/puppetlint.vim	/^function! ale#fixers#puppetlint#Fix(buffer) abort$/;"	f
ale#fixers#refmt#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/refmt.vim	/^function! ale#fixers#refmt#Fix(buffer) abort$/;"	f
ale#fixers#rubocop#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/rubocop.vim	/^function! ale#fixers#rubocop#Fix(buffer) abort$/;"	f
ale#fixers#rubocop#GetCommand	vim/pack/minpac/start/ale/autoload/ale/fixers/rubocop.vim	/^function! ale#fixers#rubocop#GetCommand(buffer) abort$/;"	f
ale#fixers#rufo#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/rufo.vim	/^function! ale#fixers#rufo#Fix(buffer) abort$/;"	f
ale#fixers#rufo#GetCommand	vim/pack/minpac/start/ale/autoload/ale/fixers/rufo.vim	/^function! ale#fixers#rufo#GetCommand(buffer) abort$/;"	f
ale#fixers#rustfmt#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/rustfmt.vim	/^function! ale#fixers#rustfmt#Fix(buffer) abort$/;"	f
ale#fixers#shfmt#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/shfmt.vim	/^function! ale#fixers#shfmt#Fix(buffer) abort$/;"	f
ale#fixers#standard#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/standard.vim	/^function! ale#fixers#standard#Fix(buffer) abort$/;"	f
ale#fixers#standard#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/fixers/standard.vim	/^function! ale#fixers#standard#GetExecutable(buffer) abort$/;"	f
ale#fixers#stylelint#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/stylelint.vim	/^function! ale#fixers#stylelint#Fix(buffer) abort$/;"	f
ale#fixers#stylelint#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/fixers/stylelint.vim	/^function! ale#fixers#stylelint#GetExecutable(buffer) abort$/;"	f
ale#fixers#swiftformat#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/swiftformat.vim	/^function! ale#fixers#swiftformat#Fix(buffer) abort$/;"	f
ale#fixers#swiftformat#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/fixers/swiftformat.vim	/^function! ale#fixers#swiftformat#GetExecutable(buffer) abort$/;"	f
ale#fixers#tslint#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/tslint.vim	/^function! ale#fixers#tslint#Fix(buffer) abort$/;"	f
ale#fixers#xo#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/xo.vim	/^function! ale#fixers#xo#Fix(buffer) abort$/;"	f
ale#fixers#xo#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/fixers/xo.vim	/^function! ale#fixers#xo#GetExecutable(buffer) abort$/;"	f
ale#fixers#yapf#Fix	vim/pack/minpac/start/ale/autoload/ale/fixers/yapf.vim	/^function! ale#fixers#yapf#Fix(buffer) abort$/;"	f
ale#gradle#BuildClasspathCommand	vim/pack/minpac/start/ale/autoload/ale/gradle.vim	/^function! ale#gradle#BuildClasspathCommand(buffer) abort$/;"	f
ale#gradle#FindExecutable	vim/pack/minpac/start/ale/autoload/ale/gradle.vim	/^function! ale#gradle#FindExecutable(buffer) abort$/;"	f
ale#gradle#FindProjectRoot	vim/pack/minpac/start/ale/autoload/ale/gradle.vim	/^function! ale#gradle#FindProjectRoot(buffer) abort$/;"	f
ale#gradle#GetInitPath	vim/pack/minpac/start/ale/autoload/ale/gradle.vim	/^function! ale#gradle#GetInitPath() abort$/;"	f
ale#handlers#alex#Handle	vim/pack/minpac/start/ale/autoload/ale/handlers/alex.vim	/^function! ale#handlers#alex#Handle(buffer, lines) abort$/;"	f
ale#handlers#cppcheck#HandleCppCheckFormat	vim/pack/minpac/start/ale/autoload/ale/handlers/cppcheck.vim	/^function! ale#handlers#cppcheck#HandleCppCheckFormat(buffer, lines) abort$/;"	f
ale#handlers#cpplint#HandleCppLintFormat	vim/pack/minpac/start/ale/autoload/ale/handlers/cpplint.vim	/^function! ale#handlers#cpplint#HandleCppLintFormat(buffer, lines) abort$/;"	f
ale#handlers#css#HandleCSSLintFormat	vim/pack/minpac/start/ale/autoload/ale/handlers/css.vim	/^function! ale#handlers#css#HandleCSSLintFormat(buffer, lines) abort$/;"	f
ale#handlers#css#HandleStyleLintFormat	vim/pack/minpac/start/ale/autoload/ale/handlers/css.vim	/^function! ale#handlers#css#HandleStyleLintFormat(buffer, lines) abort$/;"	f
ale#handlers#eslint#FindConfig	vim/pack/minpac/start/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#FindConfig(buffer) abort$/;"	f
ale#handlers#eslint#GetCommand	vim/pack/minpac/start/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#GetCommand(buffer) abort$/;"	f
ale#handlers#eslint#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#GetExecutable(buffer) abort$/;"	f
ale#handlers#eslint#Handle	vim/pack/minpac/start/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#Handle(buffer, lines) abort$/;"	f
ale#handlers#flawfinder#HandleFlawfinderFormat	vim/pack/minpac/start/ale/autoload/ale/handlers/flawfinder.vim	/^function! ale#handlers#flawfinder#HandleFlawfinderFormat(buffer, lines) abort$/;"	f
ale#handlers#gawk#HandleGawkFormat	vim/pack/minpac/start/ale/autoload/ale/handlers/gawk.vim	/^function! ale#handlers#gawk#HandleGawkFormat(buffer, lines) abort$/;"	f
ale#handlers#gcc#HandleGCCFormat	vim/pack/minpac/start/ale/autoload/ale/handlers/gcc.vim	/^function! ale#handlers#gcc#HandleGCCFormat(buffer, lines) abort$/;"	f
ale#handlers#go#Handler	vim/pack/minpac/start/ale/autoload/ale/handlers/go.vim	/^function! ale#handlers#go#Handler(buffer, lines) abort$/;"	f
ale#handlers#haskell#HandleGHCFormat	vim/pack/minpac/start/ale/autoload/ale/handlers/haskell.vim	/^function! ale#handlers#haskell#HandleGHCFormat(buffer, lines) abort$/;"	f
ale#handlers#markdownlint#Handle	vim/pack/minpac/start/ale/autoload/ale/handlers/markdownlint.vim	/^function! ale#handlers#markdownlint#Handle(buffer, lines) abort$/;"	f
ale#handlers#ols#GetCommand	vim/pack/minpac/start/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetCommand(buffer) abort$/;"	f
ale#handlers#ols#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetExecutable(buffer) abort$/;"	f
ale#handlers#ols#GetLanguage	vim/pack/minpac/start/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetLanguage(buffer) abort$/;"	f
ale#handlers#ols#GetProjectRoot	vim/pack/minpac/start/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#pony#HandlePonycFormat	vim/pack/minpac/start/ale/autoload/ale/handlers/pony.vim	/^function! ale#handlers#pony#HandlePonycFormat(buffer, lines) abort$/;"	f
ale#handlers#rails_best_practices#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/handlers/rails_best_practices.vim	/^function! ale#handlers#rails_best_practices#GetExecutable(buffer) abort$/;"	f
ale#handlers#redpen#HandleRedpenOutput	vim/pack/minpac/start/ale/autoload/ale/handlers/redpen.vim	/^function! ale#handlers#redpen#HandleRedpenOutput(buffer, lines) abort$/;"	f
ale#handlers#rubocop#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/handlers/rubocop.vim	/^function! ale#handlers#rubocop#GetExecutable(buffer) abort$/;"	f
ale#handlers#ruby#HandleSyntaxErrors	vim/pack/minpac/start/ale/autoload/ale/handlers/ruby.vim	/^function! ale#handlers#ruby#HandleSyntaxErrors(buffer, lines) abort$/;"	f
ale#handlers#rust#HandleRustErrors	vim/pack/minpac/start/ale/autoload/ale/handlers/rust.vim	/^function! ale#handlers#rust#HandleRustErrors(buffer, lines) abort$/;"	f
ale#handlers#scala#HandleScalacLintFormat	vim/pack/minpac/start/ale/autoload/ale/handlers/scala.vim	/^function! ale#handlers#scala#HandleScalacLintFormat(buffer, lines) abort$/;"	f
ale#handlers#sh#GetShellType	vim/pack/minpac/start/ale/autoload/ale/handlers/sh.vim	/^function! ale#handlers#sh#GetShellType(buffer) abort$/;"	f
ale#handlers#sml#GetCmFile	vim/pack/minpac/start/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#GetCmFile(buffer) abort$/;"	f
ale#handlers#sml#GetExecutableSmlnjCm	vim/pack/minpac/start/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#GetExecutableSmlnjCm(buffer) abort$/;"	f
ale#handlers#sml#GetExecutableSmlnjFile	vim/pack/minpac/start/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#GetExecutableSmlnjFile(buffer) abort$/;"	f
ale#handlers#sml#Handle	vim/pack/minpac/start/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#Handle(buffer, lines) abort$/;"	f
ale#handlers#textlint#GetCommand	vim/pack/minpac/start/ale/autoload/ale/handlers/textlint.vim	/^function! ale#handlers#textlint#GetCommand(buffer) abort$/;"	f
ale#handlers#textlint#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/handlers/textlint.vim	/^function! ale#handlers#textlint#GetExecutable(buffer) abort$/;"	f
ale#handlers#textlint#HandleTextlintOutput	vim/pack/minpac/start/ale/autoload/ale/handlers/textlint.vim	/^function! ale#handlers#textlint#HandleTextlintOutput(buffer, lines) abort$/;"	f
ale#handlers#unix#HandleAsError	vim/pack/minpac/start/ale/autoload/ale/handlers/unix.vim	/^function! ale#handlers#unix#HandleAsError(buffer, lines) abort$/;"	f
ale#handlers#unix#HandleAsWarning	vim/pack/minpac/start/ale/autoload/ale/handlers/unix.vim	/^function! ale#handlers#unix#HandleAsWarning(buffer, lines) abort$/;"	f
ale#handlers#vale#GetType	vim/pack/minpac/start/ale/autoload/ale/handlers/vale.vim	/^function! ale#handlers#vale#GetType(severity) abort$/;"	f
ale#handlers#vale#Handle	vim/pack/minpac/start/ale/autoload/ale/handlers/vale.vim	/^function! ale#handlers#vale#Handle(buffer, lines) abort$/;"	f
ale#handlers#writegood#GetCommand	vim/pack/minpac/start/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#GetCommand(buffer) abort$/;"	f
ale#handlers#writegood#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#GetExecutable(buffer) abort$/;"	f
ale#handlers#writegood#Handle	vim/pack/minpac/start/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#Handle(buffer, lines) abort$/;"	f
ale#handlers#writegood#ResetOptions	vim/pack/minpac/start/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#ResetOptions() abort$/;"	f
ale#highlight#BufferHidden	vim/pack/minpac/start/ale/autoload/ale/highlight.vim	/^function! ale#highlight#BufferHidden(buffer) abort$/;"	f
ale#highlight#CreatePositions	vim/pack/minpac/start/ale/autoload/ale/highlight.vim	/^function! ale#highlight#CreatePositions(line, col, end_line, end_col) abort$/;"	f
ale#highlight#RemoveHighlights	vim/pack/minpac/start/ale/autoload/ale/highlight.vim	/^function! ale#highlight#RemoveHighlights() abort$/;"	f
ale#highlight#SetHighlights	vim/pack/minpac/start/ale/autoload/ale/highlight.vim	/^function! ale#highlight#SetHighlights(buffer, loclist) abort$/;"	f
ale#highlight#UpdateHighlights	vim/pack/minpac/start/ale/autoload/ale/highlight.vim	/^function! ale#highlight#UpdateHighlights() abort$/;"	f
ale#history#Add	vim/pack/minpac/start/ale/autoload/ale/history.vim	/^function! ale#history#Add(buffer, status, job_id, command) abort$/;"	f
ale#history#Get	vim/pack/minpac/start/ale/autoload/ale/history.vim	/^function! ale#history#Get(buffer) abort$/;"	f
ale#history#RememberOutput	vim/pack/minpac/start/ale/autoload/ale/history.vim	/^function! ale#history#RememberOutput(buffer, job_id, output) abort$/;"	f
ale#history#SetExitCode	vim/pack/minpac/start/ale/autoload/ale/history.vim	/^function! ale#history#SetExitCode(buffer, job_id, exit_code) abort$/;"	f
ale#hover#ClearLSPData	vim/pack/minpac/start/ale/autoload/ale/hover.vim	/^function! ale#hover#ClearLSPData() abort$/;"	f
ale#hover#GetMap	vim/pack/minpac/start/ale/autoload/ale/hover.vim	/^function! ale#hover#GetMap() abort$/;"	f
ale#hover#HandleLSPResponse	vim/pack/minpac/start/ale/autoload/ale/hover.vim	/^function! ale#hover#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#hover#HandleTSServerResponse	vim/pack/minpac/start/ale/autoload/ale/hover.vim	/^function! ale#hover#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#hover#SetMap	vim/pack/minpac/start/ale/autoload/ale/hover.vim	/^function! ale#hover#SetMap(map) abort$/;"	f
ale#hover#Show	vim/pack/minpac/start/ale/autoload/ale/hover.vim	/^function! ale#hover#Show() abort$/;"	f
ale#job#IsRunning	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! ale#job#IsRunning(job_id) abort$/;"	f
ale#job#JoinNeovimOutput	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! ale#job#JoinNeovimOutput(job, last_line, data, mode, callback) abort$/;"	f
ale#job#ParseVim8ProcessID	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! ale#job#ParseVim8ProcessID(job_string) abort$/;"	f
ale#job#PrepareCommand	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! ale#job#PrepareCommand(buffer, command) abort$/;"	f
ale#job#SendRaw	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! ale#job#SendRaw(job_id, string) abort$/;"	f
ale#job#Start	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! ale#job#Start(command, options) abort$/;"	f
ale#job#Stop	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! ale#job#Stop(job_id) abort$/;"	f
ale#job#ValidateArguments	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! ale#job#ValidateArguments(command, options) abort$/;"	f
ale#linter#Define	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! ale#linter#Define(filetype, linter) abort$/;"	f
ale#linter#Get	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! ale#linter#Get(original_filetypes) abort$/;"	f
ale#linter#GetAddress	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! ale#linter#GetAddress(buffer, linter) abort$/;"	f
ale#linter#GetAll	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! ale#linter#GetAll(filetypes) abort$/;"	f
ale#linter#GetCommand	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! ale#linter#GetCommand(buffer, linter) abort$/;"	f
ale#linter#GetExecutable	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! ale#linter#GetExecutable(buffer, linter) abort$/;"	f
ale#linter#PreProcess	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! ale#linter#PreProcess(linter) abort$/;"	f
ale#linter#PreventLoading	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! ale#linter#PreventLoading(filetype) abort$/;"	f
ale#linter#Reset	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! ale#linter#Reset() abort$/;"	f
ale#linter#ResolveFiletype	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! ale#linter#ResolveFiletype(original_filetype) abort$/;"	f
ale#linter#StartLSP	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! ale#linter#StartLSP(buffer, linter, callback) abort$/;"	f
ale#list#GetCombinedList	vim/pack/minpac/start/ale/autoload/ale/list.vim	/^function! ale#list#GetCombinedList() abort$/;"	f
ale#list#IsQuickfixOpen	vim/pack/minpac/start/ale/autoload/ale/list.vim	/^function! ale#list#IsQuickfixOpen() abort$/;"	f
ale#list#SetLists	vim/pack/minpac/start/ale/autoload/ale/list.vim	/^function! ale#list#SetLists(buffer, loclist) abort$/;"	f
ale#loclist_jumping#FindNearest	vim/pack/minpac/start/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#FindNearest(direction, wrap) abort$/;"	f
ale#loclist_jumping#Jump	vim/pack/minpac/start/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#Jump(direction, wrap) abort$/;"	f
ale#loclist_jumping#JumpToIndex	vim/pack/minpac/start/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#JumpToIndex(index) abort$/;"	f
ale#lsp#ConnectToAddress	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! ale#lsp#ConnectToAddress(address, project_root, callback) abort$/;"	f
ale#lsp#CreateMessageData	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! ale#lsp#CreateMessageData(message) abort$/;"	f
ale#lsp#GetNextMessageID	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! ale#lsp#GetNextMessageID() abort$/;"	f
ale#lsp#GetProject	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! ale#lsp#GetProject(conn, project_root) abort$/;"	f
ale#lsp#HandleMessage	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! ale#lsp#HandleMessage(conn, message) abort$/;"	f
ale#lsp#HandleOtherInitializeResponses	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! ale#lsp#HandleOtherInitializeResponses(conn, response) abort$/;"	f
ale#lsp#OpenDocumentIfNeeded	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! ale#lsp#OpenDocumentIfNeeded(conn_id, buffer, project_root, language_id) abort$/;"	f
ale#lsp#ReadMessageData	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! ale#lsp#ReadMessageData(data) abort$/;"	f
ale#lsp#RegisterProject	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! ale#lsp#RegisterProject(conn, project_root) abort$/;"	f
ale#lsp#Send	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! ale#lsp#Send(conn_id, message, ...) abort$/;"	f
ale#lsp#StartProgram	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! ale#lsp#StartProgram(executable, command, project_root, callback) abort$/;"	f
ale#lsp#StopAll	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! ale#lsp#StopAll() abort$/;"	f
ale#lsp#message#Completion	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Completion(buffer, line, column, trigger_character) abort$/;"	f
ale#lsp#message#Definition	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Definition(buffer, line, column) abort$/;"	f
ale#lsp#message#DidChange	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidChange(buffer) abort$/;"	f
ale#lsp#message#DidClose	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidClose(buffer) abort$/;"	f
ale#lsp#message#DidOpen	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidOpen(buffer, language_id) abort$/;"	f
ale#lsp#message#DidSave	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidSave(buffer) abort$/;"	f
ale#lsp#message#Exit	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Exit() abort$/;"	f
ale#lsp#message#GetNextVersionID	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#GetNextVersionID() abort$/;"	f
ale#lsp#message#Hover	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Hover(buffer, line, column) abort$/;"	f
ale#lsp#message#Initialize	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Initialize(root_path) abort$/;"	f
ale#lsp#message#Initialized	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Initialized() abort$/;"	f
ale#lsp#message#References	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#References(buffer, line, column) abort$/;"	f
ale#lsp#message#Shutdown	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Shutdown() abort$/;"	f
ale#lsp#reset#StopAllLSPs	vim/pack/minpac/start/ale/autoload/ale/lsp/reset.vim	/^function! ale#lsp#reset#StopAllLSPs() abort$/;"	f
ale#lsp#response#ReadDiagnostics	vim/pack/minpac/start/ale/autoload/ale/lsp/response.vim	/^function! ale#lsp#response#ReadDiagnostics(response) abort$/;"	f
ale#lsp#response#ReadTSServerDiagnostics	vim/pack/minpac/start/ale/autoload/ale/lsp/response.vim	/^function! ale#lsp#response#ReadTSServerDiagnostics(response) abort$/;"	f
ale#lsp#tsserver_message#Change	vim/pack/minpac/start/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Change(buffer) abort$/;"	f
ale#lsp#tsserver_message#Close	vim/pack/minpac/start/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Close(buffer) abort$/;"	f
ale#lsp#tsserver_message#CompletionEntryDetails	vim/pack/minpac/start/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#CompletionEntryDetails(buffer, line, column, entry_names) abo/;"	f
ale#lsp#tsserver_message#Completions	vim/pack/minpac/start/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Completions(buffer, line, column, prefix) abort$/;"	f
ale#lsp#tsserver_message#Definition	vim/pack/minpac/start/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Definition(buffer, line, column) abort$/;"	f
ale#lsp#tsserver_message#Geterr	vim/pack/minpac/start/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Geterr(buffer) abort$/;"	f
ale#lsp#tsserver_message#Open	vim/pack/minpac/start/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Open(buffer) abort$/;"	f
ale#lsp#tsserver_message#Quickinfo	vim/pack/minpac/start/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Quickinfo(buffer, line, column) abort$/;"	f
ale#lsp#tsserver_message#References	vim/pack/minpac/start/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#References(buffer, line, column) abort$/;"	f
ale#node#Executable	vim/pack/minpac/start/ale/autoload/ale/node.vim	/^function! ale#node#Executable(buffer, executable) abort$/;"	f
ale#node#FindExecutable	vim/pack/minpac/start/ale/autoload/ale/node.vim	/^function! ale#node#FindExecutable(buffer, base_var_name, path_list) abort$/;"	f
ale#path#BufferCdString	vim/pack/minpac/start/ale/autoload/ale/path.vim	/^function! ale#path#BufferCdString(buffer) abort$/;"	f
ale#path#CdString	vim/pack/minpac/start/ale/autoload/ale/path.vim	/^function! ale#path#CdString(directory) abort$/;"	f
ale#path#FindNearestDirectory	vim/pack/minpac/start/ale/autoload/ale/path.vim	/^function! ale#path#FindNearestDirectory(buffer, directory_name) abort$/;"	f
ale#path#FindNearestFile	vim/pack/minpac/start/ale/autoload/ale/path.vim	/^function! ale#path#FindNearestFile(buffer, filename) abort$/;"	f
ale#path#FromURI	vim/pack/minpac/start/ale/autoload/ale/path.vim	/^function! ale#path#FromURI(uri) abort$/;"	f
ale#path#GetAbsPath	vim/pack/minpac/start/ale/autoload/ale/path.vim	/^function! ale#path#GetAbsPath(base_directory, filename) abort$/;"	f
ale#path#IsAbsolute	vim/pack/minpac/start/ale/autoload/ale/path.vim	/^function! ale#path#IsAbsolute(filename) abort$/;"	f
ale#path#IsBufferPath	vim/pack/minpac/start/ale/autoload/ale/path.vim	/^function! ale#path#IsBufferPath(buffer, complex_filename) abort$/;"	f
ale#path#IsTempName	vim/pack/minpac/start/ale/autoload/ale/path.vim	/^function! ale#path#IsTempName(filename) abort$/;"	f
ale#path#ResolveLocalPath	vim/pack/minpac/start/ale/autoload/ale/path.vim	/^function! ale#path#ResolveLocalPath(buffer, search_string, global_fallback) abort$/;"	f
ale#path#Simplify	vim/pack/minpac/start/ale/autoload/ale/path.vim	/^function! ale#path#Simplify(path) abort$/;"	f
ale#path#ToURI	vim/pack/minpac/start/ale/autoload/ale/path.vim	/^function! ale#path#ToURI(path) abort$/;"	f
ale#path#Upwards	vim/pack/minpac/start/ale/autoload/ale/path.vim	/^function! ale#path#Upwards(path) abort$/;"	f
ale#pattern_options#SetOptions	vim/pack/minpac/start/ale/autoload/ale/pattern_options.vim	/^function! ale#pattern_options#SetOptions(buffer) abort$/;"	f
ale#preview#OpenSelectionInBuffer	vim/pack/minpac/start/ale/autoload/ale/preview.vim	/^function! ale#preview#OpenSelectionInBuffer() abort$/;"	f
ale#preview#OpenSelectionInTab	vim/pack/minpac/start/ale/autoload/ale/preview.vim	/^function! ale#preview#OpenSelectionInTab() abort$/;"	f
ale#preview#Show	vim/pack/minpac/start/ale/autoload/ale/preview.vim	/^function! ale#preview#Show(lines, ...) abort$/;"	f
ale#preview#ShowSelection	vim/pack/minpac/start/ale/autoload/ale/preview.vim	/^function! ale#preview#ShowSelection(item_list) abort$/;"	f
ale#python#FindExecutable	vim/pack/minpac/start/ale/autoload/ale/python.vim	/^function! ale#python#FindExecutable(buffer, base_var_name, path_list) abort$/;"	f
ale#python#FindProjectRoot	vim/pack/minpac/start/ale/autoload/ale/python.vim	/^function! ale#python#FindProjectRoot(buffer) abort$/;"	f
ale#python#FindProjectRootIni	vim/pack/minpac/start/ale/autoload/ale/python.vim	/^function! ale#python#FindProjectRootIni(buffer) abort$/;"	f
ale#python#FindVirtualenv	vim/pack/minpac/start/ale/autoload/ale/python.vim	/^function! ale#python#FindVirtualenv(buffer) abort$/;"	f
ale#references#ClearLSPData	vim/pack/minpac/start/ale/autoload/ale/references.vim	/^function! ale#references#ClearLSPData() abort$/;"	f
ale#references#Find	vim/pack/minpac/start/ale/autoload/ale/references.vim	/^function! ale#references#Find() abort$/;"	f
ale#references#GetMap	vim/pack/minpac/start/ale/autoload/ale/references.vim	/^function! ale#references#GetMap() abort$/;"	f
ale#references#HandleLSPResponse	vim/pack/minpac/start/ale/autoload/ale/references.vim	/^function! ale#references#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#references#HandleTSServerResponse	vim/pack/minpac/start/ale/autoload/ale/references.vim	/^function! ale#references#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#references#SetMap	vim/pack/minpac/start/ale/autoload/ale/references.vim	/^function! ale#references#SetMap(map) abort$/;"	f
ale#ruby#FindRailsRoot	vim/pack/minpac/start/ale/autoload/ale/ruby.vim	/^function! ale#ruby#FindRailsRoot(buffer) abort$/;"	f
ale#semver#GTE	vim/pack/minpac/start/ale/autoload/ale/semver.vim	/^function! ale#semver#GTE(lhs, rhs) abort$/;"	f
ale#semver#GetVersion	vim/pack/minpac/start/ale/autoload/ale/semver.vim	/^function! ale#semver#GetVersion(executable, version_lines) abort$/;"	f
ale#semver#HasVersion	vim/pack/minpac/start/ale/autoload/ale/semver.vim	/^function! ale#semver#HasVersion(executable) abort$/;"	f
ale#semver#ResetVersionCache	vim/pack/minpac/start/ale/autoload/ale/semver.vim	/^function! ale#semver#ResetVersionCache() abort$/;"	f
ale#sign#FindCurrentSigns	vim/pack/minpac/start/ale/autoload/ale/sign.vim	/^function! ale#sign#FindCurrentSigns(buffer) abort$/;"	f
ale#sign#GetSignCommands	vim/pack/minpac/start/ale/autoload/ale/sign.vim	/^function! ale#sign#GetSignCommands(buffer, was_sign_set, sign_map) abort$/;"	f
ale#sign#GetSignName	vim/pack/minpac/start/ale/autoload/ale/sign.vim	/^function! ale#sign#GetSignName(sublist) abort$/;"	f
ale#sign#ParseSigns	vim/pack/minpac/start/ale/autoload/ale/sign.vim	/^function! ale#sign#ParseSigns(line_list) abort$/;"	f
ale#sign#ReadSigns	vim/pack/minpac/start/ale/autoload/ale/sign.vim	/^function! ale#sign#ReadSigns(buffer) abort$/;"	f
ale#sign#SetSigns	vim/pack/minpac/start/ale/autoload/ale/sign.vim	/^function! ale#sign#SetSigns(buffer, loclist) abort$/;"	f
ale#statusline#Count	vim/pack/minpac/start/ale/autoload/ale/statusline.vim	/^function! ale#statusline#Count(buffer) abort$/;"	f
ale#statusline#Status	vim/pack/minpac/start/ale/autoload/ale/statusline.vim	/^function! ale#statusline#Status() abort$/;"	f
ale#statusline#Update	vim/pack/minpac/start/ale/autoload/ale/statusline.vim	/^function! ale#statusline#Update(buffer, loclist) abort$/;"	f
ale#test#RestoreDirectory	vim/pack/minpac/start/ale/autoload/ale/test.vim	/^function! ale#test#RestoreDirectory() abort$/;"	f
ale#test#SetDirectory	vim/pack/minpac/start/ale/autoload/ale/test.vim	/^function! ale#test#SetDirectory(docker_path) abort$/;"	f
ale#test#SetFilename	vim/pack/minpac/start/ale/autoload/ale/test.vim	/^function! ale#test#SetFilename(path) abort$/;"	f
ale#toggle#Disable	vim/pack/minpac/start/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Disable() abort$/;"	f
ale#toggle#DisableBuffer	vim/pack/minpac/start/ale/autoload/ale/toggle.vim	/^function! ale#toggle#DisableBuffer(buffer) abort$/;"	f
ale#toggle#Enable	vim/pack/minpac/start/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Enable() abort$/;"	f
ale#toggle#EnableBuffer	vim/pack/minpac/start/ale/autoload/ale/toggle.vim	/^function! ale#toggle#EnableBuffer(buffer) abort$/;"	f
ale#toggle#Reset	vim/pack/minpac/start/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Reset() abort$/;"	f
ale#toggle#ResetBuffer	vim/pack/minpac/start/ale/autoload/ale/toggle.vim	/^function! ale#toggle#ResetBuffer(buffer) abort$/;"	f
ale#toggle#Toggle	vim/pack/minpac/start/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Toggle() abort$/;"	f
ale#toggle#ToggleBuffer	vim/pack/minpac/start/ale/autoload/ale/toggle.vim	/^function! ale#toggle#ToggleBuffer(buffer) abort$/;"	f
ale#uri#Decode	vim/pack/minpac/start/ale/autoload/ale/uri.vim	/^function! ale#uri#Decode(value) abort$/;"	f
ale#uri#Encode	vim/pack/minpac/start/ale/autoload/ale/uri.vim	/^function! ale#uri#Encode(value) abort$/;"	f
ale#util#BinarySearch	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#BinarySearch(loclist, buffer, line, column) abort$/;"	f
ale#util#ClockMilliseconds	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#ClockMilliseconds() abort$/;"	f
ale#util#Col	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#Col(str, chr) abort$/;"	f
ale#util#EscapePCRE	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#EscapePCRE(unsafe_string) abort$/;"	f
ale#util#EscapeVim	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#EscapeVim(unsafe_string) abort$/;"	f
ale#util#Execute	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#Execute(expr) abort$/;"	f
ale#util#FeedKeys	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#FeedKeys(...) abort$/;"	f
ale#util#FunctionArgCount	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#FunctionArgCount(function) abort$/;"	f
ale#util#FuzzyJSONDecode	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#FuzzyJSONDecode(data, default) abort$/;"	f
ale#util#GetFunction	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#GetFunction(string_or_ref) abort$/;"	f
ale#util#GetItemPriority	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#GetItemPriority(item) abort$/;"	f
ale#util#GetLineCount	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#GetLineCount(buffer) abort$/;"	f
ale#util#GetMatches	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#GetMatches(lines, patterns) abort$/;"	f
ale#util#InSandbox	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#InSandbox() abort$/;"	f
ale#util#LocItemCompare	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#LocItemCompare(left, right) abort$/;"	f
ale#util#LocItemCompareWithText	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#LocItemCompareWithText(left, right) abort$/;"	f
ale#util#Mode	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#Mode(...) abort$/;"	f
ale#util#Open	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#Open(filename, line, column, options) abort$/;"	f
ale#util#ShowMessage	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#ShowMessage(string) abort$/;"	f
ale#util#StartPartialTimer	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#StartPartialTimer(delay, callback, args) abort$/;"	f
ale#util#StopPartialTimer	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#StopPartialTimer(timer_id) abort$/;"	f
ale#util#Writefile	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! ale#util#Writefile(buffer, lines, filename) abort$/;"	f
ale_linters#ansible#ansible_lint#Handle	vim/pack/minpac/start/ale/ale_linters/ansible/ansible_lint.vim	/^function! ale_linters#ansible#ansible_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#apiblueprint#drafter#HandleErrors	vim/pack/minpac/start/ale/ale_linters/apiblueprint/drafter.vim	/^function! ale_linters#apiblueprint#drafter#HandleErrors(buffer, lines) abort$/;"	f
ale_linters#asm#gcc#GetCommand	vim/pack/minpac/start/ale/ale_linters/asm/gcc.vim	/^function! ale_linters#asm#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#asm#gcc#GetExecutable	vim/pack/minpac/start/ale/ale_linters/asm/gcc.vim	/^function! ale_linters#asm#gcc#GetExecutable(buffer) abort$/;"	f
ale_linters#asm#gcc#Handle	vim/pack/minpac/start/ale/ale_linters/asm/gcc.vim	/^function! ale_linters#asm#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#awk#gawk#GetCommand	vim/pack/minpac/start/ale/ale_linters/awk/gawk.vim	/^function! ale_linters#awk#gawk#GetCommand(buffer) abort$/;"	f
ale_linters#awk#gawk#GetExecutable	vim/pack/minpac/start/ale/ale_linters/awk/gawk.vim	/^function! ale_linters#awk#gawk#GetExecutable(buffer) abort$/;"	f
ale_linters#c#clang#GetCommand	vim/pack/minpac/start/ale/ale_linters/c/clang.vim	/^function! ale_linters#c#clang#GetCommand(buffer, output) abort$/;"	f
ale_linters#c#clang#GetExecutable	vim/pack/minpac/start/ale/ale_linters/c/clang.vim	/^function! ale_linters#c#clang#GetExecutable(buffer) abort$/;"	f
ale_linters#c#clangtidy#GetCommand	vim/pack/minpac/start/ale/ale_linters/c/clangtidy.vim	/^function! ale_linters#c#clangtidy#GetCommand(buffer) abort$/;"	f
ale_linters#c#clangtidy#GetExecutable	vim/pack/minpac/start/ale/ale_linters/c/clangtidy.vim	/^function! ale_linters#c#clangtidy#GetExecutable(buffer) abort$/;"	f
ale_linters#c#cppcheck#GetCommand	vim/pack/minpac/start/ale/ale_linters/c/cppcheck.vim	/^function! ale_linters#c#cppcheck#GetCommand(buffer) abort$/;"	f
ale_linters#c#cppcheck#GetExecutable	vim/pack/minpac/start/ale/ale_linters/c/cppcheck.vim	/^function! ale_linters#c#cppcheck#GetExecutable(buffer) abort$/;"	f
ale_linters#c#flawfinder#GetCommand	vim/pack/minpac/start/ale/ale_linters/c/flawfinder.vim	/^function! ale_linters#c#flawfinder#GetCommand(buffer) abort$/;"	f
ale_linters#c#flawfinder#GetExecutable	vim/pack/minpac/start/ale/ale_linters/c/flawfinder.vim	/^function! ale_linters#c#flawfinder#GetExecutable(buffer) abort$/;"	f
ale_linters#c#gcc#GetCommand	vim/pack/minpac/start/ale/ale_linters/c/gcc.vim	/^function! ale_linters#c#gcc#GetCommand(buffer, output) abort$/;"	f
ale_linters#c#gcc#GetExecutable	vim/pack/minpac/start/ale/ale_linters/c/gcc.vim	/^function! ale_linters#c#gcc#GetExecutable(buffer) abort$/;"	f
ale_linters#chef#foodcritic#GetCommand	vim/pack/minpac/start/ale/ale_linters/chef/foodcritic.vim	/^function! ale_linters#chef#foodcritic#GetCommand(buffer) abort$/;"	f
ale_linters#chef#foodcritic#GetExecutable	vim/pack/minpac/start/ale/ale_linters/chef/foodcritic.vim	/^function! ale_linters#chef#foodcritic#GetExecutable(buffer) abort$/;"	f
ale_linters#chef#foodcritic#Handle	vim/pack/minpac/start/ale/ale_linters/chef/foodcritic.vim	/^function! ale_linters#chef#foodcritic#Handle(buffer, lines) abort$/;"	f
ale_linters#clojure#joker#HandleJokerFormat	vim/pack/minpac/start/ale/ale_linters/clojure/joker.vim	/^function! ale_linters#clojure#joker#HandleJokerFormat(buffer, lines) abort$/;"	f
ale_linters#cmake#cmakelint#Command	vim/pack/minpac/start/ale/ale_linters/cmake/cmakelint.vim	/^function! ale_linters#cmake#cmakelint#Command(buffer) abort$/;"	f
ale_linters#cmake#cmakelint#Executable	vim/pack/minpac/start/ale/ale_linters/cmake/cmakelint.vim	/^function! ale_linters#cmake#cmakelint#Executable(buffer) abort$/;"	f
ale_linters#coffee#coffee#GetCommand	vim/pack/minpac/start/ale/ale_linters/coffee/coffee.vim	/^function! ale_linters#coffee#coffee#GetCommand(buffer) abort$/;"	f
ale_linters#coffee#coffee#GetExecutable	vim/pack/minpac/start/ale/ale_linters/coffee/coffee.vim	/^function! ale_linters#coffee#coffee#GetExecutable(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#GetCommand	vim/pack/minpac/start/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#GetCommand(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#GetExecutable(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#Handle	vim/pack/minpac/start/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#Handle(buffer, lines) abort$/;"	f
ale_linters#cpp#clang#GetCommand	vim/pack/minpac/start/ale/ale_linters/cpp/clang.vim	/^function! ale_linters#cpp#clang#GetCommand(buffer, output) abort$/;"	f
ale_linters#cpp#clang#GetExecutable	vim/pack/minpac/start/ale/ale_linters/cpp/clang.vim	/^function! ale_linters#cpp#clang#GetExecutable(buffer) abort$/;"	f
ale_linters#cpp#clangcheck#GetCommand	vim/pack/minpac/start/ale/ale_linters/cpp/clangcheck.vim	/^function! ale_linters#cpp#clangcheck#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#clangcheck#GetExecutable	vim/pack/minpac/start/ale/ale_linters/cpp/clangcheck.vim	/^function! ale_linters#cpp#clangcheck#GetExecutable(buffer) abort$/;"	f
ale_linters#cpp#clangtidy#GetCommand	vim/pack/minpac/start/ale/ale_linters/cpp/clangtidy.vim	/^function! ale_linters#cpp#clangtidy#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#clangtidy#GetExecutable	vim/pack/minpac/start/ale/ale_linters/cpp/clangtidy.vim	/^function! ale_linters#cpp#clangtidy#GetExecutable(buffer) abort$/;"	f
ale_linters#cpp#cppcheck#GetCommand	vim/pack/minpac/start/ale/ale_linters/cpp/cppcheck.vim	/^function! ale_linters#cpp#cppcheck#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cppcheck#GetExecutable	vim/pack/minpac/start/ale/ale_linters/cpp/cppcheck.vim	/^function! ale_linters#cpp#cppcheck#GetExecutable(buffer) abort$/;"	f
ale_linters#cpp#cpplint#GetCommand	vim/pack/minpac/start/ale/ale_linters/cpp/cpplint.vim	/^function! ale_linters#cpp#cpplint#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cpplint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/cpp/cpplint.vim	/^function! ale_linters#cpp#cpplint#GetExecutable(buffer) abort$/;"	f
ale_linters#cpp#flawfinder#GetCommand	vim/pack/minpac/start/ale/ale_linters/cpp/flawfinder.vim	/^function! ale_linters#cpp#flawfinder#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#flawfinder#GetExecutable	vim/pack/minpac/start/ale/ale_linters/cpp/flawfinder.vim	/^function! ale_linters#cpp#flawfinder#GetExecutable(buffer) abort$/;"	f
ale_linters#cpp#gcc#GetCommand	vim/pack/minpac/start/ale/ale_linters/cpp/gcc.vim	/^function! ale_linters#cpp#gcc#GetCommand(buffer, output) abort$/;"	f
ale_linters#cpp#gcc#GetExecutable	vim/pack/minpac/start/ale/ale_linters/cpp/gcc.vim	/^function! ale_linters#cpp#gcc#GetExecutable(buffer) abort$/;"	f
ale_linters#crystal#crystal#GetCommand	vim/pack/minpac/start/ale/ale_linters/crystal/crystal.vim	/^function! ale_linters#crystal#crystal#GetCommand(buffer) abort$/;"	f
ale_linters#crystal#crystal#Handle	vim/pack/minpac/start/ale/ale_linters/crystal/crystal.vim	/^function! ale_linters#crystal#crystal#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#mcs#GetCommand	vim/pack/minpac/start/ale/ale_linters/cs/mcs.vim	/^function! ale_linters#cs#mcs#GetCommand(buffer) abort$/;"	f
ale_linters#cs#mcs#Handle	vim/pack/minpac/start/ale/ale_linters/cs/mcs.vim	/^function! ale_linters#cs#mcs#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#mcsc#GetCommand	vim/pack/minpac/start/ale/ale_linters/cs/mcsc.vim	/^function! ale_linters#cs#mcsc#GetCommand(buffer) abort$/;"	f
ale_linters#cs#mcsc#Handle	vim/pack/minpac/start/ale/ale_linters/cs/mcsc.vim	/^function! ale_linters#cs#mcsc#Handle(buffer, lines) abort$/;"	f
ale_linters#css#csslint#GetCommand	vim/pack/minpac/start/ale/ale_linters/css/csslint.vim	/^function! ale_linters#css#csslint#GetCommand(buffer) abort$/;"	f
ale_linters#css#stylelint#GetCommand	vim/pack/minpac/start/ale/ale_linters/css/stylelint.vim	/^function! ale_linters#css#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#css#stylelint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/css/stylelint.vim	/^function! ale_linters#css#stylelint#GetExecutable(buffer) abort$/;"	f
ale_linters#cucumber#cucumber#GetCommand	vim/pack/minpac/start/ale/ale_linters/cucumber/cucumber.vim	/^function! ale_linters#cucumber#cucumber#GetCommand(buffer) abort$/;"	f
ale_linters#cucumber#cucumber#Handle	vim/pack/minpac/start/ale/ale_linters/cucumber/cucumber.vim	/^function! ale_linters#cucumber#cucumber#Handle(buffer, lines) abort$/;"	f
ale_linters#cuda#nvcc#GetCommand	vim/pack/minpac/start/ale/ale_linters/cuda/nvcc.vim	/^function! ale_linters#cuda#nvcc#GetCommand(buffer) abort$/;"	f
ale_linters#cuda#nvcc#GetExecutable	vim/pack/minpac/start/ale/ale_linters/cuda/nvcc.vim	/^function! ale_linters#cuda#nvcc#GetExecutable(buffer) abort$/;"	f
ale_linters#cuda#nvcc#HandleNVCCFormat	vim/pack/minpac/start/ale/ale_linters/cuda/nvcc.vim	/^function! ale_linters#cuda#nvcc#HandleNVCCFormat(buffer, lines) abort$/;"	f
ale_linters#d#dmd#DMDCommand	vim/pack/minpac/start/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#DMDCommand(buffer, dub_output) abort$/;"	f
ale_linters#d#dmd#DUBCommand	vim/pack/minpac/start/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#DUBCommand(buffer) abort$/;"	f
ale_linters#d#dmd#Handle	vim/pack/minpac/start/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#Handle(buffer, lines) abort$/;"	f
ale_linters#dafny#dafny#Handle	vim/pack/minpac/start/ale/ale_linters/dafny/dafny.vim	/^function! ale_linters#dafny#dafny#Handle(buffer, lines) abort$/;"	f
ale_linters#dart#dartanalyzer#GetCommand	vim/pack/minpac/start/ale/ale_linters/dart/dartanalyzer.vim	/^function! ale_linters#dart#dartanalyzer#GetCommand(buffer) abort$/;"	f
ale_linters#dart#dartanalyzer#GetExecutable	vim/pack/minpac/start/ale/ale_linters/dart/dartanalyzer.vim	/^function! ale_linters#dart#dartanalyzer#GetExecutable(buffer) abort$/;"	f
ale_linters#dart#dartanalyzer#Handle	vim/pack/minpac/start/ale/ale_linters/dart/dartanalyzer.vim	/^function! ale_linters#dart#dartanalyzer#Handle(buffer, lines) abort$/;"	f
ale_linters#dart#language_server#GetExecutable	vim/pack/minpac/start/ale/ale_linters/dart/language_server.vim	/^function! ale_linters#dart#language_server#GetExecutable(buffer) abort$/;"	f
ale_linters#dart#language_server#GetProjectRoot	vim/pack/minpac/start/ale/ale_linters/dart/language_server.vim	/^function! ale_linters#dart#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#dockerfile#hadolint#GetCommand	vim/pack/minpac/start/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#GetCommand(buffer) abort$/;"	f
ale_linters#dockerfile#hadolint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#GetExecutable(buffer) abort$/;"	f
ale_linters#dockerfile#hadolint#Handle	vim/pack/minpac/start/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#credo#Handle	vim/pack/minpac/start/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#dialyxir#Handle	vim/pack/minpac/start/ale/ale_linters/elixir/dialyxir.vim	/^function! ale_linters#elixir#dialyxir#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#dogma#Handle	vim/pack/minpac/start/ale/ale_linters/elixir/dogma.vim	/^function! ale_linters#elixir#dogma#Handle(buffer, lines) abort$/;"	f
ale_linters#elm#make#GetCommand	vim/pack/minpac/start/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetCommand(buffer) abort$/;"	f
ale_linters#elm#make#GetExecutable	vim/pack/minpac/start/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetExecutable(buffer) abort$/;"	f
ale_linters#elm#make#Handle	vim/pack/minpac/start/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#erlc#GetCommand	vim/pack/minpac/start/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#GetCommand(buffer) abort$/;"	f
ale_linters#erlang#erlc#Handle	vim/pack/minpac/start/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#syntaxerl#FeatureCheck	vim/pack/minpac/start/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#FeatureCheck(buffer) abort$/;"	f
ale_linters#erlang#syntaxerl#GetCommand	vim/pack/minpac/start/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#GetCommand(buffer, output) abort$/;"	f
ale_linters#erlang#syntaxerl#GetExecutable	vim/pack/minpac/start/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#GetExecutable(buffer) abort$/;"	f
ale_linters#erlang#syntaxerl#Handle	vim/pack/minpac/start/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#Handle(buffer, lines) abort$/;"	f
ale_linters#eruby#erb#GetCommand	vim/pack/minpac/start/ale/ale_linters/eruby/erb.vim	/^function! ale_linters#eruby#erb#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#erubi#CheckErubi	vim/pack/minpac/start/ale/ale_linters/eruby/erubi.vim	/^function! ale_linters#eruby#erubi#CheckErubi(buffer) abort$/;"	f
ale_linters#eruby#erubi#GetCommand	vim/pack/minpac/start/ale/ale_linters/eruby/erubi.vim	/^function! ale_linters#eruby#erubi#GetCommand(buffer, check_erubi_output) abort$/;"	f
ale_linters#eruby#erubis#GetCommand	vim/pack/minpac/start/ale/ale_linters/eruby/erubis.vim	/^function! ale_linters#eruby#erubis#GetCommand(buffer) abort$/;"	f
ale_linters#fish#fish#Handle	vim/pack/minpac/start/ale/ale_linters/fish/fish.vim	/^function! ale_linters#fish#fish#Handle(buffer, lines) abort$/;"	f
ale_linters#fortran#gcc#GetCommand	vim/pack/minpac/start/ale/ale_linters/fortran/gcc.vim	/^function! ale_linters#fortran#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#fortran#gcc#GetExecutable	vim/pack/minpac/start/ale/ale_linters/fortran/gcc.vim	/^function! ale_linters#fortran#gcc#GetExecutable(buffer) abort$/;"	f
ale_linters#fortran#gcc#Handle	vim/pack/minpac/start/ale/ale_linters/fortran/gcc.vim	/^function! ale_linters#fortran#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#fuse#fusionlint#GetCommand	vim/pack/minpac/start/ale/ale_linters/fuse/fusionlint.vim	/^function! ale_linters#fuse#fusionlint#GetCommand(buffer) abort$/;"	f
ale_linters#fuse#fusionlint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/fuse/fusionlint.vim	/^function! ale_linters#fuse#fusionlint#GetExecutable(buffer) abort$/;"	f
ale_linters#fuse#fusionlint#Handle	vim/pack/minpac/start/ale/ale_linters/fuse/fusionlint.vim	/^function! ale_linters#fuse#fusionlint#Handle(buffer, lines) abort$/;"	f
ale_linters#gitcommit#gitlint#GetCommand	vim/pack/minpac/start/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#GetCommand(buffer) abort$/;"	f
ale_linters#gitcommit#gitlint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#GetExecutable(buffer) abort$/;"	f
ale_linters#gitcommit#gitlint#Handle	vim/pack/minpac/start/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#Handle(buffer, lines) abort$/;"	f
ale_linters#glsl#glslang#GetCommand	vim/pack/minpac/start/ale/ale_linters/glsl/glslang.vim	/^function! ale_linters#glsl#glslang#GetCommand(buffer) abort$/;"	f
ale_linters#glsl#glslang#GetExecutable	vim/pack/minpac/start/ale/ale_linters/glsl/glslang.vim	/^function! ale_linters#glsl#glslang#GetExecutable(buffer) abort$/;"	f
ale_linters#glsl#glslang#Handle	vim/pack/minpac/start/ale/ale_linters/glsl/glslang.vim	/^function! ale_linters#glsl#glslang#Handle(buffer, lines) abort$/;"	f
ale_linters#glsl#glslls#GetCommand	vim/pack/minpac/start/ale/ale_linters/glsl/glslls.vim	/^function! ale_linters#glsl#glslls#GetCommand(buffer) abort$/;"	f
ale_linters#glsl#glslls#GetExecutable	vim/pack/minpac/start/ale/ale_linters/glsl/glslls.vim	/^function! ale_linters#glsl#glslls#GetExecutable(buffer) abort$/;"	f
ale_linters#glsl#glslls#GetProjectRoot	vim/pack/minpac/start/ale/ale_linters/glsl/glslls.vim	/^function! ale_linters#glsl#glslls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#go#gobuild#GetCommand	vim/pack/minpac/start/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#GetCommand(buffer, goenv_output) abort$/;"	f
ale_linters#go#gobuild#GetMatches	vim/pack/minpac/start/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#GetMatches(lines) abort$/;"	f
ale_linters#go#gobuild#GoEnv	vim/pack/minpac/start/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#GoEnv(buffer) abort$/;"	f
ale_linters#go#gobuild#Handler	vim/pack/minpac/start/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#Handler(buffer, lines) abort$/;"	f
ale_linters#go#gobuild#ResetEnv	vim/pack/minpac/start/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#ResetEnv() abort$/;"	f
ale_linters#go#gometalinter#GetCommand	vim/pack/minpac/start/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#GetCommand(buffer) abort$/;"	f
ale_linters#go#gometalinter#GetExecutable	vim/pack/minpac/start/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#GetExecutable(buffer) abort$/;"	f
ale_linters#go#gometalinter#GetMatches	vim/pack/minpac/start/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#GetMatches(lines) abort$/;"	f
ale_linters#go#gometalinter#Handler	vim/pack/minpac/start/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#Handler(buffer, lines) abort$/;"	f
ale_linters#go#gosimple#GetCommand	vim/pack/minpac/start/ale/ale_linters/go/gosimple.vim	/^function! ale_linters#go#gosimple#GetCommand(buffer) abort$/;"	f
ale_linters#go#gotype#GetCommand	vim/pack/minpac/start/ale/ale_linters/go/gotype.vim	/^function! ale_linters#go#gotype#GetCommand(buffer) abort$/;"	f
ale_linters#go#govet#GetCommand	vim/pack/minpac/start/ale/ale_linters/go/govet.vim	/^function! ale_linters#go#govet#GetCommand(buffer) abort$/;"	f
ale_linters#go#staticcheck#GetCommand	vim/pack/minpac/start/ale/ale_linters/go/staticcheck.vim	/^function! ale_linters#go#staticcheck#GetCommand(buffer) abort$/;"	f
ale_linters#haml#hamllint#GetCommand	vim/pack/minpac/start/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#GetCommand(buffer) abort$/;"	f
ale_linters#haml#hamllint#Handle	vim/pack/minpac/start/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#Handle(buffer, lines) abort$/;"	f
ale_linters#handlebars#embertemplatelint#GetCommand	vim/pack/minpac/start/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#GetCommand(buffer) abort$/;"	f
ale_linters#handlebars#embertemplatelint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#GetExecutable(buffer) abort$/;"	f
ale_linters#handlebars#embertemplatelint#Handle	vim/pack/minpac/start/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#Handle(buffer, lines) abort$/;"	f
ale_linters#haskell#ghc#GetCommand	vim/pack/minpac/start/ale/ale_linters/haskell/ghc.vim	/^function! ale_linters#haskell#ghc#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hdevtools#GetCommand	vim/pack/minpac/start/ale/ale_linters/haskell/hdevtools.vim	/^function! ale_linters#haskell#hdevtools#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hdevtools#GetExecutable	vim/pack/minpac/start/ale/ale_linters/haskell/hdevtools.vim	/^function! ale_linters#haskell#hdevtools#GetExecutable(buffer) abort$/;"	f
ale_linters#haskell#hlint#Handle	vim/pack/minpac/start/ale/ale_linters/haskell/hlint.vim	/^function! ale_linters#haskell#hlint#Handle(buffer, lines) abort$/;"	f
ale_linters#haskell#stack_build#GetCommand	vim/pack/minpac/start/ale/ale_linters/haskell/stack_build.vim	/^function! ale_linters#haskell#stack_build#GetCommand(buffer) abort$/;"	f
ale_linters#html#htmlhint#GetCommand	vim/pack/minpac/start/ale/ale_linters/html/htmlhint.vim	/^function! ale_linters#html#htmlhint#GetCommand(buffer) abort$/;"	f
ale_linters#html#htmlhint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/html/htmlhint.vim	/^function! ale_linters#html#htmlhint#GetExecutable(buffer) abort$/;"	f
ale_linters#html#tidy#GetCommand	vim/pack/minpac/start/ale/ale_linters/html/tidy.vim	/^function! ale_linters#html#tidy#GetCommand(buffer) abort$/;"	f
ale_linters#html#tidy#GetExecutable	vim/pack/minpac/start/ale/ale_linters/html/tidy.vim	/^function! ale_linters#html#tidy#GetExecutable(buffer) abort$/;"	f
ale_linters#html#tidy#Handle	vim/pack/minpac/start/ale/ale_linters/html/tidy.vim	/^function! ale_linters#html#tidy#Handle(buffer, lines) abort$/;"	f
ale_linters#idris#idris#GetCommand	vim/pack/minpac/start/ale/ale_linters/idris/idris.vim	/^function! ale_linters#idris#idris#GetCommand(buffer) abort$/;"	f
ale_linters#idris#idris#GetExecutable	vim/pack/minpac/start/ale/ale_linters/idris/idris.vim	/^function! ale_linters#idris#idris#GetExecutable(buffer) abort$/;"	f
ale_linters#idris#idris#Handle	vim/pack/minpac/start/ale/ale_linters/idris/idris.vim	/^function! ale_linters#idris#idris#Handle(buffer, lines) abort$/;"	f
ale_linters#java#checkstyle#GetCommand	vim/pack/minpac/start/ale/ale_linters/java/checkstyle.vim	/^function! ale_linters#java#checkstyle#GetCommand(buffer) abort$/;"	f
ale_linters#java#checkstyle#Handle	vim/pack/minpac/start/ale/ale_linters/java/checkstyle.vim	/^function! ale_linters#java#checkstyle#Handle(buffer, lines) abort$/;"	f
ale_linters#java#javac#GetCommand	vim/pack/minpac/start/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#GetCommand(buffer, import_paths) abort$/;"	f
ale_linters#java#javac#GetExecutable	vim/pack/minpac/start/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#GetExecutable(buffer) abort$/;"	f
ale_linters#java#javac#GetImportPaths	vim/pack/minpac/start/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#GetImportPaths(buffer) abort$/;"	f
ale_linters#java#javac#Handle	vim/pack/minpac/start/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#Handle(buffer, lines) abort$/;"	f
ale_linters#java#pmd#GetCommand	vim/pack/minpac/start/ale/ale_linters/java/pmd.vim	/^function! ale_linters#java#pmd#GetCommand(buffer) abort$/;"	f
ale_linters#java#pmd#Handle	vim/pack/minpac/start/ale/ale_linters/java/pmd.vim	/^function! ale_linters#java#pmd#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#flow#GetCommand	vim/pack/minpac/start/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#GetCommand(buffer, version_lines) abort$/;"	f
ale_linters#javascript#flow#GetExecutable	vim/pack/minpac/start/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#flow#Handle	vim/pack/minpac/start/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#flow#VersionCheck	vim/pack/minpac/start/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#VersionCheck(buffer) abort$/;"	f
ale_linters#javascript#jscs#GetCommand	vim/pack/minpac/start/ale/ale_linters/javascript/jscs.vim	/^function! ale_linters#javascript#jscs#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#jscs#GetExecutable	vim/pack/minpac/start/ale/ale_linters/javascript/jscs.vim	/^function! ale_linters#javascript#jscs#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#jscs#Handle	vim/pack/minpac/start/ale/ale_linters/javascript/jscs.vim	/^function! ale_linters#javascript#jscs#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#jshint#GetCommand	vim/pack/minpac/start/ale/ale_linters/javascript/jshint.vim	/^function! ale_linters#javascript#jshint#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#jshint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/javascript/jshint.vim	/^function! ale_linters#javascript#jshint#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#standard#GetCommand	vim/pack/minpac/start/ale/ale_linters/javascript/standard.vim	/^function! ale_linters#javascript#standard#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#standard#GetExecutable	vim/pack/minpac/start/ale/ale_linters/javascript/standard.vim	/^function! ale_linters#javascript#standard#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#xo#GetCommand	vim/pack/minpac/start/ale/ale_linters/javascript/xo.vim	/^function! ale_linters#javascript#xo#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#xo#GetExecutable	vim/pack/minpac/start/ale/ale_linters/javascript/xo.vim	/^function! ale_linters#javascript#xo#GetExecutable(buffer) abort$/;"	f
ale_linters#json#jsonlint#Handle	vim/pack/minpac/start/ale/ale_linters/json/jsonlint.vim	/^function! ale_linters#json#jsonlint#Handle(buffer, lines) abort$/;"	f
ale_linters#kotlin#kotlinc#GetCommand	vim/pack/minpac/start/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#GetCommand(buffer, import_paths) abort$/;"	f
ale_linters#kotlin#kotlinc#GetImportPaths	vim/pack/minpac/start/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#GetImportPaths(buffer) abort$/;"	f
ale_linters#kotlin#kotlinc#Handle	vim/pack/minpac/start/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#Handle(buffer, lines) abort$/;"	f
ale_linters#kotlin#ktlint#GetCommand	vim/pack/minpac/start/ale/ale_linters/kotlin/ktlint.vim	/^function! ale_linters#kotlin#ktlint#GetCommand(buffer) abort$/;"	f
ale_linters#kotlin#ktlint#Handle	vim/pack/minpac/start/ale/ale_linters/kotlin/ktlint.vim	/^function! ale_linters#kotlin#ktlint#Handle(buffer, lines) abort$/;"	f
ale_linters#less#lessc#GetCommand	vim/pack/minpac/start/ale/ale_linters/less/lessc.vim	/^function! ale_linters#less#lessc#GetCommand(buffer) abort$/;"	f
ale_linters#less#lessc#GetExecutable	vim/pack/minpac/start/ale/ale_linters/less/lessc.vim	/^function! ale_linters#less#lessc#GetExecutable(buffer) abort$/;"	f
ale_linters#less#lessc#Handle	vim/pack/minpac/start/ale/ale_linters/less/lessc.vim	/^function! ale_linters#less#lessc#Handle(buffer, lines) abort$/;"	f
ale_linters#less#stylelint#GetCommand	vim/pack/minpac/start/ale/ale_linters/less/stylelint.vim	/^function! ale_linters#less#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#less#stylelint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/less/stylelint.vim	/^function! ale_linters#less#stylelint#GetExecutable(buffer) abort$/;"	f
ale_linters#llvm#llc#GetCommand	vim/pack/minpac/start/ale/ale_linters/llvm/llc.vim	/^function! ale_linters#llvm#llc#GetCommand(buffer) abort$/;"	f
ale_linters#llvm#llc#GetExecutable	vim/pack/minpac/start/ale/ale_linters/llvm/llc.vim	/^function! ale_linters#llvm#llc#GetExecutable(buffer) abort$/;"	f
ale_linters#llvm#llc#HandleErrors	vim/pack/minpac/start/ale/ale_linters/llvm/llc.vim	/^function! ale_linters#llvm#llc#HandleErrors(buffer, lines) abort$/;"	f
ale_linters#lua#luac#GetCommand	vim/pack/minpac/start/ale/ale_linters/lua/luac.vim	/^function! ale_linters#lua#luac#GetCommand(buffer) abort$/;"	f
ale_linters#lua#luac#GetExecutable	vim/pack/minpac/start/ale/ale_linters/lua/luac.vim	/^function! ale_linters#lua#luac#GetExecutable(buffer) abort$/;"	f
ale_linters#lua#luac#Handle	vim/pack/minpac/start/ale/ale_linters/lua/luac.vim	/^function! ale_linters#lua#luac#Handle(buffer, lines) abort$/;"	f
ale_linters#lua#luacheck#GetCommand	vim/pack/minpac/start/ale/ale_linters/lua/luacheck.vim	/^function! ale_linters#lua#luacheck#GetCommand(buffer) abort$/;"	f
ale_linters#lua#luacheck#GetExecutable	vim/pack/minpac/start/ale/ale_linters/lua/luacheck.vim	/^function! ale_linters#lua#luacheck#GetExecutable(buffer) abort$/;"	f
ale_linters#lua#luacheck#Handle	vim/pack/minpac/start/ale/ale_linters/lua/luacheck.vim	/^function! ale_linters#lua#luacheck#Handle(buffer, lines) abort$/;"	f
ale_linters#make#checkmake#Handle	vim/pack/minpac/start/ale/ale_linters/make/checkmake.vim	/^function! ale_linters#make#checkmake#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#mdl#GetCommand	vim/pack/minpac/start/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#mdl#GetExecutable	vim/pack/minpac/start/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#GetExecutable(buffer) abort$/;"	f
ale_linters#markdown#mdl#Handle	vim/pack/minpac/start/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#remark_lint#Handle	vim/pack/minpac/start/ale/ale_linters/markdown/remark_lint.vim	/^function! ale_linters#markdown#remark_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#matlab#mlint#GetCommand	vim/pack/minpac/start/ale/ale_linters/matlab/mlint.vim	/^function! ale_linters#matlab#mlint#GetCommand(buffer) abort$/;"	f
ale_linters#matlab#mlint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/matlab/mlint.vim	/^function! ale_linters#matlab#mlint#GetExecutable(buffer) abort$/;"	f
ale_linters#matlab#mlint#Handle	vim/pack/minpac/start/ale/ale_linters/matlab/mlint.vim	/^function! ale_linters#matlab#mlint#Handle(buffer, lines) abort$/;"	f
ale_linters#mercury#mmc#GetCommand	vim/pack/minpac/start/ale/ale_linters/mercury/mmc.vim	/^function! ale_linters#mercury#mmc#GetCommand(buffer) abort$/;"	f
ale_linters#mercury#mmc#GetExecutable	vim/pack/minpac/start/ale/ale_linters/mercury/mmc.vim	/^function! ale_linters#mercury#mmc#GetExecutable(buffer) abort$/;"	f
ale_linters#mercury#mmc#Handle	vim/pack/minpac/start/ale/ale_linters/mercury/mmc.vim	/^function! ale_linters#mercury#mmc#Handle(buffer, lines) abort$/;"	f
ale_linters#nasm#nasm#GetCommand	vim/pack/minpac/start/ale/ale_linters/nasm/nasm.vim	/^function! ale_linters#nasm#nasm#GetCommand(buffer) abort$/;"	f
ale_linters#nasm#nasm#GetExecutable	vim/pack/minpac/start/ale/ale_linters/nasm/nasm.vim	/^function! ale_linters#nasm#nasm#GetExecutable(buffer) abort$/;"	f
ale_linters#nasm#nasm#GetOptions	vim/pack/minpac/start/ale/ale_linters/nasm/nasm.vim	/^function! ale_linters#nasm#nasm#GetOptions(buffer) abort$/;"	f
ale_linters#nasm#nasm#Handle	vim/pack/minpac/start/ale/ale_linters/nasm/nasm.vim	/^function! ale_linters#nasm#nasm#Handle(buffer, lines) abort$/;"	f
ale_linters#nim#nimcheck#GetCommand	vim/pack/minpac/start/ale/ale_linters/nim/nimcheck.vim	/^function! ale_linters#nim#nimcheck#GetCommand(buffer) abort$/;"	f
ale_linters#nim#nimcheck#Handle	vim/pack/minpac/start/ale/ale_linters/nim/nimcheck.vim	/^function! ale_linters#nim#nimcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#nix#nix#Handle	vim/pack/minpac/start/ale/ale_linters/nix/nix.vim	/^function! ale_linters#nix#nix#Handle(buffer, lines) abort$/;"	f
ale_linters#objc#clang#GetCommand	vim/pack/minpac/start/ale/ale_linters/objc/clang.vim	/^function! ale_linters#objc#clang#GetCommand(buffer) abort$/;"	f
ale_linters#objcpp#clang#GetCommand	vim/pack/minpac/start/ale/ale_linters/objcpp/clang.vim	/^function! ale_linters#objcpp#clang#GetCommand(buffer) abort$/;"	f
ale_linters#ocaml#merlin#Handle	vim/pack/minpac/start/ale/ale_linters/ocaml/merlin.vim	/^function! ale_linters#ocaml#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#perl#perl#GetCommand	vim/pack/minpac/start/ale/ale_linters/perl/perl.vim	/^function! ale_linters#perl#perl#GetCommand(buffer) abort$/;"	f
ale_linters#perl#perl#GetExecutable	vim/pack/minpac/start/ale/ale_linters/perl/perl.vim	/^function! ale_linters#perl#perl#GetExecutable(buffer) abort$/;"	f
ale_linters#perl#perl#Handle	vim/pack/minpac/start/ale/ale_linters/perl/perl.vim	/^function! ale_linters#perl#perl#Handle(buffer, lines) abort$/;"	f
ale_linters#perl#perlcritic#GetCommand	vim/pack/minpac/start/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#GetCommand(buffer) abort$/;"	f
ale_linters#perl#perlcritic#GetExecutable	vim/pack/minpac/start/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#GetExecutable(buffer) abort$/;"	f
ale_linters#perl#perlcritic#GetProfile	vim/pack/minpac/start/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#GetProfile(buffer) abort$/;"	f
ale_linters#perl#perlcritic#Handle	vim/pack/minpac/start/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#Handle(buffer, lines) abort$/;"	f
ale_linters#php#hack#Handle	vim/pack/minpac/start/ale/ale_linters/php/hack.vim	/^function! ale_linters#php#hack#Handle(buffer, lines) abort$/;"	f
ale_linters#php#langserver#GetCommand	vim/pack/minpac/start/ale/ale_linters/php/langserver.vim	/^function! ale_linters#php#langserver#GetCommand(buffer) abort$/;"	f
ale_linters#php#langserver#GetExecutable	vim/pack/minpac/start/ale/ale_linters/php/langserver.vim	/^function! ale_linters#php#langserver#GetExecutable(buffer) abort$/;"	f
ale_linters#php#langserver#GetProjectRoot	vim/pack/minpac/start/ale/ale_linters/php/langserver.vim	/^function! ale_linters#php#langserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#phan#GetCommand	vim/pack/minpac/start/ale/ale_linters/php/phan.vim	/^function! ale_linters#php#phan#GetCommand(buffer) abort$/;"	f
ale_linters#php#phan#Handle	vim/pack/minpac/start/ale/ale_linters/php/phan.vim	/^function! ale_linters#php#phan#Handle(buffer, lines) abort$/;"	f
ale_linters#php#php#Handle	vim/pack/minpac/start/ale/ale_linters/php/php.vim	/^function! ale_linters#php#php#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpcs#GetCommand	vim/pack/minpac/start/ale/ale_linters/php/phpcs.vim	/^function! ale_linters#php#phpcs#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpcs#GetExecutable	vim/pack/minpac/start/ale/ale_linters/php/phpcs.vim	/^function! ale_linters#php#phpcs#GetExecutable(buffer) abort$/;"	f
ale_linters#php#phpcs#Handle	vim/pack/minpac/start/ale/ale_linters/php/phpcs.vim	/^function! ale_linters#php#phpcs#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpmd#GetCommand	vim/pack/minpac/start/ale/ale_linters/php/phpmd.vim	/^function! ale_linters#php#phpmd#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpmd#GetExecutable	vim/pack/minpac/start/ale/ale_linters/php/phpmd.vim	/^function! ale_linters#php#phpmd#GetExecutable(buffer) abort$/;"	f
ale_linters#php#phpmd#Handle	vim/pack/minpac/start/ale/ale_linters/php/phpmd.vim	/^function! ale_linters#php#phpmd#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpstan#GetCommand	vim/pack/minpac/start/ale/ale_linters/php/phpstan.vim	/^function! ale_linters#php#phpstan#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpstan#GetExecutable	vim/pack/minpac/start/ale/ale_linters/php/phpstan.vim	/^function! ale_linters#php#phpstan#GetExecutable(buffer) abort$/;"	f
ale_linters#php#phpstan#Handle	vim/pack/minpac/start/ale/ale_linters/php/phpstan.vim	/^function! ale_linters#php#phpstan#Handle(buffer, lines) abort$/;"	f
ale_linters#pony#ponyc#GetCommand	vim/pack/minpac/start/ale/ale_linters/pony/ponyc.vim	/^function! ale_linters#pony#ponyc#GetCommand(buffer) abort$/;"	f
ale_linters#pony#ponyc#GetExecutable	vim/pack/minpac/start/ale/ale_linters/pony/ponyc.vim	/^function! ale_linters#pony#ponyc#GetExecutable(buffer) abort$/;"	f
ale_linters#proto#protoc_gen_lint#GetCommand	vim/pack/minpac/start/ale/ale_linters/proto/protoc_gen_lint.vim	/^function! ale_linters#proto#protoc_gen_lint#GetCommand(buffer) abort$/;"	f
ale_linters#pug#puglint#GetCommand	vim/pack/minpac/start/ale/ale_linters/pug/puglint.vim	/^function! ale_linters#pug#puglint#GetCommand(buffer) abort$/;"	f
ale_linters#pug#puglint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/pug/puglint.vim	/^function! ale_linters#pug#puglint#GetExecutable(buffer) abort$/;"	f
ale_linters#puppet#puppet#Handle	vim/pack/minpac/start/ale/ale_linters/puppet/puppet.vim	/^function! ale_linters#puppet#puppet#Handle(buffer, lines) abort$/;"	f
ale_linters#puppet#puppetlint#GetCommand	vim/pack/minpac/start/ale/ale_linters/puppet/puppetlint.vim	/^function! ale_linters#puppet#puppetlint#GetCommand(buffer) abort$/;"	f
ale_linters#puppet#puppetlint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/puppet/puppetlint.vim	/^function! ale_linters#puppet#puppetlint#GetExecutable(buffer) abort$/;"	f
ale_linters#python#flake8#GetCommand	vim/pack/minpac/start/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetCommand(buffer, version_output) abort$/;"	f
ale_linters#python#flake8#GetExecutable	vim/pack/minpac/start/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetExecutable(buffer) abort$/;"	f
ale_linters#python#flake8#Handle	vim/pack/minpac/start/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#Handle(buffer, lines) abort$/;"	f
ale_linters#python#flake8#VersionCheck	vim/pack/minpac/start/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#VersionCheck(buffer) abort$/;"	f
ale_linters#python#mypy#GetCommand	vim/pack/minpac/start/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetCommand(buffer) abort$/;"	f
ale_linters#python#mypy#GetExecutable	vim/pack/minpac/start/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetExecutable(buffer) abort$/;"	f
ale_linters#python#mypy#Handle	vim/pack/minpac/start/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#Handle(buffer, lines) abort$/;"	f
ale_linters#python#prospector#GetCommand	vim/pack/minpac/start/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#GetCommand(buffer) abort$/;"	f
ale_linters#python#prospector#GetExecutable	vim/pack/minpac/start/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#GetExecutable(buffer) abort$/;"	f
ale_linters#python#prospector#Handle	vim/pack/minpac/start/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pycodestyle#GetCommand	vim/pack/minpac/start/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#GetCommand(buffer) abort$/;"	f
ale_linters#python#pycodestyle#GetExecutable	vim/pack/minpac/start/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pycodestyle#Handle	vim/pack/minpac/start/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pyflakes#GetCommand	vim/pack/minpac/start/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyflakes#GetExecutable	vim/pack/minpac/start/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pyflakes#Handle	vim/pack/minpac/start/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pylint#GetCommand	vim/pack/minpac/start/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetCommand(buffer) abort$/;"	f
ale_linters#python#pylint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pylint#Handle	vim/pack/minpac/start/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pyls#GetCommand	vim/pack/minpac/start/ale/ale_linters/python/pyls.vim	/^function! ale_linters#python#pyls#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyls#GetExecutable	vim/pack/minpac/start/ale/ale_linters/python/pyls.vim	/^function! ale_linters#python#pyls#GetExecutable(buffer) abort$/;"	f
ale_linters#qml#qmlfmt#GetCommand	vim/pack/minpac/start/ale/ale_linters/qml/qmlfmt.vim	/^function! ale_linters#qml#qmlfmt#GetCommand(buffer) abort$/;"	f
ale_linters#qml#qmlfmt#GetExecutable	vim/pack/minpac/start/ale/ale_linters/qml/qmlfmt.vim	/^function! ale_linters#qml#qmlfmt#GetExecutable(buffer) abort$/;"	f
ale_linters#qml#qmlfmt#Handle	vim/pack/minpac/start/ale/ale_linters/qml/qmlfmt.vim	/^function! ale_linters#qml#qmlfmt#Handle(buffer, lines) abort$/;"	f
ale_linters#qml#qmllint#Handle	vim/pack/minpac/start/ale/ale_linters/qml/qmllint.vim	/^function! ale_linters#qml#qmllint#Handle(buffer, lines) abort$/;"	f
ale_linters#r#lintr#GetCommand	vim/pack/minpac/start/ale/ale_linters/r/lintr.vim	/^function! ale_linters#r#lintr#GetCommand(buffer) abort$/;"	f
ale_linters#reason#merlin#Handle	vim/pack/minpac/start/ale/ale_linters/reason/merlin.vim	/^function! ale_linters#reason#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#rst#rstcheck#GetCommand	vim/pack/minpac/start/ale/ale_linters/rst/rstcheck.vim	/^function! ale_linters#rst#rstcheck#GetCommand(buffer) abort$/;"	f
ale_linters#rst#rstcheck#Handle	vim/pack/minpac/start/ale/ale_linters/rst/rstcheck.vim	/^function! ale_linters#rst#rstcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#brakeman#GetCommand	vim/pack/minpac/start/ale/ale_linters/ruby/brakeman.vim	/^function! ale_linters#ruby#brakeman#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#brakeman#Handle	vim/pack/minpac/start/ale/ale_linters/ruby/brakeman.vim	/^function! ale_linters#ruby#brakeman#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#rails_best_practices#GetCommand	vim/pack/minpac/start/ale/ale_linters/ruby/rails_best_practices.vim	/^function! ale_linters#ruby#rails_best_practices#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#rails_best_practices#Handle	vim/pack/minpac/start/ale/ale_linters/ruby/rails_best_practices.vim	/^function! ale_linters#ruby#rails_best_practices#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#reek#Handle	vim/pack/minpac/start/ale/ale_linters/ruby/reek.vim	/^function! ale_linters#ruby#reek#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#rubocop#GetCommand	vim/pack/minpac/start/ale/ale_linters/ruby/rubocop.vim	/^function! ale_linters#ruby#rubocop#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#rubocop#GetType	vim/pack/minpac/start/ale/ale_linters/ruby/rubocop.vim	/^function! ale_linters#ruby#rubocop#GetType(severity) abort$/;"	f
ale_linters#ruby#rubocop#Handle	vim/pack/minpac/start/ale/ale_linters/ruby/rubocop.vim	/^function! ale_linters#ruby#rubocop#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#ruby#GetCommand	vim/pack/minpac/start/ale/ale_linters/ruby/ruby.vim	/^function! ale_linters#ruby#ruby#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#ruby#GetExecutable	vim/pack/minpac/start/ale/ale_linters/ruby/ruby.vim	/^function! ale_linters#ruby#ruby#GetExecutable(buffer) abort$/;"	f
ale_linters#rust#cargo#GetCargoExecutable	vim/pack/minpac/start/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCargoExecutable(bufnr) abort$/;"	f
ale_linters#rust#cargo#GetCommand	vim/pack/minpac/start/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCommand(buffer, version_output) abort$/;"	f
ale_linters#rust#cargo#VersionCheck	vim/pack/minpac/start/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#VersionCheck(buffer) abort$/;"	f
ale_linters#rust#rls#GetCommand	vim/pack/minpac/start/ale/ale_linters/rust/rls.vim	/^function! ale_linters#rust#rls#GetCommand(buffer) abort$/;"	f
ale_linters#rust#rls#GetExecutable	vim/pack/minpac/start/ale/ale_linters/rust/rls.vim	/^function! ale_linters#rust#rls#GetExecutable(buffer) abort$/;"	f
ale_linters#rust#rls#GetProjectRoot	vim/pack/minpac/start/ale/ale_linters/rust/rls.vim	/^function! ale_linters#rust#rls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#rust#rustc#RustcCommand	vim/pack/minpac/start/ale/ale_linters/rust/rustc.vim	/^function! ale_linters#rust#rustc#RustcCommand(buffer) abort$/;"	f
ale_linters#sass#stylelint#GetCommand	vim/pack/minpac/start/ale/ale_linters/sass/stylelint.vim	/^function! ale_linters#sass#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#sass#stylelint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/sass/stylelint.vim	/^function! ale_linters#sass#stylelint#GetExecutable(buffer) abort$/;"	f
ale_linters#scala#fsc#GetCommand	vim/pack/minpac/start/ale/ale_linters/scala/fsc.vim	/^function! ale_linters#scala#fsc#GetCommand(buffer) abort$/;"	f
ale_linters#scala#fsc#GetExecutable	vim/pack/minpac/start/ale/ale_linters/scala/fsc.vim	/^function! ale_linters#scala#fsc#GetExecutable(buffer) abort$/;"	f
ale_linters#scala#scalac#GetCommand	vim/pack/minpac/start/ale/ale_linters/scala/scalac.vim	/^function! ale_linters#scala#scalac#GetCommand(buffer) abort$/;"	f
ale_linters#scala#scalac#GetExecutable	vim/pack/minpac/start/ale/ale_linters/scala/scalac.vim	/^function! ale_linters#scala#scalac#GetExecutable(buffer) abort$/;"	f
ale_linters#scala#scalastyle#GetCommand	vim/pack/minpac/start/ale/ale_linters/scala/scalastyle.vim	/^function! ale_linters#scala#scalastyle#GetCommand(buffer) abort$/;"	f
ale_linters#scala#scalastyle#Handle	vim/pack/minpac/start/ale/ale_linters/scala/scalastyle.vim	/^function! ale_linters#scala#scalastyle#Handle(buffer, lines) abort$/;"	f
ale_linters#scss#scsslint#Handle	vim/pack/minpac/start/ale/ale_linters/scss/scsslint.vim	/^function! ale_linters#scss#scsslint#Handle(buffer, lines) abort$/;"	f
ale_linters#scss#stylelint#GetCommand	vim/pack/minpac/start/ale/ale_linters/scss/stylelint.vim	/^function! ale_linters#scss#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#scss#stylelint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/scss/stylelint.vim	/^function! ale_linters#scss#stylelint#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#shell#GetCommand	vim/pack/minpac/start/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#GetCommand(buffer) abort$/;"	f
ale_linters#sh#shell#GetExecutable	vim/pack/minpac/start/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#shell#Handle	vim/pack/minpac/start/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#Handle(buffer, lines) abort$/;"	f
ale_linters#sh#shellcheck#GetCommand	vim/pack/minpac/start/ale/ale_linters/sh/shellcheck.vim	/^function! ale_linters#sh#shellcheck#GetCommand(buffer, version_output) abort$/;"	f
ale_linters#sh#shellcheck#GetDialectArgument	vim/pack/minpac/start/ale/ale_linters/sh/shellcheck.vim	/^function! ale_linters#sh#shellcheck#GetDialectArgument(buffer) abort$/;"	f
ale_linters#sh#shellcheck#GetExecutable	vim/pack/minpac/start/ale/ale_linters/sh/shellcheck.vim	/^function! ale_linters#sh#shellcheck#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#shellcheck#Handle	vim/pack/minpac/start/ale/ale_linters/sh/shellcheck.vim	/^function! ale_linters#sh#shellcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#sh#shellcheck#VersionCheck	vim/pack/minpac/start/ale/ale_linters/sh/shellcheck.vim	/^function! ale_linters#sh#shellcheck#VersionCheck(buffer) abort$/;"	f
ale_linters#slim#slimlint#GetCommand	vim/pack/minpac/start/ale/ale_linters/slim/slimlint.vim	/^function! ale_linters#slim#slimlint#GetCommand(buffer) abort$/;"	f
ale_linters#slim#slimlint#Handle	vim/pack/minpac/start/ale/ale_linters/slim/slimlint.vim	/^function! ale_linters#slim#slimlint#Handle(buffer, lines) abort$/;"	f
ale_linters#sml#smlnj_cm#GetCommand	vim/pack/minpac/start/ale/ale_linters/sml/smlnj_cm.vim	/^function! ale_linters#sml#smlnj_cm#GetCommand(buffer) abort$/;"	f
ale_linters#solidity#solhint#Handle	vim/pack/minpac/start/ale/ale_linters/solidity/solhint.vim	/^function! ale_linters#solidity#solhint#Handle(buffer, lines) abort$/;"	f
ale_linters#spec#rpmlint#GetCommand	vim/pack/minpac/start/ale/ale_linters/spec/rpmlint.vim	/^function! ale_linters#spec#rpmlint#GetCommand(buffer) abort$/;"	f
ale_linters#spec#rpmlint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/spec/rpmlint.vim	/^function! ale_linters#spec#rpmlint#GetExecutable(buffer) abort$/;"	f
ale_linters#spec#rpmlint#Handle	vim/pack/minpac/start/ale/ale_linters/spec/rpmlint.vim	/^function! ale_linters#spec#rpmlint#Handle(buffer, lines) abort$/;"	f
ale_linters#sql#sqlint#Handle	vim/pack/minpac/start/ale/ale_linters/sql/sqlint.vim	/^function! ale_linters#sql#sqlint#Handle(buffer, lines) abort$/;"	f
ale_linters#stylus#stylelint#GetCommand	vim/pack/minpac/start/ale/ale_linters/stylus/stylelint.vim	/^function! ale_linters#stylus#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#stylus#stylelint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/stylus/stylelint.vim	/^function! ale_linters#stylus#stylelint#GetExecutable(buffer) abort$/;"	f
ale_linters#swift#swiftlint#Handle	vim/pack/minpac/start/ale/ale_linters/swift/swiftlint.vim	/^function! ale_linters#swift#swiftlint#Handle(buffer, lines) abort$/;"	f
ale_linters#tcl#nagelfar#GetCommand	vim/pack/minpac/start/ale/ale_linters/tcl/nagelfar.vim	/^function! ale_linters#tcl#nagelfar#GetCommand(buffer) abort$/;"	f
ale_linters#tcl#nagelfar#GetExecutable	vim/pack/minpac/start/ale/ale_linters/tcl/nagelfar.vim	/^function! ale_linters#tcl#nagelfar#GetExecutable(buffer) abort$/;"	f
ale_linters#tcl#nagelfar#Handle	vim/pack/minpac/start/ale/ale_linters/tcl/nagelfar.vim	/^function! ale_linters#tcl#nagelfar#Handle(buffer, lines) abort$/;"	f
ale_linters#terraform#tflint#GetCommand	vim/pack/minpac/start/ale/ale_linters/terraform/tflint.vim	/^function! ale_linters#terraform#tflint#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#tflint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/terraform/tflint.vim	/^function! ale_linters#terraform#tflint#GetExecutable(buffer) abort$/;"	f
ale_linters#terraform#tflint#Handle	vim/pack/minpac/start/ale/ale_linters/terraform/tflint.vim	/^function! ale_linters#terraform#tflint#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#chktex#GetCommand	vim/pack/minpac/start/ale/ale_linters/tex/chktex.vim	/^function! ale_linters#tex#chktex#GetCommand(buffer) abort$/;"	f
ale_linters#tex#chktex#Handle	vim/pack/minpac/start/ale/ale_linters/tex/chktex.vim	/^function! ale_linters#tex#chktex#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#lacheck#GetCommand	vim/pack/minpac/start/ale/ale_linters/tex/lacheck.vim	/^function! ale_linters#tex#lacheck#GetCommand(buffer) abort$/;"	f
ale_linters#tex#lacheck#GetExecutable	vim/pack/minpac/start/ale/ale_linters/tex/lacheck.vim	/^function! ale_linters#tex#lacheck#GetExecutable(buffer) abort$/;"	f
ale_linters#tex#lacheck#Handle	vim/pack/minpac/start/ale/ale_linters/tex/lacheck.vim	/^function! ale_linters#tex#lacheck#Handle(buffer, lines) abort$/;"	f
ale_linters#thrift#thrift#GetCommand	vim/pack/minpac/start/ale/ale_linters/thrift/thrift.vim	/^function! ale_linters#thrift#thrift#GetCommand(buffer) abort$/;"	f
ale_linters#thrift#thrift#GetExecutable	vim/pack/minpac/start/ale/ale_linters/thrift/thrift.vim	/^function! ale_linters#thrift#thrift#GetExecutable(buffer) abort$/;"	f
ale_linters#thrift#thrift#Handle	vim/pack/minpac/start/ale/ale_linters/thrift/thrift.vim	/^function! ale_linters#thrift#thrift#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#tslint#GetCommand	vim/pack/minpac/start/ale/ale_linters/typescript/tslint.vim	/^function! ale_linters#typescript#tslint#GetCommand(buffer) abort$/;"	f
ale_linters#typescript#tslint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/typescript/tslint.vim	/^function! ale_linters#typescript#tslint#GetExecutable(buffer) abort$/;"	f
ale_linters#typescript#tslint#Handle	vim/pack/minpac/start/ale/ale_linters/typescript/tslint.vim	/^function! ale_linters#typescript#tslint#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#tsserver#GetExecutable	vim/pack/minpac/start/ale/ale_linters/typescript/tsserver.vim	/^function! ale_linters#typescript#tsserver#GetExecutable(buffer) abort$/;"	f
ale_linters#typescript#tsserver#GetProjectRoot	vim/pack/minpac/start/ale/ale_linters/typescript/tsserver.vim	/^function! ale_linters#typescript#tsserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#typescript#typecheck#Handle	vim/pack/minpac/start/ale/ale_linters/typescript/typecheck.vim	/^function! ale_linters#typescript#typecheck#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#iverilog#GetCommand	vim/pack/minpac/start/ale/ale_linters/verilog/iverilog.vim	/^function! ale_linters#verilog#iverilog#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#iverilog#Handle	vim/pack/minpac/start/ale/ale_linters/verilog/iverilog.vim	/^function! ale_linters#verilog#iverilog#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#verilator#GetCommand	vim/pack/minpac/start/ale/ale_linters/verilog/verilator.vim	/^function! ale_linters#verilog#verilator#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#verilator#Handle	vim/pack/minpac/start/ale/ale_linters/verilog/verilator.vim	/^function! ale_linters#verilog#verilator#Handle(buffer, lines) abort$/;"	f
ale_linters#vim#vint#GetCommand	vim/pack/minpac/start/ale/ale_linters/vim/vint.vim	/^function! ale_linters#vim#vint#GetCommand(buffer, version_output) abort$/;"	f
ale_linters#vim#vint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/vim/vint.vim	/^function! ale_linters#vim#vint#GetExecutable(buffer) abort$/;"	f
ale_linters#vim#vint#Handle	vim/pack/minpac/start/ale/ale_linters/vim/vint.vim	/^function! ale_linters#vim#vint#Handle(buffer, lines) abort$/;"	f
ale_linters#vim#vint#VersionCommand	vim/pack/minpac/start/ale/ale_linters/vim/vint.vim	/^function! ale_linters#vim#vint#VersionCommand(buffer) abort$/;"	f
ale_linters#xml#xmllint#GetCommand	vim/pack/minpac/start/ale/ale_linters/xml/xmllint.vim	/^function! ale_linters#xml#xmllint#GetCommand(buffer) abort$/;"	f
ale_linters#xml#xmllint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/xml/xmllint.vim	/^function! ale_linters#xml#xmllint#GetExecutable(buffer) abort$/;"	f
ale_linters#xml#xmllint#Handle	vim/pack/minpac/start/ale/ale_linters/xml/xmllint.vim	/^function! ale_linters#xml#xmllint#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#swaglint#GetCommand	vim/pack/minpac/start/ale/ale_linters/yaml/swaglint.vim	/^function! ale_linters#yaml#swaglint#GetCommand(buffer) abort$/;"	f
ale_linters#yaml#swaglint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/yaml/swaglint.vim	/^function! ale_linters#yaml#swaglint#GetExecutable(buffer) abort$/;"	f
ale_linters#yaml#swaglint#Handle	vim/pack/minpac/start/ale/ale_linters/yaml/swaglint.vim	/^function! ale_linters#yaml#swaglint#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#yamllint#GetCommand	vim/pack/minpac/start/ale/ale_linters/yaml/yamllint.vim	/^function! ale_linters#yaml#yamllint#GetCommand(buffer) abort$/;"	f
ale_linters#yaml#yamllint#GetExecutable	vim/pack/minpac/start/ale/ale_linters/yaml/yamllint.vim	/^function! ale_linters#yaml#yamllint#GetExecutable(buffer) abort$/;"	f
ale_linters#yaml#yamllint#Handle	vim/pack/minpac/start/ale/ale_linters/yaml/yamllint.vim	/^function! ale_linters#yaml#yamllint#Handle(buffer, lines) abort$/;"	f
algo	vim/pack/minpac/start/fzf/src/algo/algo.go	/^package algo$/;"	p
algo	vim/pack/minpac/start/fzf/src/algo/algo_test.go	/^package algo$/;"	p
algo	vim/pack/minpac/start/fzf/src/algo/normalize.go	/^package algo$/;"	p
all	vim/pack/minpac/opt/minpac/test/Make_win.mak	/^all:	newtests report$/;"	t
all	vim/pack/minpac/opt/minpac/test/Makefile	/^all:	newtestssilent report$/;"	t
all	vim/pack/minpac/start/colorizer/Makefile	/^all:$/;"	t
all	vim/pack/minpac/start/fzf/Makefile	/^all: target\/$(BINARY)$/;"	t
alloc16	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func alloc16(offset int, slab *util.Slab, size int) (int, []int16) {$/;"	f	package:algo
alloc32	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func alloc32(offset int, slab *util.Slab, size int) (int, []int32) {$/;"	f	package:algo
allowLoop	eslintrc.json	/^    "no-labels": ["error", { "allowLoop": false, "allowSwitch": false }],$/;"	b	object:rules.no-labels.1
allowMultiplePropertiesPerLine	eslintrc.json	/^    "object-property-newline": ["error", { "allowMultiplePropertiesPerLine": true }],$/;"	b	object:rules.object-property-newline.1
allowSamePrecedence	eslintrc.json	/^      "allowSamePrecedence": true$/;"	b	object:rules.no-mixed-operators.1
allowShortCircuit	eslintrc.json	/^    "no-unused-expressions": ["error", { "allowShortCircuit": true, "allowTernary": true, "allow/;"	b	object:rules.no-unused-expressions.1
allowSingleLine	eslintrc.json	/^    "brace-style": ["error", "1tbs", { "allowSingleLine": true }],$/;"	b	object:rules.brace-style.2
allowSwitch	eslintrc.json	/^    "no-labels": ["error", { "allowLoop": false, "allowSwitch": false }],$/;"	b	object:rules.no-labels.1
allowTaggedTemplates	eslintrc.json	/^    "no-unused-expressions": ["error", { "allowShortCircuit": true, "allowTernary": true, "allow/;"	b	object:rules.no-unused-expressions.1
allowTemplateLiterals	eslintrc.json	/^    "quotes": ["error", "single", { "avoidEscape": true, "allowTemplateLiterals": true }],$/;"	b	object:rules.quotes.2
allowTernary	eslintrc.json	/^    "no-unused-expressions": ["error", { "allowShortCircuit": true, "allowTernary": true, "allow/;"	b	object:rules.no-unused-expressions.1
amd	eslintrc.json	/^    "amd": false,$/;"	b	object:env
animate	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^def animate(canvas, fn, delay=1.\/24, *args, **kwargs):$/;"	f
animation	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def animation(stdscr):$/;"	f	function:animate	file:
ansi	vim/pack/minpac/start/fzf/src/terminal.go	/^	ansi       bool$/;"	m	struct:fzf.Terminal
ansiOffset	vim/pack/minpac/start/fzf/src/ansi.go	/^type ansiOffset struct {$/;"	s	package:fzf
ansiRegex	vim/pack/minpac/start/fzf/src/ansi.go	/^var ansiRegex *regexp.Regexp$/;"	v	package:fzf
ansiState	vim/pack/minpac/start/fzf/src/ansi.go	/^type ansiState struct {$/;"	s	package:fzf
answer	vim/pack/minpac/start/ale/test/json_files/testfile.json	/^{"answer":42}$/;"	n
any_include?	vim/pack/minpac/start/fzf/test/test_go.rb	/^          def any_include?(val)$/;"	f	method:until
append	vim/pack/minpac/start/fzf/src/history.go	/^func (h *History) append(line string) error {$/;"	f	unknown:fzf.History
append_line	vim/pack/minpac/start/fzf/install	/^append_line() {$/;"	f
argparser	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/image2term.py	/^def argparser():$/;"	f
args	eslintrc.json	/^    "no-unused-vars": ["error", { "vars": "all", "args": "none", "ignoreRestSiblings": true }],$/;"	s	object:rules.no-unused-vars.1
args	vim/pack/minpac/opt/minpac/tools/dl-kaoriya-vim.py	/^args = parser.parse_args()$/;"	v
args=	vim/pack/minpac/start/fzf/bin/fzf-tmux	/^args=()$/;"	f
arguments	eslintrc.json	/^      "CallExpression": ["error", { "arguments": 1 }],$/;"	n	object:rules.CallExpression.1
arrays	eslintrc.json	/^      "arrays": "never",$/;"	s	object:rules.comma-dangle.1
arrow-spacing	eslintrc.json	/^    "arrow-spacing": ["error", { "before": true, "after": true }],$/;"	a	object:rules
asciiFuzzyIndex	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func asciiFuzzyIndex(input *util.Chars, pattern []rune, caseSensitive bool) int {$/;"	f	package:algo
ask	vim/pack/minpac/start/fzf/install	/^ask() {$/;"	f
assert	vim/pack/minpac/start/fzf/src/merger_test.go	/^func assert(t *testing.T, cond bool, msg ...string) {$/;"	f	package:fzf
assertMatch	vim/pack/minpac/start/fzf/src/algo/algo_test.go	/^func assertMatch(t *testing.T, fun Algo, caseSensitive, forward bool, input, pattern string, sid/;"	f	package:algo
assertMatch2	vim/pack/minpac/start/fzf/src/algo/algo_test.go	/^func assertMatch2(t *testing.T, fun Algo, caseSensitive, normalize, forward bool, input, pattern/;"	f	package:algo
asset_time	vim/pack/minpac/opt/minpac/tools/dl-kaoriya-vim.py	/^    asset_time = time.strptime(asset['updated_at'], '%Y-%m-%dT%H:%M:%SZ')$/;"	v
at	vim/pack/minpac/start/fzf/src/terminal.go	/^	at   time.Time$/;"	m	struct:fzf.selectedItem
atof	vim/pack/minpac/start/fzf/src/options.go	/^func atof(str string) float64 {$/;"	f	package:fzf
atoi	vim/pack/minpac/start/fzf/src/options.go	/^func atoi(str string) int {$/;"	f	package:fzf
atoi	vim/pack/minpac/start/fzf/src/tui/light.go	/^func atoi(s string, defaultValue int) int {$/;"	f	package:tui
attr	vim/pack/minpac/start/fzf/src/ansi.go	/^	attr tui.Attr$/;"	m	struct:fzf.ansiState
attr	vim/pack/minpac/start/fzf/src/result.go	/^	attr   tui.Attr$/;"	m	struct:fzf.colorOffset
attrCodes	vim/pack/minpac/start/fzf/src/tui/light.go	/^func attrCodes(attr Attr) []string {$/;"	f	package:tui
attrFor	vim/pack/minpac/start/fzf/src/tui/tui.go	/^func attrFor(color ColorPair, attr Attr) Attr {$/;"	f	package:tui
avoidEscape	eslintrc.json	/^    "quotes": ["error", "single", { "avoidEscape": true, "allowTemplateLiterals": true }],$/;"	b	object:rules.quotes.2
awkBlack	vim/pack/minpac/start/fzf/src/tokenizer.go	/^	awkBlack$/;"	c	package:fzf
awkNil	vim/pack/minpac/start/fzf/src/tokenizer.go	/^	awkNil = iota$/;"	c	package:fzf
awkTokenizer	vim/pack/minpac/start/fzf/src/tokenizer.go	/^func awkTokenizer(input string) ([]string, int) {$/;"	f	package:fzf
awkWhite	vim/pack/minpac/start/fzf/src/tokenizer.go	/^	awkWhite$/;"	c	package:fzf
b:current_syntax	vim/pack/minpac/start/ale/syntax/ale-fix-suggest.vim	/^let b:current_syntax = 'ale-fix-suggest'$/;"	v
b:current_syntax	vim/pack/minpac/start/ale/syntax/ale-preview-selection.vim	/^let b:current_syntax = 'ale-preview-selection'$/;"	v
b:current_syntax	vim/pack/minpac/start/tagbar/syntax/tagbar.vim	/^let b:current_syntax = "tagbar"$/;"	v
b:match_ignorecase	vimrc	/^let b:match_ignorecase = 1$/;"	v
back	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def back(self, step):$/;"	m	class:Turtle
balanced	eslintrc.json	/^      "block": { "balanced": true, "markers": ["*package", "!", ",", ":", "::", "flow-include"],/;"	b	object:rules.spaced-comment.2.block
bases	vim/colors/neodark.vim	/^  let bases = s:generate_base_colors(g:neodark#background)$/;"	v
bash	vim/pack/minpac/start/fzf/test/test_go.rb	/^    def bash$/;"	S	class:Shell
basicMatch	vim/pack/minpac/start/fzf/src/pattern.go	/^func (p *Pattern) basicMatch(item *Item, withPos bool, slab *util.Slab) (Offset, int, *[]int) {$/;"	f	unknown:fzf.Pattern
before	eslintrc.json	/^    "arrow-spacing": ["error", { "before": true, "after": true }],$/;"	b	object:rules.arrow-spacing.1
before	eslintrc.json	/^    "comma-spacing": ["error", { "before": false, "after": true }],$/;"	b	object:rules.comma-spacing.1
before	eslintrc.json	/^    "generator-star-spacing": ["error", { "before": true, "after": true }],$/;"	b	object:rules.generator-star-spacing.1
before	eslintrc.json	/^    "keyword-spacing": ["error", { "before": true, "after": true }],$/;"	b	object:rules.keyword-spacing.1
before	eslintrc.json	/^    "semi-spacing": ["error", { "before": false, "after": true }],$/;"	b	object:rules.semi-spacing.1
beforeColon	eslintrc.json	/^    "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],$/;"	b	object:rules.key-spacing.1
begin	vim/pack/minpac/start/fzf/src/tokenizer.go	/^	begin int$/;"	m	struct:fzf.Range
bg	vim/pack/minpac/start/fzf/src/ansi.go	/^	bg   tui.Color$/;"	m	struct:fzf.ansiState
bg	vim/pack/minpac/start/fzf/src/tui/light.go	/^	bg       Color$/;"	m	struct:tui.LightWindow
bg	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	bg Color$/;"	m	struct:tui.ColorPair
bin/fzf	vim/pack/minpac/start/fzf/Makefile	/^bin\/fzf: target\/$(BINARY) | bin$/;"	t
binaryLiterals	eslintrc.json	/^      "binaryLiterals": false,$/;"	b	object:parserOptions.ecmaFeatures
bird	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^bird = []$/;"	v
bird_map	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^bird_map = [$/;"	v
bk	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    bk = back$/;"	v	class:Turtle
block	eslintrc.json	/^      "block": { "balanced": true, "markers": ["*package", "!", ",", ":", "::", "flow-include"],/;"	o	object:rules.spaced-comment.2
block-scoped-var	eslintrc.json	/^    "block-scoped-var": 0,$/;"	n	object:rules
block-spacing	eslintrc.json	/^    "block-spacing": ["error", "always"],$/;"	a	object:rules
blockBindings	eslintrc.json	/^      "blockBindings": false,$/;"	b	object:parserOptions.ecmaFeatures
blocks	eslintrc.json	/^    "padded-blocks": ["error", { "blocks": "never", "switches": "never", "classes": "never" }],$/;"	s	object:rules.padded-blocks.1
body	eslintrc.json	/^      "FunctionDeclaration": ["error", { "parameters": 1, "body": 1 }],$/;"	n	object:rules.FunctionDeclaration.1
body	eslintrc.json	/^      "FunctionExpression": ["error", { "parameters": 1, "body": 1 }],$/;"	n	object:rules.FunctionExpression.1
bonusAt	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func bonusAt(input *util.Chars, idx int) int16 {$/;"	f	package:algo
bonusBoundary	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	bonusBoundary = scoreMatch \/ 2$/;"	c	package:algo
bonusCamel123	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	bonusCamel123 = bonusBoundary + scoreGapExtention$/;"	c	package:algo
bonusConsecutive	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	bonusConsecutive = -(scoreGapStart + scoreGapExtention)$/;"	c	package:algo
bonusFirstCharMultiplier	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	bonusFirstCharMultiplier = 2$/;"	c	package:algo
bonusFor	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func bonusFor(prevClass charClass, class charClass) int16 {$/;"	f	package:algo
bonusNonWord	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	bonusNonWord = scoreMatch \/ 2$/;"	c	package:algo
border	vim/pack/minpac/start/fzf/src/terminal.go	/^	border     tui.Window$/;"	m	struct:fzf.Terminal
border	vim/pack/minpac/start/fzf/src/tui/light.go	/^	border   BorderStyle$/;"	m	struct:tui.LightWindow
borderStyle	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	borderStyle BorderStyle$/;"	m	struct:tui.TcellWindow
bordered	vim/pack/minpac/start/fzf/src/terminal.go	/^	bordered   bool$/;"	m	struct:fzf.Terminal
brace-style	eslintrc.json	/^    "brace-style": 0,$/;"	n	object:rules
brace-style	eslintrc.json	/^    "brace-style": ["error", "1tbs", { "allowSingleLine": true }],$/;"	a	object:rules
braille_char_offset	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^braille_char_offset = 0x2800$/;"	v
browser	eslintrc.json	/^    "browser": false,$/;"	b	object:env
buffer	vim/pack/minpac/start/fzf/src/tui/light.go	/^	buffer        []byte$/;"	m	struct:tui.LightRenderer
buildCacheKey	vim/pack/minpac/start/fzf/src/pattern.go	/^func (p *Pattern) buildCacheKey() string {$/;"	f	unknown:fzf.Pattern
buildLists	vim/pack/minpac/start/fzf/src/merger_test.go	/^func buildLists(partiallySorted bool) ([][]Result, []Result) {$/;"	f	package:fzf
buildPlusList	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) buildPlusList(template string, forcePlus bool) (bool, []*Item) {$/;"	f	unknown:fzf.Terminal
buildResult	vim/pack/minpac/start/fzf/src/result.go	/^func buildResult(item *Item, offsets []Offset, score int) Result {$/;"	f	package:fzf
byBegin	vim/pack/minpac/start/fzf/src/options.go	/^	byBegin$/;"	c	package:fzf
byEnd	vim/pack/minpac/start/fzf/src/options.go	/^	byEnd$/;"	c	package:fzf
byLength	vim/pack/minpac/start/fzf/src/options.go	/^	byLength$/;"	c	package:fzf
byScore	vim/pack/minpac/start/fzf/src/options.go	/^	byScore criterion = iota$/;"	c	package:fzf
byTimeOrder	vim/pack/minpac/start/fzf/src/terminal.go	/^type byTimeOrder []selectedItem$/;"	t	package:fzf
c	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/speed_test.py	/^c = Canvas()$/;"	v
c	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^    c = urllib2.urlopen(url).read()$/;"	v
cache	vim/pack/minpac/start/fzf/src/cache.go	/^	cache map[*Chunk]*queryCache$/;"	m	struct:fzf.ChunkCache
cacheKey	vim/pack/minpac/start/fzf/src/pattern.go	/^	cacheKey      string$/;"	m	struct:fzf.Pattern
cacheable	vim/pack/minpac/start/fzf/src/merger.go	/^func (mg *Merger) cacheable() bool {$/;"	f	unknown:fzf.Merger
cacheable	vim/pack/minpac/start/fzf/src/pattern.go	/^	cacheable     bool$/;"	m	struct:fzf.Pattern
calculateScore	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func calculateScore(caseSensitive bool, normalize bool, text *util.Chars, pattern []rune, sidx i/;"	f	package:algo
calculateSize	vim/pack/minpac/start/fzf/src/terminal.go	/^func calculateSize(base int, size sizeSpec, margin int, minSize int) int {$/;"	f	package:fzf
camelcase	eslintrc.json	/^    "camelcase": 0,$/;"	n	object:rules
camelcase	eslintrc.json	/^    "camelcase": ["error", { "properties": "never" }],$/;"	a	object:rules
can	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^    can = Canvas()$/;"	v
capIsNew	eslintrc.json	/^    "new-cap": ["error", { "newIsCap": true, "capIsNew": false }],$/;"	b	object:rules.new-cap.1
capture	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def capture(pane = 0)$/;"	f
caseSensitive	vim/pack/minpac/start/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.Pattern
caseSensitive	vim/pack/minpac/start/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.term
charClass	vim/pack/minpac/start/fzf/src/algo/algo.go	/^type charClass int$/;"	t	package:algo
charClassOf	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func charClassOf(char rune) charClass {$/;"	f	package:algo
charClassOfAscii	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func charClassOfAscii(char rune) charClass {$/;"	f	package:algo
charClassOfNonAscii	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func charClassOfNonAscii(char rune) charClass {$/;"	f	package:algo
charLetter	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	charLetter$/;"	c	package:algo
charLower	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	charLower$/;"	c	package:algo
charNonWord	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	charNonWord charClass = iota$/;"	c	package:algo
charNumber	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	charNumber$/;"	c	package:algo
charUpper	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	charUpper$/;"	c	package:algo
checkAscii	vim/pack/minpac/start/fzf/src/util/chars.go	/^func checkAscii(bytes []byte) (bool, int) {$/;"	f	package:util
checkLoops	eslintrc.json	/^    "no-constant-condition": ["error", { "checkLoops": false }],$/;"	b	object:rules.no-constant-condition.1
check_binary	vim/pack/minpac/start/fzf/install	/^check_binary() {$/;"	f
check_collision	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^def check_collision(bird_pos, bar):$/;"	f
check_errors	vim/pack/minpac/start/ale/test/script/custom-linting-rules	/^check_errors() {$/;"	f
chunkSize	vim/pack/minpac/start/fzf/src/constants.go	/^	chunkSize int = 100$/;"	c	package:fzf
chunks	vim/pack/minpac/start/fzf/src/chunklist.go	/^	chunks []*Chunk$/;"	m	struct:fzf.ChunkList
chunks	vim/pack/minpac/start/fzf/src/matcher.go	/^	chunks  []*Chunk$/;"	m	struct:fzf.MatchRequest
chunks	vim/pack/minpac/start/fzf/src/merger.go	/^	chunks  *[]*Chunk$/;"	m	struct:fzf.Merger
classes	eslintrc.json	/^    "no-use-before-define": ["error", { "functions": false, "classes": false, "variables": false/;"	b	object:rules.no-use-before-define.1
classes	eslintrc.json	/^    "padded-blocks": ["error", { "blocks": "never", "switches": "never", "classes": "never" }],$/;"	s	object:rules.padded-blocks.1
clean	vim/pack/minpac/opt/minpac/test/Make_win.mak	/^clean:$/;"	t
clean	vim/pack/minpac/opt/minpac/test/Makefile	/^clean:$/;"	t
clean	vim/pack/minpac/start/fzf/Makefile	/^clean:$/;"	t
cleanExit	vim/pack/minpac/start/fzf/src/terminal.go	/^	cleanExit  bool$/;"	m	struct:fzf.Terminal
cleanse	vim/pack/minpac/start/fzf/src/tui/light.go	/^func cleanse(str string) string {$/;"	f	package:tui
cleanup	vim/pack/minpac/start/fzf/bin/fzf-tmux	/^cleanup() {$/;"	f
clear	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def clear(self):$/;"	m	class:Canvas
clearChunkCache	vim/pack/minpac/start/fzf/src/pattern.go	/^func clearChunkCache() {$/;"	f	package:fzf
clearOnExit	vim/pack/minpac/start/fzf/src/tui/light.go	/^	clearOnExit   bool$/;"	m	struct:tui.LightRenderer
clearPatternCache	vim/pack/minpac/start/fzf/src/pattern.go	/^func clearPatternCache() {$/;"	f	package:fzf
clickY	vim/pack/minpac/start/fzf/src/tui/light.go	/^	clickY        []int$/;"	m	struct:tui.LightRenderer
clickY	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	clickY       []int$/;"	m	struct:tui.FullscreenRenderer
closeminimap	vim/pack/minpac/start/vim-minimap/autoload/minimap.py	/^def closeminimap():$/;"	f
co	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^nmap <silent><expr> co <SID>legacy_option_map(nr2char(getchar()))$/;"	m
colBlack	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	colBlack Color = iota$/;"	c	package:tui
colBlue	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	colBlue$/;"	c	package:tui
colCyan	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	colCyan$/;"	c	package:tui
colDefault	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	colDefault         = -1$/;"	c	package:tui
colGreen	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	colGreen$/;"	c	package:tui
colMagenta	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	colMagenta$/;"	c	package:tui
colRed	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	colRed$/;"	c	package:tui
colUndefined	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	colUndefined Color = -2$/;"	c	package:tui
colWhite	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	colWhite$/;"	c	package:tui
colYellow	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	colYellow$/;"	c	package:tui
color	vim/colors/twilight256.vim	/^    fun <SID>color(r, g, b)$/;"	f
color	vim/pack/minpac/start/fzf/src/ansi.go	/^	color  ansiState$/;"	m	struct:fzf.ansiOffset
color	vim/pack/minpac/start/fzf/src/result.go	/^	color  tui.ColorPair$/;"	m	struct:fzf.colorOffset
color	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	color       bool$/;"	m	struct:tui.TcellWindow
color-vader-output	vim/pack/minpac/start/ale/test/script/run-vader-tests	/^function color-vader-output() {$/;"	f
colorCodes	vim/pack/minpac/start/fzf/src/tui/light.go	/^func colorCodes(fg Color, bg Color) []string {$/;"	f	package:tui
colorOffset	vim/pack/minpac/start/fzf/src/result.go	/^type colorOffset struct {$/;"	s	package:fzf
colorOffsets	vim/pack/minpac/start/fzf/src/result.go	/^func (result *Result) colorOffsets(matchOffsets []Offset, theme *tui.ColorTheme, color tui.Color/;"	f	unknown:fzf.Result
colored	vim/pack/minpac/start/fzf/src/ansi.go	/^func (s *ansiState) colored() bool {$/;"	f	unknown:fzf.ansiState
colored	vim/pack/minpac/start/fzf/src/tui/light.go	/^	colored  bool$/;"	m	struct:tui.LightWindow
colorizer#ColorClear	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! colorizer#ColorClear() "{{{1$/;"	f
colorizer#ColorHighlight	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! colorizer#ColorHighlight(update, ...) "{{{1$/;"	f
colorizer#ColorToggle	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! colorizer#ColorToggle() "{{{1$/;"	f
colors	vim/pack/minpac/start/fzf/src/item.go	/^	colors      *[]ansiOffset \/\/ 8$/;"	m	struct:fzf.Item
colors_name	vim/colors/twilight.vim	/^let colors_name = "twilight"$/;"	v
comma-dangle	eslintrc.json	/^    "comma-dangle": ["error", {$/;"	a	object:rules
comma-spacing	eslintrc.json	/^    "comma-spacing": 0,$/;"	n	object:rules
comma-spacing	eslintrc.json	/^    "comma-spacing": ["error", { "before": false, "after": true }],$/;"	a	object:rules
comma-style	eslintrc.json	/^    "comma-style": 0,$/;"	n	object:rules
comma-style	eslintrc.json	/^    "comma-style": ["error", "last"],$/;"	a	object:rules
command	vim/pack/minpac/start/fzf/src/options.go	/^	command  string$/;"	m	struct:fzf.previewOpts
command for listing path candidates.	vim/pack/minpac/start/fzf/README.md	/^# command for listing path candidates.$/;"	c
compareRanks	vim/pack/minpac/start/fzf/src/result_others.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf
compareRanks	vim/pack/minpac/start/fzf/src/result_x86.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf
complexity	eslintrc.json	/^    "complexity": 0,$/;"	n	object:rules
cond	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^	cond   *sync.Cond$/;"	m	struct:util.EventBox
confirm	vim/pack/minpac/start/fzf/uninstall	/^confirm() {$/;"	f
consistent-return	eslintrc.json	/^    "consistent-return": 0,$/;"	n	object:rules
consistent-this	eslintrc.json	/^    "consistent-this": 0,$/;"	n	object:rules
consoleDevice	vim/pack/minpac/start/fzf/src/tui/light.go	/^const consoleDevice string = "\/dev\/tty"$/;"	c	package:tui
constrain	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) constrain() {$/;"	f	unknown:fzf.Terminal
constructor-super	eslintrc.json	/^    "constructor-super": "error",$/;"	s	object:rules
coordinatorDelayMax	vim/pack/minpac/start/fzf/src/constants.go	/^	coordinatorDelayMax  time.Duration = 100 * time.Millisecond$/;"	c	package:fzf
coordinatorDelayStep	vim/pack/minpac/start/fzf/src/constants.go	/^	coordinatorDelayStep time.Duration = 10 * time.Millisecond$/;"	c	package:fzf
copySlice	vim/pack/minpac/start/fzf/src/terminal.go	/^func copySlice(slice []rune) []rune {$/;"	f	package:fzf
count	vim/pack/minpac/start/fzf/src/chunklist.go	/^	count int$/;"	m	struct:fzf.Chunk
count	vim/pack/minpac/start/fzf/src/merger.go	/^	count   int$/;"	m	struct:fzf.Merger
count	vim/pack/minpac/start/fzf/src/terminal.go	/^	count      int$/;"	m	struct:fzf.Terminal
counts	vim/pack/minpac/start/fzf/test/test_go.rb	/^          def counts$/;"	f	method:until
cprint2	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) cprint2(fg Color, bg Color, attr Attr, text string) {$/;"	f	unknown:tui.LightWindow
create_file	vim/pack/minpac/start/fzf/install	/^create_file() {$/;"	f
criterion	vim/pack/minpac/start/fzf/src/options.go	/^type criterion int$/;"	t	package:fzf
csi	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) csi(code string) {$/;"	f	unknown:tui.LightRenderer
csi	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) csi(code string) {$/;"	f	unknown:tui.LightWindow
csiColor	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) csiColor(fg Color, bg Color, attr Attr) bool {$/;"	f	unknown:tui.LightWindow
curly	eslintrc.json	/^    "curly": 0,$/;"	n	object:rules
curly	eslintrc.json	/^    "curly": ["error", "multi-line"],$/;"	a	object:rules
current	vim/pack/minpac/start/fzf/src/history.go	/^func (h *History) current() string {$/;"	f	unknown:fzf.History
current	vim/pack/minpac/start/fzf/src/terminal.go	/^	current  bool$/;"	m	struct:fzf.itemLine
currentItem	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) currentItem() *Item {$/;"	f	unknown:fzf.Terminal
current_compiler	vim/pack/minpac/start/vim-rails/compiler/rails.vim	/^let current_compiler = "rails"$/;"	v
cursor	vim/pack/minpac/start/fzf/src/history.go	/^	cursor   int$/;"	m	struct:fzf.History
cursors	vim/pack/minpac/start/fzf/src/merger.go	/^	cursors []int$/;"	m	struct:fzf.Merger
cx	vim/pack/minpac/start/fzf/src/terminal.go	/^	cx         int$/;"	m	struct:fzf.Terminal
cy	vim/pack/minpac/start/fzf/src/terminal.go	/^	cy         int$/;"	m	struct:fzf.Terminal
cycle	vim/pack/minpac/start/fzf/src/terminal.go	/^	cycle      bool$/;"	m	struct:fzf.Terminal
debugV2	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func debugV2(T []rune, pattern []rune, F []int32, lastIdx int, H []int16, C []int16) {$/;"	f	package:algo
default-case	eslintrc.json	/^    "default-case": 0,$/;"	n	object:rules
defaultAssignment	eslintrc.json	/^    "no-unneeded-ternary": ["error", { "defaultAssignment": false }],$/;"	b	object:rules.no-unneeded-ternary.1
defaultCommand	vim/pack/minpac/start/fzf/src/constants.go	/^var defaultCommand string$/;"	v	package:fzf
defaultEscDelay	vim/pack/minpac/start/fzf/src/tui/light.go	/^	defaultEscDelay = 100$/;"	c	package:tui
defaultHeight	vim/pack/minpac/start/fzf/src/tui/light.go	/^	defaultHeight = 24$/;"	c	package:tui
defaultHistoryMax	vim/pack/minpac/start/fzf/src/constants.go	/^	defaultHistoryMax int = 1000$/;"	c	package:fzf
defaultJumpLabels	vim/pack/minpac/start/fzf/src/constants.go	/^	defaultJumpLabels string = "asdfghjklqwertyuiopzxcvbnm1234567890ASDFGHJKLQWERTYUIOPZXCVBNM`~;:,/;"	c	package:fzf
defaultKeymap	vim/pack/minpac/start/fzf/src/terminal.go	/^func defaultKeymap() map[int][]action {$/;"	f	package:fzf
defaultMargin	vim/pack/minpac/start/fzf/src/options.go	/^func defaultMargin() [4]sizeSpec {$/;"	f	package:fzf
defaultOptions	vim/pack/minpac/start/fzf/src/options.go	/^func defaultOptions() *Options {$/;"	f	package:fzf
defaultParams	eslintrc.json	/^      "defaultParams": false,$/;"	b	object:parserOptions.ecmaFeatures
defaultTheme	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.LightRenderer
defaultTheme	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.FullscreenRenderer
defaultWidth	vim/pack/minpac/start/fzf/src/tui/light.go	/^	defaultWidth  = 80$/;"	c	package:tui
delChar	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) delChar() bool {$/;"	f	unknown:fzf.Terminal
delimNil	vim/pack/minpac/start/fzf/src/reader.go	/^	delimNil bool$/;"	m	struct:fzf.Reader
delimiter	vim/pack/minpac/start/fzf/src/pattern.go	/^	delimiter     Delimiter$/;"	m	struct:fzf.Pattern
delimiter	vim/pack/minpac/start/fzf/src/terminal.go	/^	delimiter  Delimiter$/;"	m	struct:fzf.Terminal
delimiterRegexp	vim/pack/minpac/start/fzf/src/options.go	/^func delimiterRegexp(str string) Delimiter {$/;"	f	package:fzf
delta	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^delta = frame_no \/ fps$/;"	v
deselectItem	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) deselectItem(item *Item) {$/;"	f	unknown:fzf.Terminal
devPrefixes	vim/pack/minpac/start/fzf/src/tui/ttyname_unix.go	/^var devPrefixes = [...]string{"\/dev\/pts\/", "\/dev\/"}$/;"	v	package:tui
displayWidth	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) displayWidth(runes []rune) int {$/;"	f	unknown:fzf.Terminal
displayWidth	vim/pack/minpac/start/fzf/src/tui/light.go	/^	displayWidth int$/;"	m	struct:tui.wrappedLine
displayWidthWithLimit	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) displayWidthWithLimit(runes []rune, prefixWidth int, limit int) int {$/;"	f	unknown:fzf.Terminal
document	eslintrc.json	/^    "document": false,$/;"	b	object:globals
dot-location	eslintrc.json	/^    "dot-location": ["error", "property"],$/;"	a	object:rules
dot-notation	eslintrc.json	/^    "dot-notation": 0,$/;"	n	object:rules
doubleClickDuration	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	doubleClickDuration = 500 * time.Millisecond$/;"	c	package:tui
down	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def down(self):$/;"	m	class:Turtle
download	vim/pack/minpac/start/fzf/install	/^download() {$/;"	f
draw	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^    def draw(self):$/;"	m	class:Bar
draw	vim/pack/minpac/start/vim-minimap/autoload/minimap.py	/^        def draw(lengths,indents, startline=0):$/;"	f	function:updateminimap	file:
drawBorder	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorder() {$/;"	f	unknown:tui.LightWindow
drawBorder	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) drawBorder(around bool) {$/;"	f	unknown:tui.TcellWindow
drawBorderAround	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderAround() {$/;"	f	unknown:tui.LightWindow
drawBorderHorizontal	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderHorizontal() {$/;"	f	unknown:tui.LightWindow
dupeTheme	vim/pack/minpac/start/fzf/src/options.go	/^func dupeTheme(theme *tui.ColorTheme) *tui.ColorTheme {$/;"	f	package:fzf
ecmaFeatures	eslintrc.json	/^    "ecmaFeatures": {$/;"	o	object:parserOptions
ecmaVersion	eslintrc.json	/^    "ecmaVersion": 9,$/;"	n	object:parserOptions
emptyLine	vim/pack/minpac/start/fzf/src/terminal.go	/^var emptyLine = itemLine{}$/;"	v	package:fzf
enabled	vim/pack/minpac/start/fzf/src/terminal.go	/^	enabled bool$/;"	m	struct:fzf.previewer
end	vim/pack/minpac/start/fzf/src/tokenizer.go	/^	end   int$/;"	m	struct:fzf.Range
end_with?	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def end_with?(_str)$/;"	f	class:NilClass
env	eslintrc.json	/^  "env": {$/;"	o
envlist	vim/pack/minpac/start/ale/test/command_callback/python_paths/namespace_package_tox/tox.ini	/^envlist =$/;"	k	section:tox
eol-last	eslintrc.json	/^    "eol-last": "error",$/;"	s	object:rules
eol-last	eslintrc.json	/^    "eol-last": 0,$/;"	n	object:rules
eqeqeq	eslintrc.json	/^    "eqeqeq": 0,$/;"	n	object:rules
eqeqeq	eslintrc.json	/^    "eqeqeq": ["error", "always", { "null": "ignore" }],$/;"	a	object:rules
equals	vim/pack/minpac/start/fzf/src/ansi.go	/^func (s *ansiState) equals(t *ansiState) bool {$/;"	f	unknown:fzf.ansiState
error	vim/pack/minpac/opt/minpac/test/runtest.vim	/^  let error = 'Screen size too small! Tests require at least 24 lines with 80 characters'$/;"	v
errorExit	vim/pack/minpac/start/fzf/src/options.go	/^func errorExit(msg string) {$/;"	f	package:fzf
errorExit	vim/pack/minpac/start/fzf/src/tui/tui.go	/^func errorExit(message string) {$/;"	f	package:tui
es6	eslintrc.json	/^    "es6": true,$/;"	b	object:env
escDelay	vim/pack/minpac/start/fzf/src/tui/light.go	/^	escDelay      int$/;"	m	struct:tui.LightRenderer
escPollInterval	vim/pack/minpac/start/fzf/src/tui/light.go	/^	escPollInterval = 5$/;"	c	package:tui
escSequence	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) escSequence(sz *int) Event {$/;"	f	unknown:tui.LightRenderer
escapedColon	vim/pack/minpac/start/fzf/src/options.go	/^	escapedColon = 0$/;"	c	package:fzf
escapedComma	vim/pack/minpac/start/fzf/src/options.go	/^	escapedComma = 1$/;"	c	package:fzf
escapedPlus	vim/pack/minpac/start/fzf/src/options.go	/^	escapedPlus  = 2$/;"	c	package:fzf
event	vim/pack/minpac/start/fzf/src/reader.go	/^	event    int32$/;"	m	struct:fzf.Reader
eventBox	vim/pack/minpac/start/fzf/src/matcher.go	/^	eventBox       *util.EventBox$/;"	m	struct:fzf.Matcher
eventBox	vim/pack/minpac/start/fzf/src/reader.go	/^	eventBox *util.EventBox$/;"	m	struct:fzf.Reader
eventBox	vim/pack/minpac/start/fzf/src/terminal.go	/^	eventBox   *util.EventBox$/;"	m	struct:fzf.Terminal
events	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^	events Events$/;"	m	struct:util.EventBox
exceptions	eslintrc.json	/^      "block": { "balanced": true, "markers": ["*package", "!", ",", ":", "::", "flow-include"],/;"	a	object:rules.spaced-comment.2.block
executeCommand	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) executeCommand(template string, forcePlus bool, background bool) {$/;"	f	unknown:fzf.Terminal
executeRegexp	vim/pack/minpac/start/fzf/src/options.go	/^var executeRegexp *regexp.Regexp$/;"	v	package:fzf
exitError	vim/pack/minpac/start/fzf/src/constants.go	/^	exitError     = 2$/;"	c	package:fzf
exitInterrupt	vim/pack/minpac/start/fzf/src/constants.go	/^	exitInterrupt = 130$/;"	c	package:fzf
exitNoMatch	vim/pack/minpac/start/fzf/src/constants.go	/^	exitNoMatch   = 1$/;"	c	package:fzf
exitOk	vim/pack/minpac/start/fzf/src/constants.go	/^	exitOk        = 0$/;"	c	package:fzf
expect	vim/pack/minpac/start/fzf/src/terminal.go	/^	expect     map[int]string$/;"	m	struct:fzf.Terminal
exports	eslintrc.json	/^      "exports": "never",$/;"	s	object:rules.comma-dangle.1
extended	vim/pack/minpac/start/fzf/src/pattern.go	/^	extended      bool$/;"	m	struct:fzf.Pattern
extendedMatch	vim/pack/minpac/start/fzf/src/pattern.go	/^func (p *Pattern) extendedMatch(item *Item, withPos bool, slab *util.Slab) ([]Offset, int, *[]in/;"	f	unknown:fzf.Pattern
extractColor	vim/pack/minpac/start/fzf/src/ansi.go	/^func extractColor(str string, state *ansiState, proc func(string, *ansiState) bool) (string, *[]/;"	f	package:fzf
faces	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^faces = [(0,1,2,3),(1,5,6,2),(5,4,7,6),(4,0,3,7),(0,4,5,1),(3,2,6,7)]$/;"	v
fail	vim/pack/minpac/start/fzf/bin/fzf-tmux	/^fail() {$/;"	f
fd	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) fd() int {$/;"	f	unknown:tui.LightRenderer
fd	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    fd = forward$/;"	v	class:Turtle
feed	vim/pack/minpac/start/fzf/src/reader.go	/^func (r *Reader) feed(src io.Reader) {$/;"	f	unknown:fzf.Reader
fg	vim/pack/minpac/start/fzf/src/ansi.go	/^	fg   tui.Color$/;"	m	struct:fzf.ansiState
fg	vim/pack/minpac/start/fzf/src/tui/light.go	/^	fg       Color$/;"	m	struct:tui.LightWindow
fg	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	fg Color$/;"	m	struct:tui.ColorPair
fill	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) fill(str string, onMove func()) FillReturn {$/;"	f	unknown:tui.LightWindow
fill	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func fill(x, y, w, h int, r rune) {$/;"	f	package:tui
fillString	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) fillString(text string, pair ColorPair, a Attr) FillReturn {$/;"	f	unknown:tui.TcellWindow
filter-vader-output	vim/pack/minpac/start/ale/test/script/run-vader-tests	/^function filter-vader-output() {$/;"	f
fin	vim/pack/minpac/start/fzf/src/reader.go	/^func (r *Reader) fin(success bool) {$/;"	f	unknown:fzf.Reader
final	vim/pack/minpac/start/fzf/src/matcher.go	/^	final   bool$/;"	m	struct:fzf.MatchRequest
final	vim/pack/minpac/start/fzf/src/merger.go	/^	final   bool$/;"	m	struct:fzf.Merger
findAnsiStart	vim/pack/minpac/start/fzf/src/ansi.go	/^func findAnsiStart(str string) int {$/;"	f	package:fzf
findFirstMatch	vim/pack/minpac/start/fzf/src/terminal.go	/^func findFirstMatch(pattern string, str string) int {$/;"	f	package:fzf
findLastMatch	vim/pack/minpac/start/fzf/src/terminal.go	/^func findLastMatch(pattern string, str string) int {$/;"	f	package:fzf
findOffset	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f	unknown:tui.LightRenderer
firstKey	vim/pack/minpac/start/fzf/src/options.go	/^func firstKey(keymap map[int]string) int {$/;"	f	package:fzf
first_run	vim/pack/minpac/opt/minpac/test/runtest.vim	/^    let first_run = v:errors$/;"	v
fish	vim/pack/minpac/start/fzf/test/test_go.rb	/^    def fish$/;"	S	class:Shell
flatTernaryExpressions	eslintrc.json	/^      "flatTernaryExpressions": 0,$/;"	n	object:rules
flush	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) flush() {$/;"	f	unknown:tui.LightRenderer
forOf	eslintrc.json	/^      "forOf": false,$/;"	b	object:parserOptions.ecmaFeatures
forceBlack	vim/pack/minpac/start/fzf/src/tui/light.go	/^	forceBlack    bool$/;"	m	struct:tui.LightRenderer
forceBlack	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	forceBlack   bool$/;"	m	struct:tui.FullscreenRenderer
forward	vim/pack/minpac/start/fzf/src/pattern.go	/^	forward       bool$/;"	m	struct:fzf.Pattern
forward	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def forward(self, step):$/;"	m	class:Turtle
fps	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^fps = 20$/;"	v
frame	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def frame(self, min_x=None, min_y=None, max_x=None, max_y=None):$/;"	m	class:Canvas
frame_no	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^frame_no = 0$/;"	v
frames	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/speed_test.py	/^frames = 1000 * 10$/;"	v
friendly_name	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^  let friendly_name = substitute(test[5:-3], '_', ' ', 'g')$/;"	v
fullscreen	vim/pack/minpac/start/fzf/src/terminal.go	/^	fullscreen bool$/;"	m	struct:fzf.Terminal
fullscreen	vim/pack/minpac/start/fzf/src/tui/light.go	/^	fullscreen    bool$/;"	m	struct:tui.LightRenderer
func-call-spacing	eslintrc.json	/^    "func-call-spacing": ["error", "never"],$/;"	a	object:rules
func-names	eslintrc.json	/^    "func-names": 0,$/;"	n	object:rules
func-style	eslintrc.json	/^    "func-style": 0,$/;"	n	object:rules
functionPrototypeMethods	eslintrc.json	/^    "wrap-iife": ["error", "any", { "functionPrototypeMethods": true }],$/;"	b	object:rules.wrap-iife.2
functions	eslintrc.json	/^      "functions": "never"$/;"	s	object:rules.comma-dangle.1
functions	eslintrc.json	/^    "no-use-before-define": ["error", { "functions": false, "classes": false, "variables": false/;"	b	object:rules.no-use-before-define.1
fuzzy	vim/pack/minpac/start/fzf/src/pattern.go	/^	fuzzy         bool$/;"	m	struct:fzf.Pattern
fuzzyAlgo	vim/pack/minpac/start/fzf/src/pattern.go	/^	fuzzyAlgo     algo.Algo$/;"	m	struct:fzf.Pattern
fzf	vim/pack/minpac/start/fzf/man/man1/fzf.1	/^.TH fzf 1 "Apr 2018" "fzf 0.17.4-devel" "fzf - a command-line fuzzy finder"$/;"	t
fzf	vim/pack/minpac/start/fzf/src/ansi.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/ansi_test.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/cache.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/cache_test.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/chunklist.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/chunklist_test.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/constants.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/core.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/history.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/history_test.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/item.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/item_test.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/matcher.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/merger.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/merger_test.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/options.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/options_test.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/pattern.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/pattern_test.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/reader.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/reader_test.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/result.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/result_others.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/result_test.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/result_x86.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/terminal.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/terminal_test.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/terminal_unix.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/terminal_windows.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/tokenizer.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/src/tokenizer_test.go	/^package fzf$/;"	p
fzf	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def fzf(*opts)$/;"	f	class:TestBase
fzf :heart: vim	vim/pack/minpac/start/fzf.vim/README.md	/^fzf :heart: vim$/;"	c
fzf inside terminal buffer	vim/pack/minpac/start/fzf/README-VIM.md	/^fzf inside terminal buffer$/;"	s
fzf!	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def fzf!(*opts)$/;"	f	class:TestBase
fzf#complete	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^function! fzf#complete(...)$/;"	f
fzf#run	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! fzf#run(...) abort$/;"	f
fzf#shellescape	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! fzf#shellescape(arg, ...)$/;"	f
fzf#vim#_lines	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_lines(all)$/;"	f
fzf#vim#_uniq	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_uniq(list)$/;"	f
fzf#vim#ag	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag(query, ...)$/;"	f
fzf#vim#ag_raw	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag_raw(command_suffix, ...)$/;"	f
fzf#vim#buffer_commits	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_commits(...)$/;"	f
fzf#vim#buffer_lines	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_lines(...)$/;"	f
fzf#vim#buffer_tags	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_tags(query, ...)$/;"	f
fzf#vim#buffers	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffers(...)$/;"	f
fzf#vim#colors	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#colors(...)$/;"	f
fzf#vim#command_history	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#command_history(...)$/;"	f
fzf#vim#commands	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commands(...)$/;"	f
fzf#vim#commits	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commits(...)$/;"	f
fzf#vim#complete	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#complete(...)$/;"	f
fzf#vim#complete#buffer_line	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#buffer_line(...)$/;"	f
fzf#vim#complete#line	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#line(...)$/;"	f
fzf#vim#complete#path	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#path(command, ...)$/;"	f
fzf#vim#complete#word	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#word(...)$/;"	f
fzf#vim#files	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#files(dir, ...)$/;"	f
fzf#vim#filetypes	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#filetypes(...)$/;"	f
fzf#vim#gitfiles	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#gitfiles(args, ...)$/;"	f
fzf#vim#grep	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep(grep_command, with_column, ...)$/;"	f
fzf#vim#helptags	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#helptags(...)$/;"	f
fzf#vim#history	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#history(...)$/;"	f
fzf#vim#lines	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#lines(...)$/;"	f
fzf#vim#locate	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#locate(query, ...)$/;"	f
fzf#vim#maps	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#maps(mode, ...)$/;"	f
fzf#vim#marks	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#marks(...)$/;"	f
fzf#vim#search_history	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#search_history(...)$/;"	f
fzf#vim#snippets	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#snippets(...)$/;"	f
fzf#vim#tags	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#tags(query, ...)$/;"	f
fzf#vim#windows	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#windows(...)$/;"	f
fzf#vim#with_preview	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#with_preview(...)$/;"	f
fzf#wrap	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! fzf#wrap(...)$/;"	f
fzf-cd-widget	vim/pack/minpac/start/fzf/shell/key-bindings.zsh	/^fzf-cd-widget() {$/;"	f
fzf-completion	vim/pack/minpac/start/fzf/shell/completion.zsh	/^fzf-completion() {$/;"	f
fzf-file-widget	vim/pack/minpac/start/fzf/shell/key-bindings.bash	/^fzf-file-widget() {$/;"	f
fzf-file-widget	vim/pack/minpac/start/fzf/shell/key-bindings.zsh	/^fzf-file-widget() {$/;"	f
fzf-history-widget	vim/pack/minpac/start/fzf/shell/key-bindings.zsh	/^fzf-history-widget() {$/;"	f
fzf-redraw-prompt	vim/pack/minpac/start/fzf/shell/key-bindings.zsh	/^fzf-redraw-prompt() {$/;"	f
fzf-tmux	vim/pack/minpac/start/fzf/man/man1/fzf-tmux.1	/^.TH fzf-tmux 1 "Dec 2017" "fzf 0.17.3" "fzf-tmux - open fzf in tmux split pane"$/;"	t
fzf.on_exit	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^      function! fzf.on_exit(job_id, exit_status, event) dict$/;"	f
fzf.on_exit	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^  function! fzf.on_exit(id, code, ...)$/;"	f
fzf.switch_back	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^  function! fzf.switch_back(inplace)$/;"	f
fzf_buffers	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^augroup fzf_buffers$/;"	a
fzf_popd	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^augroup fzf_popd$/;"	a
fzf_swap	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^    augroup fzf_swap$/;"	a
g!	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^  nmap g! <Plug>ScripteaseFilter$/;"	m
g!	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^  xmap g! <Plug>ScripteaseFilter$/;"	m
g!!	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^  nmap g!! <Plug>ScripteaseFilter<SID>_$/;"	m
g%	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>$/;"	m
g%	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>$/;"	m
g%	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``$/;"	m
g:	vim/pack/minpac/start/ale/autoload/ale.vim	/^    let g:[l:full_name] = l:value$/;"	v
g:	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:[newname] = g:[key]$/;"	v
g:Abolish	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^      let g:Abolish.Coercions.l = s:function('s:abolish_l')$/;"	v
g:Abolish	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^      let g:Abolish.Coercions.t = s:function('s:abolish_t')$/;"	v
g:CommandTSearchPath	vimrc	/^        let g:CommandTSearchPath = $HOME . '\/Code'$/;"	v
g:NERDShutUp	vimrc	/^let g:NERDShutUp=1$/;"	v
g:NERDTree	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
g:NERDTreeAutoDeleteBuffer	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
g:NERDTreeBookmark	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeBookmarks	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeBookmarks = []$/;"	v
g:NERDTreeCreator	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
g:NERDTreeDirNode	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeEvent	vim/pack/minpac/start/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
g:NERDTreeFileNode	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeFlagSet	vim/pack/minpac/start/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
g:NERDTreeIgnore	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreeInvalidBookmarks	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeInvalidBookmarks = []$/;"	v
g:NERDTreeKeyMap	vim/pack/minpac/start/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
g:NERDTreeMenuController	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
g:NERDTreeMenuItem	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
g:NERDTreeOpener	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
g:NERDTreePath	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreePathNotifier	vim/pack/minpac/start/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:NERDTreeSortOrder	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTree')?b:NERDTree.root.path.str():''}"$/;"	v
g:NERDTreeUI	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
g:__fzf_command	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^    let g:__fzf_command = "normal ".a:type.item."\\<cr>"$/;"	v
g:ale#util#error_priority	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^let g:ale#util#error_priority = 5$/;"	v
g:ale#util#info_priority	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^let g:ale#util#info_priority = 3$/;"	v
g:ale#util#nul_file	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^        let g:ale#util#nul_file = 'nul'$/;"	v
g:ale#util#nul_file	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^    let g:ale#util#nul_file = '\/dev\/null'$/;"	v
g:ale#util#style_error_priority	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^let g:ale#util#style_error_priority = 2$/;"	v
g:ale#util#style_warning_priority	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^let g:ale#util#style_warning_priority = 1$/;"	v
g:ale#util#warning_priority	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^let g:ale#util#warning_priority = 4$/;"	v
g:ale_awk_gawk_executable	vim/pack/minpac/start/ale/ale_linters/awk/gawk.vim	/^let g:ale_awk_gawk_executable =$/;"	v
g:ale_awk_gawk_options	vim/pack/minpac/start/ale/ale_linters/awk/gawk.vim	/^let g:ale_awk_gawk_options =$/;"	v
g:ale_buffer_info	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^        let g:ale_buffer_info[a:buffer] = {$/;"	v
g:ale_buffer_info	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^        let g:ale_buffer_info[a:buffer].loclist = l:loclist$/;"	v
g:ale_buffer_info	vim/pack/minpac/start/ale/autoload/ale/statusline.vim	/^    let g:ale_buffer_info[a:buffer].count = l:count$/;"	v
g:ale_buffer_info	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_buffer_info = {}$/;"	v
g:ale_c_build_dir_names	vim/pack/minpac/start/ale/autoload/ale/c.vim	/^let g:ale_c_build_dir_names = get(g:, 'ale_c_build_dir_names', [$/;"	v
g:ale_cmake_cmakelint_executable	vim/pack/minpac/start/ale/ale_linters/cmake/cmakelint.vim	/^let g:ale_cmake_cmakelint_executable =$/;"	v
g:ale_cmake_cmakelint_options	vim/pack/minpac/start/ale/ale_linters/cmake/cmakelint.vim	/^let g:ale_cmake_cmakelint_options =$/;"	v
g:ale_completion_enabled	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^    let g:ale_completion_enabled = 0$/;"	v
g:ale_completion_enabled	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^    let g:ale_completion_enabled = 1$/;"	v
g:ale_cs_mcs_options	vim/pack/minpac/start/ale/ale_linters/cs/mcs.vim	/^let g:ale_cs_mcs_options = get(g:, 'ale_cs_mcs_options', '')$/;"	v
g:ale_deprecation_ale_get_status_line	vim/pack/minpac/start/ale/plugin/ale.vim	/^        let g:ale_deprecation_ale_get_status_line = 1$/;"	v
g:ale_deprecation_ale_lint	vim/pack/minpac/start/ale/plugin/ale.vim	/^        let g:ale_deprecation_ale_lint = 1$/;"	v
g:ale_deprecation_ale_statusline_status	vim/pack/minpac/start/ale/autoload/ale/statusline.vim	/^        let g:ale_deprecation_ale_statusline_status = 1$/;"	v
g:ale_echo_cursor	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_echo_cursor = get(g:, 'ale_echo_cursor', 1)$/;"	v
g:ale_echo_delay	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_echo_delay = get(g:, 'ale_echo_delay', 10)$/;"	v
g:ale_echo_msg_error_str	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_echo_msg_error_str = get(g:, 'ale_echo_msg_error_str', 'Error')$/;"	v
g:ale_echo_msg_info_str	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_echo_msg_info_str = get(g:, 'ale_echo_msg_info_str', 'Info')$/;"	v
g:ale_echo_msg_warning_str	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_echo_msg_warning_str = get(g:, 'ale_echo_msg_warning_str', 'Warning')$/;"	v
g:ale_emit_conflict_warnings	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_emit_conflict_warnings = get(g:, 'ale_emit_conflict_warnings', 1)$/;"	v
g:ale_enabled	vim/pack/minpac/start/ale/autoload/ale/toggle.vim	/^    let g:ale_enabled = !get(g:, 'ale_enabled')$/;"	v
g:ale_enabled	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_enabled = get(g:, 'ale_enabled', 1)$/;"	v
g:ale_erlang_erlc_options	vim/pack/minpac/start/ale/ale_linters/erlang/erlc.vim	/^let g:ale_erlang_erlc_options = get(g:, 'ale_erlang_erlc_options', '')$/;"	v
g:ale_filetype_blacklist	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_filetype_blacklist = [$/;"	v
g:ale_fix_buffer_data	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^    let g:ale_fix_buffer_data = {}$/;"	v
g:ale_fix_buffer_data	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^    let g:ale_fix_buffer_data[a:buffer] = {$/;"	v
g:ale_fix_buffer_data	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^    let g:ale_fix_buffer_data[a:buffer].temporary_directory_list = []$/;"	v
g:ale_fixers	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_fixers = get(g:, 'ale_fixers', {})$/;"	v
g:ale_fortran_gcc_executable	vim/pack/minpac/start/ale/ale_linters/fortran/gcc.vim	/^    let g:ale_fortran_gcc_executable = 'gcc'$/;"	v
g:ale_fortran_gcc_options	vim/pack/minpac/start/ale/ale_linters/fortran/gcc.vim	/^    let g:ale_fortran_gcc_options = '-Wall'$/;"	v
g:ale_fortran_gcc_use_free_form	vim/pack/minpac/start/ale/ale_linters/fortran/gcc.vim	/^    let g:ale_fortran_gcc_use_free_form = 1$/;"	v
g:ale_fuse_fusionlint_executable	vim/pack/minpac/start/ale/ale_linters/fuse/fusionlint.vim	/^let g:ale_fuse_fusionlint_executable =$/;"	v
g:ale_fuse_fusionlint_options	vim/pack/minpac/start/ale/ale_linters/fuse/fusionlint.vim	/^let g:ale_fuse_fusionlint_options =$/;"	v
g:ale_gitcommit_gitlint_executable	vim/pack/minpac/start/ale/ale_linters/gitcommit/gitlint.vim	/^let g:ale_gitcommit_gitlint_executable =$/;"	v
g:ale_gitcommit_gitlint_options	vim/pack/minpac/start/ale/ale_linters/gitcommit/gitlint.vim	/^let g:ale_gitcommit_gitlint_options = get(g:, 'ale_gitcommit_gitlint_options', '')$/;"	v
g:ale_gitcommit_gitlint_use_global	vim/pack/minpac/start/ale/ale_linters/gitcommit/gitlint.vim	/^let g:ale_gitcommit_gitlint_use_global = get(g:, 'ale_gitcommit_gitlint_use_global', get(g:, 'al/;"	v
g:ale_glsl_glslang_executable	vim/pack/minpac/start/ale/ale_linters/glsl/glslang.vim	/^let g:ale_glsl_glslang_executable =$/;"	v
g:ale_glsl_glslang_options	vim/pack/minpac/start/ale/ale_linters/glsl/glslang.vim	/^let g:ale_glsl_glslang_options = get(g:, 'ale_glsl_glslang_options', '')$/;"	v
g:ale_has_override	vim/pack/minpac/start/ale/autoload/ale.vim	/^let g:ale_has_override = get(g:, 'ale_has_override', {})$/;"	v
g:ale_history_enabled	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_history_enabled = get(g:, 'ale_history_enabled', 1)$/;"	v
g:ale_history_log_output	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_history_log_output = get(g:, 'ale_history_log_output', 1)$/;"	v
g:ale_html_tidy_executable	vim/pack/minpac/start/ale/ale_linters/html/tidy.vim	/^let g:ale_html_tidy_executable = get(g:, 'ale_html_tidy_executable', 'tidy')$/;"	v
g:ale_html_tidy_options	vim/pack/minpac/start/ale/ale_linters/html/tidy.vim	/^let g:ale_html_tidy_options = get(g:, 'ale_html_tidy_options', s:default_options)$/;"	v
g:ale_java_checkstyle_options	vim/pack/minpac/start/ale/ale_linters/java/checkstyle.vim	/^    let g:ale_java_checkstyle_options = '-c \/google_checks.xml'$/;"	v
g:ale_java_pmd_options	vim/pack/minpac/start/ale/ale_linters/java/pmd.vim	/^    let g:ale_java_pmd_options = '-R category\/java\/bestpractices.xml'$/;"	v
g:ale_keep_list_window_open	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_keep_list_window_open = get(g:, 'ale_keep_list_window_open', 0)$/;"	v
g:ale_kotlin_kotlinc_classpath	vim/pack/minpac/start/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_classpath = get(g:, 'ale_kotlin_kotlinc_classpath', '')$/;"	v
g:ale_kotlin_kotlinc_config_file	vim/pack/minpac/start/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_config_file = get(g:, 'ale_kotlin_kotlinc_config_file', '.ale_kotlinc_c/;"	v
g:ale_kotlin_kotlinc_enable_config	vim/pack/minpac/start/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_enable_config = get(g:, 'ale_kotlin_kotlinc_enable_config', 0)$/;"	v
g:ale_kotlin_kotlinc_module_filename	vim/pack/minpac/start/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_module_filename = get(g:, 'ale_kotlin_kotlinc_module_filename', 'module/;"	v
g:ale_kotlin_kotlinc_options	vim/pack/minpac/start/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_options = get(g:, 'ale_kotlin_kotlinc_options', '')$/;"	v
g:ale_kotlin_kotlinc_sourcepath	vim/pack/minpac/start/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_sourcepath = get(g:, 'ale_kotlin_kotlinc_sourcepath', '')$/;"	v
g:ale_kotlin_kotlinc_use_module_file	vim/pack/minpac/start/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_use_module_file = get(g:, 'ale_kotlin_kotlinc_use_module_file', 0)$/;"	v
g:ale_lint_delay	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_lint_delay = get(g:, 'ale_lint_delay', 200)$/;"	v
g:ale_lint_on_enter	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_lint_on_enter = get(g:, 'ale_lint_on_enter', 1)$/;"	v
g:ale_lint_on_filetype_changed	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_lint_on_filetype_changed = get(g:, 'ale_lint_on_filetype_changed', 1)$/;"	v
g:ale_lint_on_insert_leave	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_lint_on_insert_leave = get(g:, 'ale_lint_on_insert_leave', 0)$/;"	v
g:ale_lint_on_save	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_lint_on_save = get(g:, 'ale_lint_on_save', 1)$/;"	v
g:ale_lint_on_text_changed	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_lint_on_text_changed = get(g:, 'ale_lint_on_text_changed', 'always')$/;"	v
g:ale_linter_aliases	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_linter_aliases = get(g:, 'ale_linter_aliases', {})$/;"	v
g:ale_linters	vimrc	/^let g:ale_linters = {$/;"	v
g:ale_list_vertical	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_list_vertical = get(g:, 'ale_list_vertical', 0)$/;"	v
g:ale_lsp_next_message_id	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^        let g:ale_lsp_next_message_id = 1$/;"	v
g:ale_lsp_next_message_id	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^    let g:ale_lsp_next_message_id += 1$/;"	v
g:ale_lsp_next_message_id	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^let g:ale_lsp_next_message_id = 1$/;"	v
g:ale_lsp_next_version_id	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^        let g:ale_lsp_next_version_id = 1$/;"	v
g:ale_lsp_next_version_id	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^    let g:ale_lsp_next_version_id += 1$/;"	v
g:ale_lsp_next_version_id	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^let g:ale_lsp_next_version_id = 1$/;"	v
g:ale_lua_luacheck_executable	vim/pack/minpac/start/ale/ale_linters/lua/luacheck.vim	/^let g:ale_lua_luacheck_executable =$/;"	v
g:ale_lua_luacheck_options	vim/pack/minpac/start/ale/ale_linters/lua/luacheck.vim	/^let g:ale_lua_luacheck_options =$/;"	v
g:ale_matlab_mlint_executable	vim/pack/minpac/start/ale/ale_linters/matlab/mlint.vim	/^let g:ale_matlab_mlint_executable =$/;"	v
g:ale_max_buffer_history_size	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_max_buffer_history_size = get(g:, 'ale_max_buffer_history_size', 20)$/;"	v
g:ale_max_signs	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_max_signs = get(g:, 'ale_max_signs', -1)$/;"	v
g:ale_objc_clang_options	vim/pack/minpac/start/ale/ale_linters/objc/clang.vim	/^    let g:ale_objc_clang_options = '-std=c11 -Wall'$/;"	v
g:ale_objcpp_clang_options	vim/pack/minpac/start/ale/ale_linters/objcpp/clang.vim	/^    let g:ale_objcpp_clang_options = '-std=c++14 -Wall'$/;"	v
g:ale_open_list	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_open_list = get(g:, 'ale_open_list', 0)$/;"	v
g:ale_perl_perl_executable	vim/pack/minpac/start/ale/ale_linters/perl/perl.vim	/^let g:ale_perl_perl_executable =$/;"	v
g:ale_perl_perl_options	vim/pack/minpac/start/ale/ale_linters/perl/perl.vim	/^let g:ale_perl_perl_options =$/;"	v
g:ale_perl_perlcritic_executable	vim/pack/minpac/start/ale/ale_linters/perl/perlcritic.vim	/^let g:ale_perl_perlcritic_executable =$/;"	v
g:ale_perl_perlcritic_options	vim/pack/minpac/start/ale/ale_linters/perl/perlcritic.vim	/^let g:ale_perl_perlcritic_options =$/;"	v
g:ale_perl_perlcritic_profile	vim/pack/minpac/start/ale/ale_linters/perl/perlcritic.vim	/^let g:ale_perl_perlcritic_profile =$/;"	v
g:ale_perl_perlcritic_showrules	vim/pack/minpac/start/ale/ale_linters/perl/perlcritic.vim	/^let g:ale_perl_perlcritic_showrules =$/;"	v
g:ale_php_phan_minimum_severity	vim/pack/minpac/start/ale/ale_linters/php/phan.vim	/^let g:ale_php_phan_minimum_severity = get(g:, 'ale_php_phan_minimum_severity', 0)$/;"	v
g:ale_php_phpcs_standard	vim/pack/minpac/start/ale/ale_linters/php/phpcs.vim	/^let g:ale_php_phpcs_standard = get(g:, 'ale_php_phpcs_standard', '')$/;"	v
g:ale_php_phpmd_executable	vim/pack/minpac/start/ale/ale_linters/php/phpmd.vim	/^let g:ale_php_phpmd_executable = get(g:, 'ale_php_phpmd_executable', 'phpmd')$/;"	v
g:ale_php_phpmd_ruleset	vim/pack/minpac/start/ale/ale_linters/php/phpmd.vim	/^let g:ale_php_phpmd_ruleset = get(g:, 'ale_php_phpmd_ruleset', 'cleancode,codesize,controversial/;"	v
g:ale_php_phpstan_configuration	vim/pack/minpac/start/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_configuration = get(g:, 'ale_php_phpstan_configuration', '')$/;"	v
g:ale_php_phpstan_executable	vim/pack/minpac/start/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_executable = get(g:, 'ale_php_phpstan_executable', 'phpstan')$/;"	v
g:ale_php_phpstan_level	vim/pack/minpac/start/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_level = get(g:, 'ale_php_phpstan_level', '4')$/;"	v
g:ale_puppet_puppetlint_executable	vim/pack/minpac/start/ale/ale_linters/puppet/puppetlint.vim	/^let g:ale_puppet_puppetlint_executable =$/;"	v
g:ale_puppet_puppetlint_executable	vim/pack/minpac/start/ale/autoload/ale/fixers/puppetlint.vim	/^    let g:ale_puppet_puppetlint_executable = 'puppet-lint'$/;"	v
g:ale_puppet_puppetlint_options	vim/pack/minpac/start/ale/ale_linters/puppet/puppetlint.vim	/^let g:ale_puppet_puppetlint_options =$/;"	v
g:ale_puppet_puppetlint_options	vim/pack/minpac/start/ale/autoload/ale/fixers/puppetlint.vim	/^    let g:ale_puppet_puppetlint_options = ''$/;"	v
g:ale_python_flake8_executable	vim/pack/minpac/start/ale/ale_linters/python/flake8.vim	/^let g:ale_python_flake8_executable =$/;"	v
g:ale_python_flake8_options	vim/pack/minpac/start/ale/ale_linters/python/flake8.vim	/^let g:ale_python_flake8_options =$/;"	v
g:ale_python_flake8_use_global	vim/pack/minpac/start/ale/ale_linters/python/flake8.vim	/^let g:ale_python_flake8_use_global = get(g:, 'ale_python_flake8_use_global', get(g:, 'ale_use_gl/;"	v
g:ale_python_prospector_executable	vim/pack/minpac/start/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_executable =$/;"	v
g:ale_python_prospector_options	vim/pack/minpac/start/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_options =$/;"	v
g:ale_python_prospector_use_global	vim/pack/minpac/start/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_use_global = get(g:, 'ale_python_prospector_use_global', get(g:, 'al/;"	v
g:ale_qml_qmlfmt_executable	vim/pack/minpac/start/ale/ale_linters/qml/qmlfmt.vim	/^let g:ale_qml_qmlfmt_executable = get(g:, 'ale_qml_qmlfmt_executable', 'qmlfmt')$/;"	v
g:ale_r_lintr_lint_package	vim/pack/minpac/start/ale/ale_linters/r/lintr.vim	/^let g:ale_r_lintr_lint_package = get(g:, 'ale_r_lintr_lint_package', 0)$/;"	v
g:ale_r_lintr_options	vim/pack/minpac/start/ale/ale_linters/r/lintr.vim	/^let g:ale_r_lintr_options = get(g:, 'ale_r_lintr_options', 'with_defaults()')$/;"	v
g:ale_ruby_brakeman_options	vim/pack/minpac/start/ale/ale_linters/ruby/brakeman.vim	/^let g:ale_ruby_brakeman_options =$/;"	v
g:ale_ruby_rails_best_practices_options	vim/pack/minpac/start/ale/ale_linters/ruby/rails_best_practices.vim	/^let g:ale_ruby_rails_best_practices_options =$/;"	v
g:ale_rust_ignore_error_codes	vim/pack/minpac/start/ale/autoload/ale/handlers/rust.vim	/^    let g:ale_rust_ignore_error_codes = []$/;"	v
g:ale_scala_scalastyle_options	vim/pack/minpac/start/ale/ale_linters/scala/scalastyle.vim	/^let g:ale_scala_scalastyle_options =$/;"	v
g:ale_scalastyle_config_loc	vim/pack/minpac/start/ale/ale_linters/scala/scalastyle.vim	/^let g:ale_scalastyle_config_loc =$/;"	v
g:ale_set_highlights	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_set_highlights = get(g:, 'ale_set_highlights', has('syntax'))$/;"	v
g:ale_set_lists_synchronously	vim/pack/minpac/start/ale/test/.config/nvim/init.vim	/^let g:ale_set_lists_synchronously = 1$/;"	v
g:ale_set_lists_synchronously	vim/pack/minpac/start/ale/test/vimrc	/^let g:ale_set_lists_synchronously = 1$/;"	v
g:ale_set_loclist	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_set_loclist = get(g:, 'ale_set_loclist', 1)$/;"	v
g:ale_set_quickfix	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_set_quickfix = get(g:, 'ale_set_quickfix', 0)$/;"	v
g:ale_set_signs	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_set_signs = get(g:, 'ale_set_signs', has('signs'))$/;"	v
g:ale_sh_shell_default_shell	vim/pack/minpac/start/ale/ale_linters/sh/shell.vim	/^        let g:ale_sh_shell_default_shell = 'bash'$/;"	v
g:ale_sh_shell_default_shell	vim/pack/minpac/start/ale/ale_linters/sh/shell.vim	/^    let g:ale_sh_shell_default_shell = fnamemodify($SHELL, ':t')$/;"	v
g:ale_sh_shell_default_shell	vim/pack/minpac/start/ale/ale_linters/sh/shell.vim	/^    let g:ale_sh_shell_default_shell = g:ale_linters_sh_shell_default_shell$/;"	v
g:ale_sh_shellcheck_exclusions	vim/pack/minpac/start/ale/ale_linters/sh/shellcheck.vim	/^let g:ale_sh_shellcheck_exclusions =$/;"	v
g:ale_sh_shellcheck_executable	vim/pack/minpac/start/ale/ale_linters/sh/shellcheck.vim	/^let g:ale_sh_shellcheck_executable =$/;"	v
g:ale_sh_shellcheck_options	vim/pack/minpac/start/ale/ale_linters/sh/shellcheck.vim	/^let g:ale_sh_shellcheck_options =$/;"	v
g:ale_sign_column_always	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_sign_column_always = get(g:, 'ale_sign_column_always', 0)$/;"	v
g:ale_sign_offset	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_sign_offset = get(g:, 'ale_sign_offset', 1000000)$/;"	v
g:ale_spec_rpmlint_executable	vim/pack/minpac/start/ale/ale_linters/spec/rpmlint.vim	/^let g:ale_spec_rpmlint_executable =$/;"	v
g:ale_spec_rpmlint_options	vim/pack/minpac/start/ale/ale_linters/spec/rpmlint.vim	/^let g:ale_spec_rpmlint_options =$/;"	v
g:ale_statusline_format	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:ale_statusline_format = get(g:, 'ale_statusline_format',$/;"	v
g:ale_tex_chktex_executable	vim/pack/minpac/start/ale/ale_linters/tex/chktex.vim	/^let g:ale_tex_chktex_executable =$/;"	v
g:ale_tex_chktex_options	vim/pack/minpac/start/ale/ale_linters/tex/chktex.vim	/^let g:ale_tex_chktex_options =$/;"	v
g:ale_tex_lacheck_executable	vim/pack/minpac/start/ale/ale_linters/tex/lacheck.vim	/^let g:ale_tex_lacheck_executable =$/;"	v
g:ale_verilog_verilator_options	vim/pack/minpac/start/ale/ale_linters/verilog/verilator.vim	/^    let g:ale_verilog_verilator_options = ''$/;"	v
g:ale_virtualenv_dir_names	vim/pack/minpac/start/ale/autoload/ale/python.vim	/^let g:ale_virtualenv_dir_names = get(g:, 'ale_virtualenv_dir_names', [$/;"	v
g:ale_xml_xmllint_executable	vim/pack/minpac/start/ale/ale_linters/xml/xmllint.vim	/^let g:ale_xml_xmllint_executable = get(g:, 'ale_xml_xmllint_executable', 'xmllint')$/;"	v
g:ale_xml_xmllint_options	vim/pack/minpac/start/ale/ale_linters/xml/xmllint.vim	/^let g:ale_xml_xmllint_options = get(g:, 'ale_xml_xmllint_options', '')$/;"	v
g:ale_yaml_yamllint_executable	vim/pack/minpac/start/ale/ale_linters/yaml/yamllint.vim	/^let g:ale_yaml_yamllint_executable =$/;"	v
g:ale_yaml_yamllint_options	vim/pack/minpac/start/ale/ale_linters/yaml/yamllint.vim	/^let g:ale_yaml_yamllint_options =$/;"	v
g:autoloaded_projectionist	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^let g:autoloaded_projectionist = 1$/;"	v
g:autoloaded_rails	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let g:autoloaded_rails = '5.4'$/;"	v
g:autoloaded_scriptease	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^let g:autoloaded_scriptease = 1$/;"	v
g:colorizer_auto_filetype	vimrc	/^let g:colorizer_auto_filetype='css,sass,scss'$/;"	v
g:colorizer_fgcontrast	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^  let g:colorizer_fgcontrast = len(s:predefined_fgcolors['dark']) - 1$/;"	v
g:colorizer_maxlines	vim/pack/minpac/start/colorizer/plugin/colorizer.vim	/^  let g:colorizer_maxlines = -1$/;"	v
g:colors_name	vim/colors/OceanicNext.vim	/^  let g:colors_name="OceanicNext"$/;"	v
g:colors_name	vim/colors/OceanicNextLight.vim	/^  let g:colors_name="OceanicNextLight"$/;"	v
g:colors_name	vim/colors/gruvbox.vim	/^let g:colors_name='gruvbox'$/;"	v
g:colors_name	vim/colors/neodark.vim	/^let g:colors_name = 'neodark'$/;"	v
g:colors_name	vim/colors/twilight2.vim	/^let g:colors_name = "Twilight"$/;"	v
g:colors_name	vim/colors/twilight256.vim	/^let g:colors_name="twilight256"$/;"	v
g:colors_name	vim/pack/minpac/start/vim-solarized/colors/solarized.vim	/^let g:colors_name = "solarized"$/;"	v
g:db_adapter_rails	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^let g:db_adapter_rails = 'rails#db_'$/;"	v
g:dbext_default_SQLITE_bin	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^    let g:dbext_default_SQLITE_bin = "sqlite3"$/;"	v
g:dir	vim/pack/minpac/start/ale/autoload/ale/test.vim	/^    let g:dir = getcwd() " no-custom-checks$/;"	v
g:finish_update	vim/pack/minpac/opt/minpac/test/test_minpac.vim	/^  let g:finish_update = 0$/;"	v
g:fzf#vim#buffers	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^let g:fzf#vim#buffers = {}$/;"	v
g:gitgutter_override_sign_column_highlight	vim/colors/gruvbox.vim	/^  let g:gitgutter_override_sign_column_highlight = 0$/;"	v
g:grepper	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^  let g:grepper = exists('g:grepper')$/;"	v
g:grepper	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^let g:grepper = exists('g:grepper')$/;"	v
g:grepper	vimrc	/^let g:grepper       = {}$/;"	v
g:grepper	vimrc	/^let g:grepper.jump          = 1$/;"	v
g:grepper	vimrc	/^let g:grepper.next_tool     = '<leader>g'$/;"	v
g:grepper	vimrc	/^let g:grepper.quickfix      = 0$/;"	v
g:grepper	vimrc	/^let g:grepper.simple_prompt = 1$/;"	v
g:grepper	vimrc	/^let g:grepper.tools = ['grep', 'git', 'rg', 'ack']$/;"	v
g:gruvbox_bold	vim/colors/gruvbox.vim	/^  let g:gruvbox_bold=1$/;"	v
g:gruvbox_contrast_dark	vim/colors/gruvbox.vim	/^  let g:gruvbox_contrast_dark='medium'$/;"	v
g:gruvbox_contrast_dark	vimrc	/^let g:gruvbox_contrast_dark = "hard"$/;"	v
g:gruvbox_contrast_light	vim/colors/gruvbox.vim	/^  let g:gruvbox_contrast_light='medium'$/;"	v
g:gruvbox_guisp_fallback	vim/colors/gruvbox.vim	/^  let g:gruvbox_guisp_fallback='NONE'$/;"	v
g:gruvbox_improved_strings	vim/colors/gruvbox.vim	/^  let g:gruvbox_improved_strings=0$/;"	v
g:gruvbox_improved_warnings	vim/colors/gruvbox.vim	/^  let g:gruvbox_improved_warnings=0$/;"	v
g:gruvbox_inverse	vim/colors/gruvbox.vim	/^  let g:gruvbox_inverse=1$/;"	v
g:gruvbox_invert_indent_guides	vim/colors/gruvbox.vim	/^  let g:gruvbox_invert_indent_guides=0$/;"	v
g:gruvbox_italic	vim/colors/gruvbox.vim	/^    let g:gruvbox_italic=0$/;"	v
g:gruvbox_italic	vim/colors/gruvbox.vim	/^    let g:gruvbox_italic=1$/;"	v
g:gruvbox_termcolors	vim/colors/gruvbox.vim	/^  let g:gruvbox_termcolors=256$/;"	v
g:gruvbox_undercurl	vim/colors/gruvbox.vim	/^  let g:gruvbox_undercurl=1$/;"	v
g:gruvbox_underline	vim/colors/gruvbox.vim	/^  let g:gruvbox_underline=1$/;"	v
g:gutentags_add_default_project_roots	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_background_update	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_executable	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_extra_args	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:gutentags_enabled = 0$/;"	v
g:gutentags_enabled	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_project_root	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['\/usr\/local'/;"	v
g:gutentags_fake	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_fake = a:1$/;"	v
g:gutentags_fake	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_fake = !g:gutentags_fake$/;"	v
g:gutentags_fake	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslc/;"	v
g:gutentags_project_root	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_res_dir	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_script_ext	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = a:1$/;"	v
g:gutentags_trace	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = l:trace_backup$/;"	v
g:gutentags_trace	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_trace = !g:gutentags_trace$/;"	v
g:gutentags_trace	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_use_jobs	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:indentLine_bgcolor_gui	vim/colors/neodark.vim	/^let g:indentLine_bgcolor_gui = s:base1[0]$/;"	v
g:indentLine_bgcolor_term	vim/colors/neodark.vim	/^let g:indentLine_bgcolor_term = s:base1[1]$/;"	v
g:indentLine_color_gui	vim/colors/gruvbox.vim	/^  let g:indentLine_color_gui = s:bg2[0]$/;"	v
g:indentLine_color_gui	vim/colors/neodark.vim	/^let g:indentLine_color_gui = s:base3[0]$/;"	v
g:indentLine_color_term	vim/colors/gruvbox.vim	/^  let g:indentLine_color_term = s:bg2[1]$/;"	v
g:indentLine_color_term	vim/colors/neodark.vim	/^let g:indentLine_color_term = s:base3[1]$/;"	v
g:indent_guides_auto_colors	vim/colors/gruvbox.vim	/^  let g:indent_guides_auto_colors = 0$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^  let g:lightline = { 'subseparator': { 'left': '>', 'right': '<' } }$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': /;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'NotFound' } }$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'NotFound' }, 'component_type': { 'custom'/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'g:lightline.Custom' } }$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^  let g:lightline = {}$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^  let g:lightline = { 'component_type': { 'error': 'error', 'warning': 'warning' } }$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^  let g:lightline = {$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^  let g:lightline = {}$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/link.vim	/^  let g:lightline = { 'component_type': { 'error': 'error', 'warning': 'warning' } }$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/link.vim	/^  let g:lightline = {$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/link.vim	/^  let g:lightline = {}$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/mode.vim	/^  let g:lightline = { 'mode_map': { 'n': 'N' } }$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/mode.vim	/^  let g:lightline = {}$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'custom' ] }, 'tab_component': { 'custom': 'custom' }/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'custom' ] }, 'tab_component_function': { 'custom': '/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'custom', 'filename' ], 'inactive': [ 'custom', 'cust/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'tabnum', 'custom' ], 'inactive': [ 'tabnum', 'custom/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'tabnum', 'custom', 'filename' ], 'inactive': [ 'tabn/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'tabnum', 'filename' ], 'inactive': [ 'filename' ] } /;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^  let g:lightline = {}$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component': { 'custom1': 'custom1', 'custom2': 'custom2', 'custom3': 'cus/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1' }, 'component_function': { 'cus/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1', 'custom2': 'Custom2' }, 'compo/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1' } }$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2' } }$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2' }, 'com/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custo/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom2': 'Custom2' } }$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^  let g:lightline = { 'enable': { 'tabline': 0 } }$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^  let g:lightline = { 'enable': { 'tabline': 1 } }$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^  let g:lightline = {}$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^  let g:lightline = { 'winwidth': 180 }$/;"	v
g:lightline	vim/pack/minpac/start/lightline.vim/test/toggle.vim	/^  let g:lightline = {}$/;"	v
g:lightline	vimrc	/^let g:lightline = {$/;"	v
g:lightline#colorscheme#16color#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let g:lightline#colorscheme#16color#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#OldHope#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let g:lightline#colorscheme#OldHope#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#PaperColor#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor.vim	/^  let g:lightline#colorscheme#PaperColor#palette = g:lightline#colorscheme#PaperColor_dark#palet/;"	v
g:lightline#colorscheme#PaperColor#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor.vim	/^  let g:lightline#colorscheme#PaperColor#palette = g:lightline#colorscheme#PaperColor_light#pale/;"	v
g:lightline#colorscheme#PaperColor_dark#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let g:lightline#colorscheme#PaperColor_dark#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#PaperColor_light#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let g:lightline#colorscheme#PaperColor_light#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let g:lightline#colorscheme#Tomorrow#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow_Night#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let g:lightline#colorscheme#Tomorrow_Night#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Blue#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Blue#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Bright#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Bright#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Eighties#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Eighties#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#darcula#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let g:lightline#colorscheme#darcula#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#default#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/default.vim	/^let g:lightline#colorscheme#default#palette = g:lightline#colorscheme#powerline#palette$/;"	v
g:lightline#colorscheme#deus#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let g:lightline#colorscheme#deus#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#jellybeans#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let g:lightline#colorscheme#jellybeans#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#landscape#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let g:lightline#colorscheme#landscape#palette = s:p$/;"	v
g:lightline#colorscheme#materia#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let g:lightline#colorscheme#materia#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#material#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let g:lightline#colorscheme#material#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#molokai#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let g:lightline#colorscheme#molokai#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#nord#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let g:lightline#colorscheme#nord#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#one#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let g:lightline#colorscheme#one#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#powerline#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let g:lightline#colorscheme#powerline#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#seoul256#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let g:lightline#colorscheme#seoul256#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#solarized#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let g:lightline#colorscheme#solarized#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#wombat#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let g:lightline#colorscheme#wombat#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:loaded_ale	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:loaded_ale = 1$/;"	v
g:loaded_ale_after	vim/pack/minpac/start/ale/after/plugin/ale.vim	/^let g:loaded_ale_after = 1$/;"	v
g:loaded_ale_dont_use_this_in_other_plugins_please	vim/pack/minpac/start/ale/plugin/ale.vim	/^let g:loaded_ale_dont_use_this_in_other_plugins_please = 1$/;"	v
g:loaded_fzf	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^let g:loaded_fzf = 1$/;"	v
g:loaded_grepper	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^let g:loaded_grepper = 1$/;"	v
g:loaded_gutentags	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_lightline	vim/pack/minpac/start/lightline.vim/plugin/lightline.vim	/^let g:loaded_lightline = 1$/;"	v
g:loaded_minpac	vim/pack/minpac/opt/minpac/plugin/minpac.vim	/^let g:loaded_minpac = 1$/;"	v
g:loaded_nerdtree_autoload	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	vim/pack/minpac/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_nerdtree_ui_glue_autoload	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
g:loaded_projectionist	vim/pack/minpac/start/vim-projectionist/plugin/projectionist.vim	/^let g:loaded_projectionist = 1$/;"	v
g:loaded_rails	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^let g:loaded_rails = 1$/;"	v
g:loaded_rooter	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^let g:loaded_rooter = 1$/;"	v
g:loaded_scriptease	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^let g:loaded_scriptease = 1$/;"	v
g:loaded_tagbar	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let g:loaded_tagbar = 1$/;"	v
g:loaded_unimpaired	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^let g:loaded_unimpaired = 1$/;"	v
g:mapleader	vim/pack/minpac/start/ale/test/.config/nvim/init.vim	/^let g:mapleader=','$/;"	v
g:mapleader	vim/pack/minpac/start/ale/test/vimrc	/^let g:mapleader=','$/;"	v
g:minimap_close	vim/pack/minpac/start/vim-minimap/plugin/minimap.vim	/^let g:minimap_close =$/;"	v
g:minimap_highlight	vim/pack/minpac/start/vim-minimap/autoload/minimap.vim	/^        let g:minimap_highlight = 'Visual'$/;"	v
g:minimap_show	vim/pack/minpac/start/vim-minimap/plugin/minimap.vim	/^let g:minimap_show =$/;"	v
g:minimap_toggle	vim/pack/minpac/start/vim-minimap/plugin/minimap.vim	/^let g:minimap_toggle =$/;"	v
g:minimap_update	vim/pack/minpac/start/vim-minimap/plugin/minimap.vim	/^let g:minimap_update =$/;"	v
g:minpac#opt	vim/pack/minpac/opt/minpac/plugin/minpac.vim	/^  let g:minpac#opt = l:opt$/;"	v
g:minpac#pluglist	vim/pack/minpac/opt/minpac/plugin/minpac.vim	/^  let g:minpac#pluglist = {}$/;"	v
g:minpac#pluglist	vim/pack/minpac/opt/minpac/plugin/minpac.vim	/^  let g:minpac#pluglist[l:opt.name] = l:opt$/;"	v
g:minpac#pluglist	vim/pack/minpac/opt/minpac/test/test_minpac.vim	/^  let g:minpac#pluglist.foo = 'bar'$/;"	v
g:neodark#background	vim/colors/neodark.vim	/^  let g:neodark#background = ''$/;"	v
g:neodark#italics	vim/colors/neodark.vim	/^  let g:neodark#italics = 0$/;"	v
g:neodark#solid_vertsplit	vim/colors/neodark.vim	/^  let g:neodark#solid_vertsplit = 0$/;"	v
g:neodark#terminal_transparent	vim/colors/neodark.vim	/^  let g:neodark#terminal_transparent = 0$/;"	v
g:neodark#use_256color	vim/colors/neodark.vim	/^  let g:neodark#use_256color = 0$/;"	v
g:neodark#use_custom_terminal_theme	vim/colors/neodark.vim	/^  let g:neodark#use_custom_terminal_theme = 0$/;"	v
g:niji_dark_colours	vim/colors/gruvbox.vim	/^let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	vim/colors/gruvbox.vim	/^let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:oceanic_next_terminal_bold	vim/colors/OceanicNext.vim	/^  let g:oceanic_next_terminal_bold = get(g:, 'oceanic_next_terminal_bold', 0)$/;"	v
g:oceanic_next_terminal_bold	vim/colors/OceanicNextLight.vim	/^  let g:oceanic_next_terminal_bold = get(g:, 'oceanic_next_terminal_bold', 0)$/;"	v
g:oceanic_next_terminal_italic	vim/colors/OceanicNext.vim	/^  let g:oceanic_next_terminal_italic = get(g:, 'oceanic_next_terminal_italic', 0)$/;"	v
g:oceanic_next_terminal_italic	vim/colors/OceanicNextLight.vim	/^  let g:oceanic_next_terminal_italic = get(g:, 'oceanic_next_terminal_italic', 0)$/;"	v
g:post_update	vim/pack/minpac/opt/minpac/test/test_minpac.vim	/^  let g:post_update = 0$/;"	v
g:projectionist_file	vim/pack/minpac/start/vim-projectionist/plugin/projectionist.vim	/^        let g:projectionist_file = file$/;"	v
g:projectionist_heuristics	vim/pack/minpac/start/vim-projectionist/plugin/projectionist.vim	/^  let g:projectionist_heuristics = {}$/;"	v
g:projectionist_transformations	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^  let g:projectionist_transformations = {}$/;"	v
g:rainbow_conf	vim/colors/gruvbox.vim	/^   let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	vim/colors/gruvbox.vim	/^   let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	vim/colors/gruvbox.vim	/^   let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_ctermfgs	vim/colors/gruvbox.vim	/^let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_guifgs	vim/colors/gruvbox.vim	/^let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rbpt_colorpairs	vim/colors/gruvbox.vim	/^  let g:rbpt_colorpairs =$/;"	v
g:rooter_change_directory_for_non_project_files	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^  let g:rooter_change_directory_for_non_project_files = ''$/;"	v
g:rooter_change_directory_for_non_project_files	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^  let g:rooter_change_directory_for_non_project_files = ''$/;"	v
g:rooter_change_directory_for_non_project_files	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^  let g:rooter_change_directory_for_non_project_files = 'current'$/;"	v
g:rooter_change_directory_for_non_project_files	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^  let g:rooter_change_directory_for_non_project_files = 'home'$/;"	v
g:rooter_patterns	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^  let g:rooter_patterns = ['.git', '.git\/', '_darcs\/', '.hg\/', '.bzr\/', '.svn\/']$/;"	v
g:rooter_patterns	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^  let g:rooter_patterns = ['_git\/']  " TODO: also test a file rooter pattern$/;"	v
g:rooter_patterns	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^  let g:rooter_patterns = ['bar']$/;"	v
g:rooter_patterns	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^  let g:rooter_patterns = ['foo foo\/']$/;"	v
g:rooter_resolve_links	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^  let g:rooter_resolve_links = 0$/;"	v
g:rooter_resolve_links	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^  let g:rooter_resolve_links = 0$/;"	v
g:rooter_resolve_links	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^  let g:rooter_resolve_links = 1$/;"	v
g:rooter_resolve_links	vimrc	/^let g:rooter_resolve_links = 1$/;"	v
g:rooter_silent_chdir	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^  let g:rooter_silent_chdir = 0$/;"	v
g:rooter_silent_chdir	vimrc	/^let g:rooter_silent_chdir = 1$/;"	v
g:rooter_targets	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^  let g:rooter_targets = '\/,*'$/;"	v
g:rooter_targets	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^  let g:rooter_targets = '*.txt'$/;"	v
g:rooter_targets	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^  let g:rooter_targets = '\/'$/;"	v
g:rooter_targets	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^  let g:rooter_targets = '\/,*'$/;"	v
g:rooter_targets	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^  let g:rooter_targets = s:targets$/;"	v
g:rooter_use_lcd	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^  let g:rooter_use_lcd = 0$/;"	v
g:showmarks_enable	vimrc	/^let g:showmarks_enable = 0$/;"	v
g:tagbar#icon_closed	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_closed = g:tagbar_iconchars[0]$/;"	v
g:tagbar#icon_open	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_open   = g:tagbar_iconchars[1]$/;"	v
g:tagbar_autoclose	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^    let g:tagbar_autoclose = !g:tagbar_autoclose$/;"	v
g:tagbar_case_insensitive	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^    let g:tagbar_case_insensitive = !g:tagbar_case_insensitive$/;"	v
g:tagbar_ctags_bin	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^                let g:tagbar_ctags_bin = ctags$/;"	v
g:tagbar_ctags_bin	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^        let g:tagbar_ctags_bin = expand(g:tagbar_ctags_bin)$/;"	v
g:tagbar_ctags_bin	vimrc	/^let g:tagbar_ctags_bin='\/usr\/local\/bin\/ctags'  " Proper Ctags locations$/;"	v
g:tagbar_hide_nonpublic	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^    let g:tagbar_hide_nonpublic = !g:tagbar_hide_nonpublic$/;"	v
g:tagbar_iconchars	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['+', '-']$/;"	v
g:tagbar_iconchars	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['▶', '▼']$/;"	v
g:tagbar_sort	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^        let g:tagbar_sort = !g:tagbar_sort$/;"	v
g:tagbar_width	vimrc	/^let g:tagbar_width=26                          " Default is 40, seems too wide$/;"	v
g:terminal_color_0	vim/colors/OceanicNext.vim	/^let g:terminal_color_0=s:base00[0]$/;"	v
g:terminal_color_0	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_0=s:base00[0]$/;"	v
g:terminal_color_0	vim/colors/gruvbox.vim	/^  let g:terminal_color_0 = s:bg0[0]$/;"	v
g:terminal_color_1	vim/colors/OceanicNext.vim	/^let g:terminal_color_1=s:base08[0]$/;"	v
g:terminal_color_1	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_1=s:base08[0]$/;"	v
g:terminal_color_1	vim/colors/gruvbox.vim	/^  let g:terminal_color_1 = s:gb.neutral_red[0]$/;"	v
g:terminal_color_10	vim/colors/OceanicNext.vim	/^let g:terminal_color_10=s:base0B[0]$/;"	v
g:terminal_color_10	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_10=s:base01[0]$/;"	v
g:terminal_color_10	vim/colors/gruvbox.vim	/^  let g:terminal_color_10 = s:green[0]$/;"	v
g:terminal_color_11	vim/colors/OceanicNext.vim	/^let g:terminal_color_11=s:base0A[0]$/;"	v
g:terminal_color_11	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_11=s:base02[0]$/;"	v
g:terminal_color_11	vim/colors/gruvbox.vim	/^  let g:terminal_color_11 = s:yellow[0]$/;"	v
g:terminal_color_12	vim/colors/OceanicNext.vim	/^let g:terminal_color_12=s:base0D[0]$/;"	v
g:terminal_color_12	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_12=s:base04[0]$/;"	v
g:terminal_color_12	vim/colors/gruvbox.vim	/^  let g:terminal_color_12 = s:blue[0]$/;"	v
g:terminal_color_13	vim/colors/OceanicNext.vim	/^let g:terminal_color_13=s:base0E[0]$/;"	v
g:terminal_color_13	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_13=s:base06[0]$/;"	v
g:terminal_color_13	vim/colors/gruvbox.vim	/^  let g:terminal_color_13 = s:purple[0]$/;"	v
g:terminal_color_14	vim/colors/OceanicNext.vim	/^let g:terminal_color_14=s:base0C[0]$/;"	v
g:terminal_color_14	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_14=s:base0F[0]$/;"	v
g:terminal_color_14	vim/colors/gruvbox.vim	/^  let g:terminal_color_14 = s:aqua[0]$/;"	v
g:terminal_color_15	vim/colors/OceanicNext.vim	/^let g:terminal_color_15=s:base05[0]$/;"	v
g:terminal_color_15	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_15=s:base07[0]$/;"	v
g:terminal_color_15	vim/colors/gruvbox.vim	/^  let g:terminal_color_15 = s:fg1[0]$/;"	v
g:terminal_color_2	vim/colors/OceanicNext.vim	/^let g:terminal_color_2=s:base0B[0]$/;"	v
g:terminal_color_2	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_2=s:base0B[0]$/;"	v
g:terminal_color_2	vim/colors/gruvbox.vim	/^  let g:terminal_color_2 = s:gb.neutral_green[0]$/;"	v
g:terminal_color_3	vim/colors/OceanicNext.vim	/^let g:terminal_color_3=s:base0A[0]$/;"	v
g:terminal_color_3	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_3=s:base0A[0]$/;"	v
g:terminal_color_3	vim/colors/gruvbox.vim	/^  let g:terminal_color_3 = s:gb.neutral_yellow[0]$/;"	v
g:terminal_color_4	vim/colors/OceanicNext.vim	/^let g:terminal_color_4=s:base0D[0]$/;"	v
g:terminal_color_4	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_4=s:base0D[0]$/;"	v
g:terminal_color_4	vim/colors/gruvbox.vim	/^  let g:terminal_color_4 = s:gb.neutral_blue[0]$/;"	v
g:terminal_color_5	vim/colors/OceanicNext.vim	/^let g:terminal_color_5=s:base0E[0]$/;"	v
g:terminal_color_5	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_5=s:base0E[0]$/;"	v
g:terminal_color_5	vim/colors/gruvbox.vim	/^  let g:terminal_color_5 = s:gb.neutral_purple[0]$/;"	v
g:terminal_color_6	vim/colors/OceanicNext.vim	/^let g:terminal_color_6=s:base0C[0]$/;"	v
g:terminal_color_6	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_6=s:base0C[0]$/;"	v
g:terminal_color_6	vim/colors/gruvbox.vim	/^  let g:terminal_color_6 = s:gb.neutral_aqua[0]$/;"	v
g:terminal_color_7	vim/colors/OceanicNext.vim	/^let g:terminal_color_7=s:base05[0]$/;"	v
g:terminal_color_7	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_7=s:base05[0]$/;"	v
g:terminal_color_7	vim/colors/gruvbox.vim	/^  let g:terminal_color_7 = s:fg4[0]$/;"	v
g:terminal_color_8	vim/colors/OceanicNext.vim	/^let g:terminal_color_8=s:base00[0]$/;"	v
g:terminal_color_8	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_8=s:base03[0]$/;"	v
g:terminal_color_8	vim/colors/gruvbox.vim	/^  let g:terminal_color_8 = s:gray[0]$/;"	v
g:terminal_color_9	vim/colors/OceanicNext.vim	/^let g:terminal_color_9=s:base08[0]$/;"	v
g:terminal_color_9	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_9=s:base09[0]$/;"	v
g:terminal_color_9	vim/colors/gruvbox.vim	/^  let g:terminal_color_9 = s:red[0]$/;"	v
g:terminal_color_background	vim/colors/OceanicNext.vim	/^let g:terminal_color_background=s:base00[0]$/;"	v
g:terminal_color_background	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_background=s:base00[0]$/;"	v
g:terminal_color_foreground	vim/colors/OceanicNext.vim	/^let g:terminal_color_foreground=s:base10[0]$/;"	v
g:terminal_color_foreground	vim/colors/OceanicNextLight.vim	/^let g:terminal_color_foreground=s:base10[0]$/;"	v
g:test_user_autocmd	vim/pack/minpac/start/vim-rooter/test/test_rooter.vim	/^  let g:test_user_autocmd = 0$/;"	v
g:testname	vim/pack/minpac/opt/minpac/test/runtest.vim	/^let g:testname = expand('%')$/;"	v
g:testname	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^let g:testname = expand('%')$/;"	v
g:unimpaired_html_entities	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^let g:unimpaired_html_entities = {$/;"	v
g:vimshell_escape_colors	vim/colors/gruvbox.vim	/^let g:vimshell_escape_colors = [$/;"	v
g=	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^  nmap g= <Plug>ScripteaseFilter$/;"	m
g=	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^  xmap g= <Plug>ScripteaseFilter$/;"	m
g==	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^  nmap g== <Plug>ScripteaseFilter<SID>_$/;"	m
generator-star	eslintrc.json	/^    "generator-star": 0,$/;"	n	object:rules
generator-star-spacing	eslintrc.json	/^    "generator-star-spacing": ["error", { "before": true, "after": true }],$/;"	a	object:rules
generators	eslintrc.json	/^      "generators": false,$/;"	b	object:parserOptions.ecmaFeatures
get	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def get(self, x, y):$/;"	m	class:Canvas
getBytes	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytes() []byte {$/;"	f	unknown:tui.LightRenderer
getBytesInternal	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytesInternal(buffer []byte, nonblock bool) []byte {$/;"	f	unknown:tui.LightRenderer
getEnv	vim/pack/minpac/start/fzf/src/tui/light.go	/^func getEnv(name string, defaultValue int) int {$/;"	f	package:tui
getTerminalSize	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^def getTerminalSize():$/;"	f
getTerminalSize	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/image2term.py	/^def getTerminalSize():$/;"	f
getTerminalSize	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^def getTerminalSize():$/;"	f
get_pos	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^def get_pos(x, y):$/;"	f
getch	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f	unknown:tui.LightRenderer
getmainwindow	vim/pack/minpac/start/vim-minimap/autoload/minimap.py	/^def getmainwindow():$/;"	f
getmmwindow	vim/pack/minpac/start/vim-minimap/autoload/minimap.py	/^def getmmwindow():$/;"	f
gf	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^    nmap <buffer><silent> gf         <SID>:find <Plug><cfile><CR>$/;"	m
gh_release_url	vim/pack/minpac/opt/minpac/tools/dl-kaoriya-vim.py	/^gh_release_url = 'https:\/\/api.github.com\/repos\/' + repo_name + '\/releases\/latest'$/;"	v
global-strict	eslintrc.json	/^    "global-strict": 0,$/;"	n	object:rules
globals	eslintrc.json	/^  "globals": {$/;"	o
go	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def go(*args)$/;"	f
grepper#complete	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! grepper#complete(lead, line, _pos) abort$/;"	f
grepper#complete_files	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! grepper#complete_files(lead, _line, _pos)$/;"	f
grepper#statusline	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! grepper#statusline() abort$/;"	f
grey_color	vim/colors/twilight256.vim	/^    fun <SID>grey_color(n)$/;"	f
grey_level	vim/colors/twilight256.vim	/^    fun <SID>grey_level(n)$/;"	f
grey_number	vim/colors/twilight256.vim	/^    fun <SID>grey_number(x)$/;"	f
groups	eslintrc.json	/^      "groups": [$/;"	a	object:rules.no-mixed-operators.1
gs	vimrc	/^nmap gs <plug>(GrepperOperator)$/;"	m
gs	vimrc	/^xmap gs <plug>(GrepperOperator)$/;"	m
guard-for-in	eslintrc.json	/^    "guard-for-in": 0,$/;"	n	object:rules
gutentags#add_job	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#build_default_job_options	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#chdir	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#generate	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#init	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#on_job_exit	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#generate	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#init	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#on_job_exit	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#default_io_cb	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_io_cb(chan, msg) abort$/;"	f
gutentags#error	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#fake	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#find_job_index_by_data	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#get_cachefile	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_job_data	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_plat_file	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#init	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#inprogress	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#make_args	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#normalizepath	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#remove_job	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#rescan	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#start_job	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#statusline	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#stripslash	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#warning	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags_detect	vim/pack/minpac/start/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
h	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^        h = int(h * ratio)$/;"	v
h	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^    w, h = i.size$/;"	v
handle-callback-err	eslintrc.json	/^    "handle-callback-err": 0,$/;"	n	object:rules
handle-callback-err	eslintrc.json	/^    "handle-callback-err": ["error", "^(err|error)$" ],$/;"	a	object:rules
hasPlusFlag	vim/pack/minpac/start/fzf/src/terminal.go	/^func hasPlusFlag(template string) bool {$/;"	f	package:fzf
hasPreviewWindow	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewWindow() bool {$/;"	f	unknown:fzf.Terminal
hasPreviewer	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewer() bool {$/;"	f	unknown:fzf.Terminal
header	vim/pack/minpac/start/fzf/src/terminal.go	/^	header     []string$/;"	m	struct:fzf.Terminal
header0	vim/pack/minpac/start/fzf/src/terminal.go	/^	header0    []string$/;"	m	struct:fzf.Terminal
height	vim/pack/minpac/start/fzf/src/tui/light.go	/^	height        int$/;"	m	struct:tui.LightRenderer
height	vim/pack/minpac/start/fzf/src/tui/light.go	/^	height   int$/;"	m	struct:tui.LightWindow
height	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	height      int$/;"	m	struct:tui.TcellWindow
height	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^height = 100$/;"	v
help	vim/pack/minpac/start/fzf/bin/fzf-tmux	/^help() {$/;"	f
help	vim/pack/minpac/start/fzf/install	/^help() {$/;"	f
help	vim/pack/minpac/start/fzf/src/options.go	/^func help(code int) {$/;"	f	package:fzf
hi	vim/colors/OceanicNext.vim	/^function! <sid>hi(group, fg, bg, attr, attrsp)$/;"	f
hi	vim/colors/OceanicNextLight.vim	/^function! <sid>hi(group, fg, bg, attr, attrsp)$/;"	f
hidden	vim/pack/minpac/start/fzf/src/options.go	/^	hidden   bool$/;"	m	struct:fzf.previewOpts
history	vim/pack/minpac/start/fzf/src/terminal.go	/^	history    *History$/;"	m	struct:fzf.Terminal
hscroll	vim/pack/minpac/start/fzf/src/terminal.go	/^	hscroll    bool$/;"	m	struct:fzf.Terminal
hscrollOff	vim/pack/minpac/start/fzf/src/terminal.go	/^	hscrollOff int$/;"	m	struct:fzf.Terminal
i	vim/pack/minpac/start/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> i <NOP>$/;"	m
i	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^        i = i.resize((w, h), Image.ANTIALIAS)$/;"	v
i	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^    i = Image.open(StringIO(urllib2.urlopen(img_url).read())).convert('L')$/;"	v
i_converted	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^         i_converted = i.tostring()$/;"	v
id	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	id int$/;"	m	struct:tui.ColorPair
ignore	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^	ignore map[EventType]bool$/;"	m	struct:util.EventBox
ignoreComments	eslintrc.json	/^      "ignoreComments": 0,$/;"	n	object:rules
ignoreRestSiblings	eslintrc.json	/^    "no-unused-vars": ["error", { "vars": "all", "args": "none", "ignoreRestSiblings": true }],$/;"	b	object:rules.no-unused-vars.1
image2term	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/image2term.py	/^def image2term(image, threshold=128, ratio=None, invert=False):$/;"	f
img_url	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^    img_url = re.findall('http:\\\/\\\/imgs.xkcd.com\\\/comics\\\/[^"\\']+', c)[0]$/;"	v
import/export	eslintrc.json	/^    "import\/export": "error",$/;"	s	object:rules
import/first	eslintrc.json	/^    "import\/first": "error",$/;"	s	object:rules
import/no-duplicates	eslintrc.json	/^    "import\/no-duplicates": "error",$/;"	s	object:rules
import/no-webpack-loader-syntax	eslintrc.json	/^    "import\/no-webpack-loader-syntax": "error",$/;"	s	object:rules
imports	eslintrc.json	/^      "imports": "never",$/;"	s	object:rules.comma-dangle.1
inBytes	vim/pack/minpac/start/fzf/src/util/chars.go	/^	inBytes         bool$/;"	m	struct:util.Chars
include?	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def include?(_str)$/;"	f	class:NilClass
indent	eslintrc.json	/^    "indent": ["error", 2],$/;"	a	object:rules
index	vim/pack/minpac/start/fzf/src/matcher.go	/^	index   int$/;"	m	struct:fzf.partialResult
index	vim/pack/minpac/start/fzf/src/result.go	/^	index  int32$/;"	m	struct:fzf.colorOffset
indexAt	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func indexAt(index int, max int, forward bool) int {$/;"	f	package:algo
init	vim/pack/minpac/start/fzf/src/ansi.go	/^func init() {$/;"	f	package:fzf
init	vim/pack/minpac/start/fzf/src/constants.go	/^func init() {$/;"	f	package:fzf
init	vim/pack/minpac/start/fzf/src/options.go	/^func init() {$/;"	f	package:fzf
init	vim/pack/minpac/start/fzf/src/pattern.go	/^func init() {$/;"	f	package:fzf
init	vim/pack/minpac/start/fzf/src/pattern_test.go	/^func init() {$/;"	f	package:fzf
init	vim/pack/minpac/start/fzf/src/terminal.go	/^func init() {$/;"	f	package:fzf
init	vim/pack/minpac/start/fzf/src/tui/tui.go	/^func init() {$/;"	f	package:tui
initDelay	vim/pack/minpac/start/fzf/src/terminal.go	/^	initDelay  time.Duration$/;"	m	struct:fzf.Terminal
initFunc	vim/pack/minpac/start/fzf/src/terminal.go	/^	initFunc   func()$/;"	m	struct:fzf.Terminal
initPalette	vim/pack/minpac/start/fzf/src/tui/tui.go	/^func initPalette(theme *ColorTheme) {$/;"	f	package:tui
initScreen	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) initScreen() {$/;"	f	unknown:tui.FullscreenRenderer
initTheme	vim/pack/minpac/start/fzf/src/tui/tui.go	/^func initTheme(theme *ColorTheme, baseTheme *ColorTheme, forceBlack bool) {$/;"	f	package:tui
initialDelay	vim/pack/minpac/start/fzf/src/constants.go	/^	initialDelay    = 20 * time.Millisecond$/;"	c	package:fzf
initialDelayTac	vim/pack/minpac/start/fzf/src/constants.go	/^	initialDelayTac = 100 * time.Millisecond$/;"	c	package:fzf
initialize	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def initialize(shell = :bash)$/;"	f	class:Tmux
initialized	eslintrc.json	/^    "one-var": ["error", { "initialized": "never" }],$/;"	s	object:rules.one-var.1
inlineInfo	vim/pack/minpac/start/fzf/src/terminal.go	/^	inlineInfo bool$/;"	m	struct:fzf.Terminal
input	vim/pack/minpac/start/fzf/src/terminal.go	/^	input      []rune$/;"	m	struct:fzf.Terminal
install	vim/pack/minpac/start/colorizer/Makefile	/^install:$/;"	t
install	vim/pack/minpac/start/fzf/Makefile	/^install: bin\/fzf$/;"	t
intdefaultdict	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^def intdefaultdict():$/;"	f
interpretCode	vim/pack/minpac/start/fzf/src/ansi.go	/^func interpretCode(ansiCode string, prevState *ansiState) *ansiState {$/;"	f	package:fzf
inv	vim/pack/minpac/start/fzf/src/pattern.go	/^	inv           bool$/;"	m	struct:fzf.term
ioctl_GWINSZ	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def ioctl_GWINSZ(fd):$/;"	f	function:getTerminalSize	file:
ioctl_GWINSZ	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/image2term.py	/^    def ioctl_GWINSZ(fd):$/;"	f	function:getTerminalSize	file:
ioctl_GWINSZ	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^    def ioctl_GWINSZ(fd):$/;"	f	function:getTerminalSize	file:
is24	vim/pack/minpac/start/fzf/src/tui/tui.go	/^func (c Color) is24() bool {$/;"	f	unknown:tui.Color
is24	vim/pack/minpac/start/fzf/src/tui/tui.go	/^func (p ColorPair) is24() bool {$/;"	f	unknown:tui.ColorPair
isAlphabet	vim/pack/minpac/start/fzf/src/options.go	/^func isAlphabet(char uint8) bool {$/;"	f	package:fzf
isAscii	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func isAscii(runes []rune) bool {$/;"	f	package:algo
isExecuteAction	vim/pack/minpac/start/fzf/src/options.go	/^func isExecuteAction(str string) actionType {$/;"	f	package:fzf
isNumeric	vim/pack/minpac/start/fzf/src/options.go	/^func isNumeric(char uint8) bool {$/;"	f	package:fzf
isPreviewEnabled	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) isPreviewEnabled() bool {$/;"	f	unknown:fzf.Terminal
item	vim/pack/minpac/start/fzf/src/result.go	/^	item   *Item$/;"	m	struct:fzf.Result
item	vim/pack/minpac/start/fzf/src/terminal.go	/^	item *Item$/;"	m	struct:fzf.selectedItem
itemLine	vim/pack/minpac/start/fzf/src/terminal.go	/^type itemLine struct {$/;"	s	package:fzf
item_count	vim/pack/minpac/start/fzf/test/test_go.rb	/^          def item_count$/;"	f	method:until
items	vim/pack/minpac/start/fzf/src/chunklist.go	/^	items [chunkSize]Item$/;"	m	struct:fzf.Chunk
iter	vim/pack/minpac/start/fzf/src/pattern.go	/^func (p *Pattern) iter(pfun algo.Algo, tokens []Token, caseSensitive bool, normalize bool, forwa/;"	f	unknown:fzf.Pattern
jasmine	eslintrc.json	/^    "jasmine": false,$/;"	b	object:env
jellybeans	vim/pack/minpac/start/lightline.vim/README.md	/^### jellybeans$/;"	S
joinTokens	vim/pack/minpac/start/fzf/src/tokenizer.go	/^func joinTokens(tokens []Token) string {$/;"	f	package:fzf
jquery	eslintrc.json	/^    "jquery": true,$/;"	b	object:env
jsx	eslintrc.json	/^      "jsx": true$/;"	b	object:parserOptions.ecmaFeatures
jumpAcceptEnabled	vim/pack/minpac/start/fzf/src/terminal.go	/^	jumpAcceptEnabled$/;"	c	package:fzf
jumpDisabled	vim/pack/minpac/start/fzf/src/terminal.go	/^	jumpDisabled jumpMode = iota$/;"	c	package:fzf
jumpEnabled	vim/pack/minpac/start/fzf/src/terminal.go	/^	jumpEnabled$/;"	c	package:fzf
jumpLabels	vim/pack/minpac/start/fzf/src/terminal.go	/^	jumpLabels string$/;"	m	struct:fzf.Terminal
jumpMode	vim/pack/minpac/start/fzf/src/terminal.go	/^type jumpMode int$/;"	t	package:fzf
jumping	vim/pack/minpac/start/fzf/src/terminal.go	/^	jumping    jumpMode$/;"	m	struct:fzf.Terminal
key-spacing	eslintrc.json	/^    "key-spacing": 0,$/;"	n	object:rules
key-spacing	eslintrc.json	/^    "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],$/;"	a	object:rules
keyMatch	vim/pack/minpac/start/fzf/src/terminal.go	/^func keyMatch(key int, event tui.Event) bool {$/;"	f	package:fzf
keymap	vim/pack/minpac/start/fzf/src/terminal.go	/^	keymap     map[int][]action$/;"	m	struct:fzf.Terminal
keys	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^keys = Queue()$/;"	v
keyword-spacing	eslintrc.json	/^    "keyword-spacing": ["error", { "before": true, "after": true }],$/;"	a	object:rules
kill	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def kill$/;"	f
label	vim/pack/minpac/start/fzf/src/terminal.go	/^	label    string$/;"	m	struct:fzf.itemLine
landscape	vim/pack/minpac/start/lightline.vim/README.md	/^### landscape$/;"	S
lastChunk	vim/pack/minpac/start/fzf/src/chunklist.go	/^func (cl *ChunkList) lastChunk() *Chunk {$/;"	f	unknown:fzf.ChunkList
lastX	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	lastX       int$/;"	m	struct:tui.TcellWindow
lastY	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	lastY       int$/;"	m	struct:tui.TcellWindow
left	vim/pack/minpac/start/fzf/src/tui/light.go	/^	left     int$/;"	m	struct:tui.LightWindow
left	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	left        int$/;"	m	struct:tui.TcellWindow
left	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def left(self, angle):$/;"	m	class:Turtle
lightline	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^  augroup lightline$/;"	a
lightline	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^  augroup lightline-disable$/;"	a
lightline	vim/pack/minpac/start/lightline.vim/plugin/lightline.vim	/^augroup lightline$/;"	a
lightline#colorscheme	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#colorscheme() abort$/;"	f
lightline#colorscheme#background	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme.vim	/^  function! lightline#colorscheme#background() abort$/;"	f
lightline#colorscheme#fill	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme.vim	/^function! lightline#colorscheme#fill(p) abort$/;"	f
lightline#colorscheme#flatten	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme.vim	/^function! lightline#colorscheme#flatten(p) abort$/;"	f
lightline#colortable#gui2cui	vim/pack/minpac/start/lightline.vim/autoload/lightline/colortable.vim	/^function! lightline#colortable#gui2cui(rgb, fallback) abort$/;"	f
lightline#colortable#name_to_rgb	vim/pack/minpac/start/lightline.vim/autoload/lightline/colortable.vim	/^function! lightline#colortable#name_to_rgb(name) abort$/;"	f
lightline#concatenate	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#concatenate(xs, right) abort$/;"	f
lightline#disable	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#disable() abort$/;"	f
lightline#enable	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#enable() abort$/;"	f
lightline#error	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#error(msg) abort$/;"	f
lightline#highlight	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#highlight(...) abort$/;"	f
lightline#init	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#init() abort$/;"	f
lightline#link	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#link(...) abort$/;"	f
lightline#mode	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#mode() abort$/;"	f
lightline#onetab	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#onetab(n, active) abort$/;"	f
lightline#palette	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#palette() abort$/;"	f
lightline#statusline	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#statusline(inactive) abort$/;"	f
lightline#tab#filename	vim/pack/minpac/start/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#filename(n) abort$/;"	f
lightline#tab#modified	vim/pack/minpac/start/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#modified(n) abort$/;"	f
lightline#tab#readonly	vim/pack/minpac/start/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#readonly(n) abort$/;"	f
lightline#tab#tabnum	vim/pack/minpac/start/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#tabnum(n) abort$/;"	f
lightline#tabline	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#tabline() abort$/;"	f
lightline#tabs	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#tabs() abort$/;"	f
lightline#toggle	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#toggle() abort$/;"	f
lightline#update	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#update() abort$/;"	f
lightline#update_disable	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#update_disable() abort$/;"	f
lightline#update_once	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! lightline#update_once() abort$/;"	f
lightline.vim	vim/pack/minpac/start/lightline.vim/README.md	/^# lightline.vim$/;"	c
line	eslintrc.json	/^      "line": { "markers": ["*package", "!", "\/", ",", "="] },$/;"	o	object:rules.spaced-comment.2
line	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^def line(x1, y1, x2, y2):$/;"	f
lines	vim/pack/minpac/start/fzf/src/history.go	/^	lines    []string$/;"	m	struct:fzf.History
lines	vim/pack/minpac/start/fzf/src/terminal.go	/^	lines   int$/;"	m	struct:fzf.previewer
link_fzf_in_path	vim/pack/minpac/start/fzf/install	/^link_fzf_in_path() {$/;"	f
lists	vim/pack/minpac/start/fzf/src/merger.go	/^	lists   [][]Result$/;"	m	struct:fzf.Merger
loaded_colorizer	vim/pack/minpac/start/colorizer/plugin/colorizer.vim	/^let loaded_colorizer = 1$/;"	v
loaded_matchit	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^let loaded_matchit = 1$/;"	v
loaded_minimap	vim/pack/minpac/start/vim-minimap/plugin/minimap.vim	/^let loaded_minimap = 1$/;"	v
loaded_nerd_tree	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
lt	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    lt = left$/;"	v	class:Turtle
main	vim/pack/minpac/start/fzf/main.go	/^func main() {$/;"	f	package:main
main	vim/pack/minpac/start/fzf/main.go	/^package main$/;"	p
main	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^def main(stdscr):$/;"	f
makeSpace	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) makeSpace() {$/;"	f	unknown:tui.LightRenderer
mapleader	vimrc	/^let mapleader = ","               " set leaderkey to a comma - The default leader is '\\', but m/;"	v
maplocalleader	vimrc	/^let maplocalleader=','            " same as above? setting leaderkey (all my macros start with ,/;"	v
margin	vim/pack/minpac/start/fzf/src/terminal.go	/^	margin     [4]sizeSpec$/;"	m	struct:fzf.Terminal
markers	eslintrc.json	/^      "block": { "balanced": true, "markers": ["*package", "!", ",", ":", "::", "flow-include"],/;"	a	object:rules.spaced-comment.2.block
markers	eslintrc.json	/^      "line": { "markers": ["*package", "!", "\/", ",", "="] },$/;"	a	object:rules.spaced-comment.2.line
matchChunk	vim/pack/minpac/start/fzf/src/pattern.go	/^func (p *Pattern) matchChunk(chunk *Chunk, space []Result, slab *util.Slab) []Result {$/;"	f	unknown:fzf.Pattern
match_count	vim/pack/minpac/start/fzf/test/test_go.rb	/^          def match_count$/;"	f	method:until
matches	vim/pack/minpac/start/fzf/src/matcher.go	/^	matches []Result$/;"	m	struct:fzf.partialResult
max	eslintrc.json	/^    "no-multiple-empty-lines": ["error", { "max": 1, "maxEOF": 0 }],$/;"	n	object:rules.no-multiple-empty-lines.1
max-depth	eslintrc.json	/^    "max-depth": 0,$/;"	n	object:rules
max-len	eslintrc.json	/^    "max-len": 0,$/;"	n	object:rules
max-nested-callbacks	eslintrc.json	/^    "max-nested-callbacks": 0,$/;"	n	object:rules
max-params	eslintrc.json	/^    "max-params": 0,$/;"	n	object:rules
max-statements	eslintrc.json	/^    "max-statements": 0,$/;"	n	object:rules
maxDisplayWidthCalc	vim/pack/minpac/start/fzf/src/terminal.go	/^	maxDisplayWidthCalc = 1024$/;"	c	package:fzf
maxEOF	eslintrc.json	/^    "no-multiple-empty-lines": ["error", { "max": 1, "maxEOF": 0 }],$/;"	n	object:rules.no-multiple-empty-lines.1
maxHeightFunc	vim/pack/minpac/start/fzf/src/tui/light.go	/^	maxHeightFunc func(int) int$/;"	m	struct:tui.LightRenderer
maxItems	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) maxItems() int {$/;"	f	unknown:fzf.Terminal
maxPartitions	vim/pack/minpac/start/fzf/src/constants.go	/^	maxPartitions           = 32$/;"	c	package:fzf
maxSize	vim/pack/minpac/start/fzf/src/history.go	/^	maxSize  int$/;"	m	struct:fzf.History
merged	vim/pack/minpac/start/fzf/src/merger.go	/^	merged  []Result$/;"	m	struct:fzf.Merger
mergedGet	vim/pack/minpac/start/fzf/src/merger.go	/^func (mg *Merger) mergedGet(idx int) Result {$/;"	f	unknown:fzf.Merger
merger	vim/pack/minpac/start/fzf/src/terminal.go	/^	merger     *Merger$/;"	m	struct:fzf.Terminal
mergerCache	vim/pack/minpac/start/fzf/src/matcher.go	/^	mergerCache    map[string]*Merger$/;"	m	struct:fzf.Matcher
mergerCacheMax	vim/pack/minpac/start/fzf/src/constants.go	/^	mergerCacheMax int = 100000$/;"	c	package:fzf
minHeight	vim/pack/minpac/start/fzf/src/terminal.go	/^	minHeight = 4$/;"	c	package:fzf
minItem	vim/pack/minpac/start/fzf/src/item.go	/^var minItem = Item{text: util.Chars{Index: -1}}$/;"	v	package:fzf
minRank	vim/pack/minpac/start/fzf/src/result.go	/^func minRank() Result {$/;"	f	package:fzf
minWidth	vim/pack/minpac/start/fzf/src/terminal.go	/^	minWidth  = 16$/;"	c	package:fzf
minimap#CloseMinimap	vim/pack/minpac/start/vim-minimap/autoload/minimap.vim	/^function! minimap#CloseMinimap()$/;"	f
minimap#ShowMinimap	vim/pack/minpac/start/vim-minimap/autoload/minimap.vim	/^function! minimap#ShowMinimap()$/;"	f
minimap#ToggleMinimap	vim/pack/minpac/start/vim-minimap/autoload/minimap.vim	/^function! minimap#ToggleMinimap()$/;"	f
minimap#UpdateMinimap	vim/pack/minpac/start/vim-minimap/autoload/minimap.vim	/^function! minimap#UpdateMinimap()$/;"	f
minpac#add	vim/pack/minpac/opt/minpac/plugin/minpac.vim	/^function! minpac#add(plugname, ...) abort$/;"	f
minpac#add({url}[, {config}])	vim/pack/minpac/opt/minpac/README.md	/^#### minpac#add({url}[, {config}])$/;"	t
minpac#clean	vim/pack/minpac/opt/minpac/plugin/minpac.vim	/^function! minpac#clean(...)$/;"	f
minpac#clean([{name}])	vim/pack/minpac/opt/minpac/README.md	/^#### minpac#clean([{name}])$/;"	t
minpac#getpackages	vim/pack/minpac/opt/minpac/plugin/minpac.vim	/^function! minpac#getpackages(...)$/;"	f
minpac#getpackages([{packname}[, {packtype}[, {plugname}[, {nameonly}]]]])	vim/pack/minpac/opt/minpac/README.md	/^#### minpac#getpackages([{packname}[, {packtype}[, {plugname}[, {nameonly}]]]])$/;"	t
minpac#getpluginfo	vim/pack/minpac/opt/minpac/plugin/minpac.vim	/^function! minpac#getpluginfo(name)$/;"	f
minpac#getpluginfo({name})	vim/pack/minpac/opt/minpac/README.md	/^#### minpac#getpluginfo({name})$/;"	t
minpac#getpluglist	vim/pack/minpac/opt/minpac/plugin/minpac.vim	/^function! minpac#getpluglist()$/;"	f
minpac#impl#clean	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! minpac#impl#clean(args) abort$/;"	f
minpac#impl#getpackages	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! minpac#impl#getpackages(args) abort$/;"	f
minpac#impl#update	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! minpac#impl#update(args) abort$/;"	f
minpac#init	vim/pack/minpac/opt/minpac/plugin/minpac.vim	/^function! minpac#init(...) abort$/;"	f
minpac#init([{config}])	vim/pack/minpac/opt/minpac/README.md	/^#### minpac#init([{config}])$/;"	t
minpac#job#send	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! minpac#job#send(jobid, data) abort$/;"	f
minpac#job#start	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! minpac#job#start(cmd, opts) abort$/;"	f
minpac#job#stop	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! minpac#job#stop(jobid) abort$/;"	f
minpac#job#wait	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! minpac#job#wait(jobids, ...) abort$/;"	f
minpac#update	vim/pack/minpac/opt/minpac/plugin/minpac.vim	/^function! minpac#update(...)$/;"	f
minpac#update([{name}[, {config}]])	vim/pack/minpac/opt/minpac/README.md	/^#### minpac#update([{name}[, {config}]])$/;"	t
minpac: A minimal package manager for Vim 8 (and Neovim)	vim/pack/minpac/opt/minpac/README.md	/^minpac: A minimal package manager for Vim 8 (and Neovim)$/;"	c
mocha	eslintrc.json	/^    "mocha": false,$/;"	b	object:env
modified	vim/pack/minpac/start/fzf/src/history.go	/^	modified map[int]string$/;"	m	struct:fzf.History
mouse	vim/pack/minpac/start/fzf/src/tui/light.go	/^	mouse         bool$/;"	m	struct:tui.LightRenderer
mouse	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	mouse        bool$/;"	m	struct:tui.FullscreenRenderer
mouseSequence	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) mouseSequence(sz *int) Event {$/;"	f	unknown:tui.LightRenderer
move	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) move(y int, x int, clear bool) {$/;"	f	unknown:fzf.Terminal
move	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) move(y int, x int) {$/;"	f	unknown:tui.LightRenderer
move	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def move(self, x, y):$/;"	m	class:Turtle
moveCursor	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	moveCursor  bool$/;"	m	struct:tui.TcellWindow
multi	vim/pack/minpac/start/fzf/src/terminal.go	/^	multi      bool$/;"	m	struct:fzf.Terminal
mutex	vim/pack/minpac/start/fzf/src/cache.go	/^	mutex sync.Mutex$/;"	m	struct:fzf.ChunkCache
mutex	vim/pack/minpac/start/fzf/src/chunklist.go	/^	mutex  sync.Mutex$/;"	m	struct:fzf.ChunkList
mutex	vim/pack/minpac/start/fzf/src/terminal.go	/^	mutex      sync.Mutex$/;"	m	struct:fzf.Terminal
mutex	vim/pack/minpac/start/fzf/src/util/atomicbool.go	/^	mutex sync.Mutex$/;"	m	struct:util.AtomicBool
mv	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    mv = move$/;"	v	class:Turtle
n	vimrc	/^map n nzz$/;"	m
name	vim/pack/minpac/opt/minpac/tools/dl-kaoriya-vim.py	/^        name = args.filename$/;"	v
navigator	eslintrc.json	/^    "navigator": false,$/;"	b	object:globals
nerdtree#checkForBrowse	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir)$/;"	f
nerdtree#compareNodes	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2)$/;"	f
nerdtree#compareNodesBySortKey	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodesBySortKey(n1, n2)$/;"	f
nerdtree#completeBookmarks	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P)$/;"	f
nerdtree#deprecated	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...)$/;"	f
nerdtree#echo	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg)$/;"	f
nerdtree#echoError	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg)$/;"	f
nerdtree#echoWarning	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg)$/;"	f
nerdtree#exec	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd)$/;"	f
nerdtree#has_opt	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name)$/;"	f
nerdtree#loadClassFiles	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles()$/;"	f
nerdtree#postSourceActions	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions()$/;"	f
nerdtree#renderView	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView()$/;"	f
nerdtree#runningCygwin	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningCygwin()$/;"	f
nerdtree#runningWindows	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows()$/;"	f
nerdtree#ui_glue#bookmarkNode	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...)$/;"	f
nerdtree#ui_glue#chRootCwd	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd()$/;"	f
nerdtree#ui_glue#clearBookmarks	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks)$/;"	f
nerdtree#ui_glue#createDefaultBindings	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings()$/;"	f
nerdtree#ui_glue#invokeKeyMap	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key)$/;"	f
nerdtree#ui_glue#openBookmark	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name)$/;"	f
nerdtree#ui_glue#revealBookmark	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name)$/;"	f
nerdtree#ui_glue#setupCommands	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands()$/;"	f
nerdtree#ui_glue#upDir	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(preserveState)$/;"	f
nerdtree#version	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version()$/;"	f
new-cap	eslintrc.json	/^    "new-cap": 0,$/;"	n	object:rules
new-cap	eslintrc.json	/^    "new-cap": ["error", { "newIsCap": true, "capIsNew": false }],$/;"	a	object:rules
new-parens	eslintrc.json	/^    "new-parens": "error",$/;"	s	object:rules
new-parens	eslintrc.json	/^    "new-parens": 0,$/;"	n	object:rules
newIsCap	eslintrc.json	/^    "new-cap": ["error", { "newIsCap": true, "capIsNew": false }],$/;"	b	object:rules.new-cap.1
newItem	vim/pack/minpac/start/fzf/src/terminal_test.go	/^func newItem(str string) *Item {$/;"	f	package:fzf
newRange	vim/pack/minpac/start/fzf/src/tokenizer.go	/^func newRange(begin int, end int) Range {$/;"	f	package:fzf
new_shell	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestBash
new_shell	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestFish
new_shell	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestZsh
newtests	vim/pack/minpac/opt/minpac/test/Make_win.mak	/^newtests: $(NEW_TESTS)$/;"	t
newtests	vim/pack/minpac/opt/minpac/test/Makefile	/^newtests: newtestssilent$/;"	t
newtestssilent	vim/pack/minpac/opt/minpac/test/Makefile	/^newtestssilent: $(NEW_TESTS)$/;"	t
next	vim/pack/minpac/start/fzf/src/history.go	/^func (h *History) next() string {$/;"	f	unknown:fzf.History
nextInt	vim/pack/minpac/start/fzf/src/options.go	/^func nextInt(args []string, i *int, message string) int {$/;"	f	package:fzf
nextString	vim/pack/minpac/start/fzf/src/options.go	/^func nextString(args []string, i *int, message string) string {$/;"	f	package:fzf
no-alert	eslintrc.json	/^    "no-alert": 0,$/;"	n	object:rules
no-array-constructor	eslintrc.json	/^    "no-array-constructor": "error",$/;"	s	object:rules
no-array-constructor	eslintrc.json	/^    "no-array-constructor": 0,$/;"	n	object:rules
no-bitwise	eslintrc.json	/^    "no-bitwise": 0,$/;"	n	object:rules
no-caller	eslintrc.json	/^    "no-caller": "error",$/;"	s	object:rules
no-caller	eslintrc.json	/^    "no-caller": 0,$/;"	n	object:rules
no-catch-shadow	eslintrc.json	/^    "no-catch-shadow": 0,$/;"	n	object:rules
no-class-assign	eslintrc.json	/^    "no-class-assign": "error",$/;"	s	object:rules
no-comma-dangle	eslintrc.json	/^    "no-comma-dangle": 0,$/;"	n	object:rules
no-compare-neg-zero	eslintrc.json	/^    "no-compare-neg-zero": "error",$/;"	s	object:rules
no-cond-assign	eslintrc.json	/^    "no-cond-assign": "error",$/;"	s	object:rules
no-cond-assign	eslintrc.json	/^    "no-cond-assign": 0,$/;"	n	object:rules
no-console	eslintrc.json	/^    "no-console": 0,$/;"	n	object:rules
no-const-assign	eslintrc.json	/^    "no-const-assign": "error",$/;"	s	object:rules
no-constant-condition	eslintrc.json	/^    "no-constant-condition": 0,$/;"	n	object:rules
no-constant-condition	eslintrc.json	/^    "no-constant-condition": ["error", { "checkLoops": false }],$/;"	a	object:rules
no-control-regex	eslintrc.json	/^    "no-control-regex": "error",$/;"	s	object:rules
no-control-regex	eslintrc.json	/^    "no-control-regex": 0,$/;"	n	object:rules
no-debugger	eslintrc.json	/^    "no-debugger": "error",$/;"	s	object:rules
no-debugger	eslintrc.json	/^    "no-debugger": 0,$/;"	n	object:rules
no-delete-var	eslintrc.json	/^    "no-delete-var": "error",$/;"	s	object:rules
no-delete-var	eslintrc.json	/^    "no-delete-var": 0,$/;"	n	object:rules
no-div-regex	eslintrc.json	/^    "no-div-regex": 0,$/;"	n	object:rules
no-dupe-args	eslintrc.json	/^    "no-dupe-args": "error",$/;"	s	object:rules
no-dupe-class-members	eslintrc.json	/^    "no-dupe-class-members": "error",$/;"	s	object:rules
no-dupe-keys	eslintrc.json	/^    "no-dupe-keys": "error",$/;"	s	object:rules
no-dupe-keys	eslintrc.json	/^    "no-dupe-keys": 0,$/;"	n	object:rules
no-duplicate-case	eslintrc.json	/^    "no-duplicate-case": "error",$/;"	s	object:rules
no-else-return	eslintrc.json	/^    "no-else-return": 0,$/;"	n	object:rules
no-empty	eslintrc.json	/^    "no-empty": 0,$/;"	n	object:rules
no-empty-character-class	eslintrc.json	/^    "no-empty-character-class": "error",$/;"	s	object:rules
no-empty-class	eslintrc.json	/^    "no-empty-class": 0,$/;"	n	object:rules
no-empty-label	eslintrc.json	/^    "no-empty-label": 0,$/;"	n	object:rules
no-empty-pattern	eslintrc.json	/^    "no-empty-pattern": "error",$/;"	s	object:rules
no-eq-null	eslintrc.json	/^    "no-eq-null": 0,$/;"	n	object:rules
no-eval	eslintrc.json	/^    "no-eval": "error",$/;"	s	object:rules
no-eval	eslintrc.json	/^    "no-eval": 0,$/;"	n	object:rules
no-ex-assign	eslintrc.json	/^    "no-ex-assign": "error",$/;"	s	object:rules
no-ex-assign	eslintrc.json	/^    "no-ex-assign": 0,$/;"	n	object:rules
no-extend-native	eslintrc.json	/^    "no-extend-native": "error",$/;"	s	object:rules
no-extend-native	eslintrc.json	/^    "no-extend-native": 0,$/;"	n	object:rules
no-extra-bind	eslintrc.json	/^    "no-extra-bind": "error",$/;"	s	object:rules
no-extra-bind	eslintrc.json	/^    "no-extra-bind": 0,$/;"	n	object:rules
no-extra-boolean-cast	eslintrc.json	/^    "no-extra-boolean-cast": "error",$/;"	s	object:rules
no-extra-boolean-cast	eslintrc.json	/^    "no-extra-boolean-cast": 0,$/;"	n	object:rules
no-extra-parens	eslintrc.json	/^    "no-extra-parens": 0,$/;"	n	object:rules
no-extra-parens	eslintrc.json	/^    "no-extra-parens": ["error", "functions"],$/;"	a	object:rules
no-extra-semi	eslintrc.json	/^    "no-extra-semi": 0,$/;"	n	object:rules
no-extra-strict	eslintrc.json	/^    "no-extra-strict": 0,$/;"	n	object:rules
no-fallthrough	eslintrc.json	/^    "no-fallthrough": "error",$/;"	s	object:rules
no-fallthrough	eslintrc.json	/^    "no-fallthrough": 0,$/;"	n	object:rules
no-floating-decimal	eslintrc.json	/^    "no-floating-decimal": "error",$/;"	s	object:rules
no-floating-decimal	eslintrc.json	/^    "no-floating-decimal": 0,$/;"	n	object:rules
no-func-assign	eslintrc.json	/^    "no-func-assign": "error",$/;"	s	object:rules
no-func-assign	eslintrc.json	/^    "no-func-assign": 0,$/;"	n	object:rules
no-global-assign	eslintrc.json	/^    "no-global-assign": "error",$/;"	s	object:rules
no-implied-eval	eslintrc.json	/^    "no-implied-eval": "error",$/;"	s	object:rules
no-implied-eval	eslintrc.json	/^    "no-implied-eval": 0,$/;"	n	object:rules
no-inline-comments	eslintrc.json	/^    "no-inline-comments": 0,$/;"	n	object:rules
no-inner-declarations	eslintrc.json	/^    "no-inner-declarations": 0,$/;"	n	object:rules
no-inner-declarations	eslintrc.json	/^    "no-inner-declarations": ["error", "functions"],$/;"	a	object:rules
no-invalid-regexp	eslintrc.json	/^    "no-invalid-regexp": "error",$/;"	s	object:rules
no-invalid-regexp	eslintrc.json	/^    "no-invalid-regexp": 0,$/;"	n	object:rules
no-irregular-whitespace	eslintrc.json	/^    "no-irregular-whitespace": 1,$/;"	n	object:rules
no-iterator	eslintrc.json	/^    "no-iterator": "error",$/;"	s	object:rules
no-iterator	eslintrc.json	/^    "no-iterator": 0,$/;"	n	object:rules
no-label-var	eslintrc.json	/^    "no-label-var": "error",$/;"	s	object:rules
no-label-var	eslintrc.json	/^    "no-label-var": 0,$/;"	n	object:rules
no-labels	eslintrc.json	/^    "no-labels": 0,$/;"	n	object:rules
no-labels	eslintrc.json	/^    "no-labels": ["error", { "allowLoop": false, "allowSwitch": false }],$/;"	a	object:rules
no-lone-blocks	eslintrc.json	/^    "no-lone-blocks": "error",$/;"	s	object:rules
no-lone-blocks	eslintrc.json	/^    "no-lone-blocks": 0,$/;"	n	object:rules
no-lonely-if	eslintrc.json	/^    "no-lonely-if": 0,$/;"	n	object:rules
no-loop-func	eslintrc.json	/^    "no-loop-func": 0,$/;"	n	object:rules
no-mixed-operators	eslintrc.json	/^    "no-mixed-operators": ["error", {$/;"	a	object:rules
no-mixed-requires	eslintrc.json	/^    "no-mixed-requires": 0,$/;"	n	object:rules
no-mixed-spaces-and-tabs	eslintrc.json	/^    "no-mixed-spaces-and-tabs": 1,$/;"	n	object:rules
no-multi-spaces	eslintrc.json	/^    "no-multi-spaces": 0,$/;"	n	object:rules
no-multi-str	eslintrc.json	/^    "no-multi-str": "error",$/;"	s	object:rules
no-multi-str	eslintrc.json	/^    "no-multi-str": 0,$/;"	n	object:rules
no-multiple-empty-lines	eslintrc.json	/^    "no-multiple-empty-lines": 0,$/;"	n	object:rules
no-multiple-empty-lines	eslintrc.json	/^    "no-multiple-empty-lines": ["error", { "max": 1, "maxEOF": 0 }],$/;"	a	object:rules
no-native-reassign	eslintrc.json	/^    "no-native-reassign": 0,$/;"	n	object:rules
no-negated-in-lhs	eslintrc.json	/^    "no-negated-in-lhs": "error",$/;"	s	object:rules
no-negated-in-lhs	eslintrc.json	/^    "no-negated-in-lhs": 0,$/;"	n	object:rules
no-nested-ternary	eslintrc.json	/^    "no-nested-ternary": 0,$/;"	n	object:rules
no-new	eslintrc.json	/^    "no-new": "error",$/;"	s	object:rules
no-new	eslintrc.json	/^    "no-new": 0,$/;"	n	object:rules
no-new-func	eslintrc.json	/^    "no-new-func": "error",$/;"	s	object:rules
no-new-func	eslintrc.json	/^    "no-new-func": 0,$/;"	n	object:rules
no-new-object	eslintrc.json	/^    "no-new-object": "error",$/;"	s	object:rules
no-new-object	eslintrc.json	/^    "no-new-object": 0,$/;"	n	object:rules
no-new-require	eslintrc.json	/^    "no-new-require": "error",$/;"	s	object:rules
no-new-require	eslintrc.json	/^    "no-new-require": 0,$/;"	n	object:rules
no-new-symbol	eslintrc.json	/^    "no-new-symbol": "error",$/;"	s	object:rules
no-new-wrappers	eslintrc.json	/^    "no-new-wrappers": "error",$/;"	s	object:rules
no-new-wrappers	eslintrc.json	/^    "no-new-wrappers": 0,$/;"	n	object:rules
no-obj-calls	eslintrc.json	/^    "no-obj-calls": "error",$/;"	s	object:rules
no-obj-calls	eslintrc.json	/^    "no-obj-calls": 0,$/;"	n	object:rules
no-octal	eslintrc.json	/^    "no-octal": "error",$/;"	s	object:rules
no-octal	eslintrc.json	/^    "no-octal": 0,$/;"	n	object:rules
no-octal-escape	eslintrc.json	/^    "no-octal-escape": "error",$/;"	s	object:rules
no-octal-escape	eslintrc.json	/^    "no-octal-escape": 0,$/;"	n	object:rules
no-path-concat	eslintrc.json	/^    "no-path-concat": "error",$/;"	s	object:rules
no-path-concat	eslintrc.json	/^    "no-path-concat": 0,$/;"	n	object:rules
no-plusplus	eslintrc.json	/^    "no-plusplus": 0,$/;"	n	object:rules
no-process-env	eslintrc.json	/^    "no-process-env": 0,$/;"	n	object:rules
no-process-exit	eslintrc.json	/^    "no-process-exit": 0,$/;"	n	object:rules
no-proto	eslintrc.json	/^    "no-proto": "error",$/;"	s	object:rules
no-proto	eslintrc.json	/^    "no-proto": 0,$/;"	n	object:rules
no-redeclare	eslintrc.json	/^    "no-redeclare": "error",$/;"	s	object:rules
no-redeclare	eslintrc.json	/^    "no-redeclare": 0,$/;"	n	object:rules
no-regex-spaces	eslintrc.json	/^    "no-regex-spaces": 1,$/;"	n	object:rules
no-reserved-keys	eslintrc.json	/^    "no-reserved-keys": 0,$/;"	n	object:rules
no-restricted-modules	eslintrc.json	/^    "no-restricted-modules": 0,$/;"	n	object:rules
no-return-assign	eslintrc.json	/^    "no-return-assign": 0,$/;"	n	object:rules
no-return-assign	eslintrc.json	/^    "no-return-assign": ["error", "except-parens"],$/;"	a	object:rules
no-return-await	eslintrc.json	/^    "no-return-await": "error",$/;"	s	object:rules
no-script-url	eslintrc.json	/^    "no-script-url": 0,$/;"	n	object:rules
no-self-assign	eslintrc.json	/^    "no-self-assign": "error",$/;"	s	object:rules
no-self-compare	eslintrc.json	/^    "no-self-compare": "error",$/;"	s	object:rules
no-self-compare	eslintrc.json	/^    "no-self-compare": 0,$/;"	n	object:rules
no-sequences	eslintrc.json	/^    "no-sequences": "error",$/;"	s	object:rules
no-sequences	eslintrc.json	/^    "no-sequences": 0,$/;"	n	object:rules
no-shadow	eslintrc.json	/^    "no-shadow": 0,$/;"	n	object:rules
no-shadow-restricted-names	eslintrc.json	/^    "no-shadow-restricted-names": "error",$/;"	s	object:rules
no-shadow-restricted-names	eslintrc.json	/^    "no-shadow-restricted-names": 0,$/;"	n	object:rules
no-spaced-func	eslintrc.json	/^    "no-spaced-func": 0,$/;"	n	object:rules
no-sparse-arrays	eslintrc.json	/^    "no-sparse-arrays": "error",$/;"	s	object:rules
no-sparse-arrays	eslintrc.json	/^    "no-sparse-arrays": 0,$/;"	n	object:rules
no-sync	eslintrc.json	/^    "no-sync": 0,$/;"	n	object:rules
no-tabs	eslintrc.json	/^    "no-tabs": "error",$/;"	s	object:rules
no-template-curly-in-string	eslintrc.json	/^    "no-template-curly-in-string": "error",$/;"	s	object:rules
no-ternary	eslintrc.json	/^    "no-ternary": 0,$/;"	n	object:rules
no-this-before-super	eslintrc.json	/^    "no-this-before-super": "error",$/;"	s	object:rules
no-throw-literal	eslintrc.json	/^    "no-throw-literal": "error",$/;"	s	object:rules
no-trailing-spaces	eslintrc.json	/^    "no-trailing-spaces": 1,$/;"	n	object:rules
no-undef	eslintrc.json	/^    "no-undef": "error",$/;"	s	object:rules
no-undef	eslintrc.json	/^    "no-undef": 0,$/;"	n	object:rules
no-undef-init	eslintrc.json	/^    "no-undef-init": "error",$/;"	s	object:rules
no-undef-init	eslintrc.json	/^    "no-undef-init": 0,$/;"	n	object:rules
no-undefined	eslintrc.json	/^    "no-undefined": 0,$/;"	n	object:rules
no-underscore-dangle	eslintrc.json	/^    "no-underscore-dangle": 0,$/;"	n	object:rules
no-unexpected-multiline	eslintrc.json	/^    "no-unexpected-multiline": "error",$/;"	s	object:rules
no-unmodified-loop-condition	eslintrc.json	/^    "no-unmodified-loop-condition": "error",$/;"	s	object:rules
no-unneeded-ternary	eslintrc.json	/^    "no-unneeded-ternary": ["error", { "defaultAssignment": false }],$/;"	a	object:rules
no-unreachable	eslintrc.json	/^    "no-unreachable": "error",$/;"	s	object:rules
no-unreachable	eslintrc.json	/^    "no-unreachable": 0,$/;"	n	object:rules
no-unsafe-finally	eslintrc.json	/^    "no-unsafe-finally": "error",$/;"	s	object:rules
no-unsafe-negation	eslintrc.json	/^    "no-unsafe-negation": "error",$/;"	s	object:rules
no-unused-expressions	eslintrc.json	/^    "no-unused-expressions": 0,$/;"	n	object:rules
no-unused-expressions	eslintrc.json	/^    "no-unused-expressions": ["error", { "allowShortCircuit": true, "allowTernary": true, "allow/;"	a	object:rules
no-unused-vars	eslintrc.json	/^    "no-unused-vars": 0,$/;"	n	object:rules
no-unused-vars	eslintrc.json	/^    "no-unused-vars": ["error", { "vars": "all", "args": "none", "ignoreRestSiblings": true }],$/;"	a	object:rules
no-use-before-define	eslintrc.json	/^    "no-use-before-define": 0,$/;"	n	object:rules
no-use-before-define	eslintrc.json	/^    "no-use-before-define": ["error", { "functions": false, "classes": false, "variables": false/;"	a	object:rules
no-useless-call	eslintrc.json	/^    "no-useless-call": "error",$/;"	s	object:rules
no-useless-computed-key	eslintrc.json	/^    "no-useless-computed-key": "error",$/;"	s	object:rules
no-useless-constructor	eslintrc.json	/^    "no-useless-constructor": "error",$/;"	s	object:rules
no-useless-escape	eslintrc.json	/^    "no-useless-escape": "error",$/;"	s	object:rules
no-useless-rename	eslintrc.json	/^    "no-useless-rename": "error",$/;"	s	object:rules
no-useless-return	eslintrc.json	/^    "no-useless-return": "error",$/;"	s	object:rules
no-var	eslintrc.json	/^    "no-var": 0,$/;"	n	object:rules
no-void	eslintrc.json	/^    "no-void": 0,$/;"	n	object:rules
no-warning-comments	eslintrc.json	/^    "no-warning-comments": 0,$/;"	n	object:rules
no-whitespace-before-property	eslintrc.json	/^    "no-whitespace-before-property": "error",$/;"	s	object:rules
no-with	eslintrc.json	/^    "no-with": "error",$/;"	s	object:rules
no-with	eslintrc.json	/^    "no-with": 0,$/;"	n	object:rules
no-wrap-func	eslintrc.json	/^    "no-wrap-func": 0,$/;"	n	object:rules
node	eslintrc.json	/^    "node": true,$/;"	b	object:env
node/no-deprecated-api	eslintrc.json	/^    "node\/no-deprecated-api": "error",$/;"	s	object:rules
node/process-exit-as-throw	eslintrc.json	/^    "node\/process-exit-as-throw": "error",$/;"	s	object:rules
nolog	vim/pack/minpac/opt/minpac/test/Make_win.mak	/^nolog:$/;"	t
nolog	vim/pack/minpac/opt/minpac/test/Makefile	/^nolog:$/;"	t
nonwords	eslintrc.json	/^    "space-unary-ops": ["error", { "words": true, "nonwords": false }],$/;"	b	object:rules.space-unary-ops.1
normalize	vim/pack/minpac/start/fzf/src/pattern.go	/^	normalize     bool$/;"	m	struct:fzf.Pattern
normalize	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^def normalize(coord):$/;"	f
normalizeRune	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func normalizeRune(r rune) rune {$/;"	f	package:algo
normalized	vim/pack/minpac/start/fzf/src/algo/normalize.go	/^var normalized map[rune]rune = map[rune]rune{$/;"	v	package:algo
notifyOnCont	vim/pack/minpac/start/fzf/src/terminal_unix.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnCont	vim/pack/minpac/start/fzf/src/terminal_windows.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	vim/pack/minpac/start/fzf/src/terminal_unix.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	vim/pack/minpac/start/fzf/src/terminal_windows.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyStop	vim/pack/minpac/start/fzf/src/terminal_unix.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
notifyStop	vim/pack/minpac/start/fzf/src/terminal_windows.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
nth	vim/pack/minpac/start/fzf/src/pattern.go	/^	nth           []Range$/;"	m	struct:fzf.Pattern
null	eslintrc.json	/^    "eqeqeq": ["error", "always", { "null": "ignore" }],$/;"	s	object:rules.eqeqeq.2
numLinesMax	vim/pack/minpac/start/fzf/src/terminal.go	/^func numLinesMax(str string, max int) int {$/;"	f	package:fzf
numPartitionsMultiplier	vim/pack/minpac/start/fzf/src/constants.go	/^	numPartitionsMultiplier = 8$/;"	c	package:fzf
o	vim/pack/minpac/start/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> o <NOP>$/;"	m
o	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^  nmap <buffer> o    <plug>(grepper-side-context-open)<cr>$/;"	m
object-property-newline	eslintrc.json	/^    "object-property-newline": ["error", { "allowMultiplePropertiesPerLine": true }],$/;"	a	object:rules
objectLiteralComputedProperties	eslintrc.json	/^      "objectLiteralComputedProperties": false,$/;"	b	object:parserOptions.ecmaFeatures
objectLiteralDuplicateProperties	eslintrc.json	/^      "objectLiteralDuplicateProperties": false,$/;"	b	object:parserOptions.ecmaFeatures
objectLiteralShorthandMethods	eslintrc.json	/^      "objectLiteralShorthandMethods": false,$/;"	b	object:parserOptions.ecmaFeatures
objectLiteralShorthandProperties	eslintrc.json	/^      "objectLiteralShorthandProperties": false,$/;"	b	object:parserOptions.ecmaFeatures
objects	eslintrc.json	/^      "objects": "never",$/;"	s	object:rules.comma-dangle.1
octalLiterals	eslintrc.json	/^      "octalLiterals": false,$/;"	b	object:parserOptions.ecmaFeatures
offset	vim/pack/minpac/start/fzf/src/ansi.go	/^	offset [2]int32$/;"	m	struct:fzf.ansiOffset
offset	vim/pack/minpac/start/fzf/src/result.go	/^	offset [2]int32$/;"	m	struct:fzf.colorOffset
offset	vim/pack/minpac/start/fzf/src/terminal.go	/^	offset     int$/;"	m	struct:fzf.Terminal
offset	vim/pack/minpac/start/fzf/src/terminal.go	/^	offset  int$/;"	m	struct:fzf.previewer
offsetPollTries	vim/pack/minpac/start/fzf/src/tui/light.go	/^	offsetPollTries = 10$/;"	c	package:tui
offsetRegexp	vim/pack/minpac/start/fzf/src/tui/light.go	/^var offsetRegexp *regexp.Regexp = regexp.MustCompile("\\x1b\\\\[([0-9]+);([0-9]+)R")$/;"	v	package:tui
one	vim/pack/minpac/start/lightline.vim/README.md	/^### one$/;"	S
one-var	eslintrc.json	/^    "one-var": 0,$/;"	n	object:rules
one-var	eslintrc.json	/^    "one-var": ["error", { "initialized": "never" }],$/;"	a	object:rules
openTtyIn	vim/pack/minpac/start/fzf/src/tui/light.go	/^func openTtyIn() *os.File {$/;"	f	package:tui
operator-assignment	eslintrc.json	/^    "operator-assignment": 0,$/;"	n	object:rules
operator-linebreak	eslintrc.json	/^    "operator-linebreak": ["error", "after", { "overrides": { "?": "before", ":": "before" } }],$/;"	a	object:rules
optString	vim/pack/minpac/start/fzf/src/options.go	/^func optString(arg string, prefixes ...string) (bool, string) {$/;"	f	package:fzf
optionalNextString	vim/pack/minpac/start/fzf/src/options.go	/^func optionalNextString(args []string, i *int) string {$/;"	f	package:fzf
optionalNumeric	vim/pack/minpac/start/fzf/src/options.go	/^func optionalNumeric(args []string, i *int) int {$/;"	f	package:fzf
optionalRunes	vim/pack/minpac/start/fzf/src/util/chars.go	/^func (chars *Chars) optionalRunes() []rune {$/;"	f	unknown:util.Chars
opts.sink	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^  function! opts.sink(lines)$/;"	f
opts.sink	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^    function! opts.sink(lines) abort$/;"	f
optsFor	vim/pack/minpac/start/fzf/src/options_test.go	/^func optsFor(words ...string) *Options {$/;"	f	package:fzf
origState	vim/pack/minpac/start/fzf/src/tui/light.go	/^	origState     *terminal.State$/;"	m	struct:tui.LightRenderer
origText	vim/pack/minpac/start/fzf/src/item.go	/^	origText    *[]byte       \/\/ 8$/;"	m	struct:fzf.Item
origin	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) origin() {$/;"	f	unknown:tui.LightRenderer
outerIIFEBody	eslintrc.json	/^      "outerIIFEBody": 1,$/;"	n	object:rules
output	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) output() bool {$/;"	f	unknown:fzf.Terminal
overflow	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) overflow(runes []rune, max int) bool {$/;"	f	unknown:fzf.Terminal
overflow32	vim/pack/minpac/start/fzf/src/util/chars.go	/^	overflow32 uint32 = 0x80808080$/;"	c	package:util
overflow64	vim/pack/minpac/start/fzf/src/util/chars.go	/^	overflow64 uint64 = 0x8080808080808080$/;"	c	package:util
override	vim/pack/minpac/start/fzf/src/history.go	/^func (h *History) override(str string) {$/;"	f	unknown:fzf.History
overrides	eslintrc.json	/^    "operator-linebreak": ["error", "after", { "overrides": { "?": "before", ":": "before" } }],$/;"	o	object:rules.operator-linebreak.2
padded-blocks	eslintrc.json	/^    "padded-blocks": 0,$/;"	n	object:rules
padded-blocks	eslintrc.json	/^    "padded-blocks": ["error", { "blocks": "never", "switches": "never", "classes": "never" }],$/;"	a	object:rules
parameters	eslintrc.json	/^      "FunctionDeclaration": ["error", { "parameters": 1, "body": 1 }],$/;"	n	object:rules.FunctionDeclaration.1
parameters	eslintrc.json	/^      "FunctionExpression": ["error", { "parameters": 1, "body": 1 }],$/;"	n	object:rules.FunctionExpression.1
parseAlgo	vim/pack/minpac/start/fzf/src/options.go	/^func parseAlgo(str string) algo.Algo {$/;"	f	package:fzf
parseHeight	vim/pack/minpac/start/fzf/src/options.go	/^func parseHeight(str string) sizeSpec {$/;"	f	package:fzf
parseKeyChords	vim/pack/minpac/start/fzf/src/options.go	/^func parseKeyChords(str string, message string) map[int]string {$/;"	f	package:fzf
parseKeymap	vim/pack/minpac/start/fzf/src/options.go	/^func parseKeymap(keymap map[int][]action, str string) {$/;"	f	package:fzf
parseMargin	vim/pack/minpac/start/fzf/src/options.go	/^func parseMargin(margin string) [4]sizeSpec {$/;"	f	package:fzf
parseOptions	vim/pack/minpac/start/fzf/src/options.go	/^func parseOptions(opts *Options, allArgs []string) {$/;"	f	package:fzf
parsePlaceholder	vim/pack/minpac/start/fzf/src/terminal.go	/^func parsePlaceholder(match string) (bool, string, placeholderFlags) {$/;"	f	package:fzf
parsePreviewWindow	vim/pack/minpac/start/fzf/src/options.go	/^func parsePreviewWindow(opts *previewOpts, input string) {$/;"	f	package:fzf
parseSize	vim/pack/minpac/start/fzf/src/options.go	/^func parseSize(str string, maxPercent float64, label string) sizeSpec {$/;"	f	package:fzf
parseTerms	vim/pack/minpac/start/fzf/src/pattern.go	/^func parseTerms(fuzzy bool, caseMode Case, normalize bool, str string) []termSet {$/;"	f	package:fzf
parseTheme	vim/pack/minpac/start/fzf/src/options.go	/^func parseTheme(defaultTheme *tui.ColorTheme, str string) *tui.ColorTheme {$/;"	f	package:fzf
parseTiebreak	vim/pack/minpac/start/fzf/src/options.go	/^func parseTiebreak(str string) []criterion {$/;"	f	package:fzf
parseToggleSort	vim/pack/minpac/start/fzf/src/options.go	/^func parseToggleSort(keymap map[int][]action, str string) {$/;"	f	package:fzf
parser	vim/pack/minpac/opt/minpac/tools/dl-kaoriya-vim.py	/^parser = argparse.ArgumentParser($/;"	v
parserOptions	eslintrc.json	/^  "parserOptions": {$/;"	o
partialResult	vim/pack/minpac/start/fzf/src/matcher.go	/^type partialResult struct {$/;"	s	package:fzf
partitions	vim/pack/minpac/start/fzf/src/matcher.go	/^	partitions     int$/;"	m	struct:fzf.Matcher
paste	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def paste(str)$/;"	f
path	vim/pack/minpac/start/fzf/src/history.go	/^	path     string$/;"	m	struct:fzf.History
pattern	vim/pack/minpac/start/fzf/src/matcher.go	/^	pattern *Pattern$/;"	m	struct:fzf.MatchRequest
pattern	vim/pack/minpac/start/fzf/src/merger.go	/^	pattern *Pattern$/;"	m	struct:fzf.Merger
patternBuilder	vim/pack/minpac/start/fzf/src/matcher.go	/^	patternBuilder func([]rune) *Pattern$/;"	m	struct:fzf.Matcher
pborder	vim/pack/minpac/start/fzf/src/terminal.go	/^	pborder    tui.Window$/;"	m	struct:fzf.Terminal
pd	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    pd = down$/;"	v	class:Turtle
percent	vim/pack/minpac/start/fzf/src/options.go	/^	percent bool$/;"	m	struct:fzf.sizeSpec
phantomjs	eslintrc.json	/^    "phantomjs": false,$/;"	b	object:env
pixel_map	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^pixel_map = ((0x01, 0x08),$/;"	v
placeCursor	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) placeCursor() {$/;"	f	unknown:fzf.Terminal
placeholder	vim/pack/minpac/start/fzf/src/terminal.go	/^var placeholder *regexp.Regexp$/;"	v	package:fzf
placeholderFlags	vim/pack/minpac/start/fzf/src/terminal.go	/^type placeholderFlags struct {$/;"	s	package:fzf
plugin_dir	vim/pack/minpac/start/vim-minimap/autoload/minimap.py	/^    plugin_dir = os.path.join(p, "autoload", "drawille")$/;"	v
plugins	eslintrc.json	/^  "plugins": [$/;"	a
plus	vim/pack/minpac/start/fzf/src/terminal.go	/^	plus          bool$/;"	m	struct:fzf.placeholderFlags
points	vim/pack/minpac/start/fzf/src/result.go	/^	points [4]uint16$/;"	m	struct:fzf.Result
polygon	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^def polygon(center_x=0, center_y=0, sides=4, radius=4):$/;"	f
posArray	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func posArray(withPos bool, len int) *[]int {$/;"	f	package:algo
posDown	vim/pack/minpac/start/fzf/src/options.go	/^	posDown$/;"	c	package:fzf
posLeft	vim/pack/minpac/start/fzf/src/options.go	/^	posLeft$/;"	c	package:fzf
posRight	vim/pack/minpac/start/fzf/src/options.go	/^	posRight$/;"	c	package:fzf
posUp	vim/pack/minpac/start/fzf/src/options.go	/^	posUp windowPosition = iota$/;"	c	package:fzf
position	vim/pack/minpac/start/fzf/src/options.go	/^	position windowPosition$/;"	m	struct:fzf.previewOpts
position	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^position = height \/ 2$/;"	v
postProcessOptions	vim/pack/minpac/start/fzf/src/options.go	/^func postProcessOptions(opts *Options) {$/;"	f	package:fzf
posx	vim/pack/minpac/start/fzf/src/tui/light.go	/^	posx     int$/;"	m	struct:tui.LightWindow
posy	vim/pack/minpac/start/fzf/src/tui/light.go	/^	posy     int$/;"	m	struct:tui.LightWindow
powerline (default)	vim/pack/minpac/start/lightline.vim/README.md	/^### powerline (default)$/;"	S
prefer-promise-reject-errors	eslintrc.json	/^    "prefer-promise-reject-errors": "error",$/;"	s	object:rules
prefixLength	vim/pack/minpac/start/fzf/src/tokenizer.go	/^	prefixLength int32$/;"	m	struct:fzf.Token
prepare	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def prepare$/;"	f
preserveSpace	vim/pack/minpac/start/fzf/src/terminal.go	/^	preserveSpace bool$/;"	m	struct:fzf.placeholderFlags
pressed	vim/pack/minpac/start/fzf/src/terminal.go	/^	pressed    string$/;"	m	struct:fzf.Terminal
prevDownTime	vim/pack/minpac/start/fzf/src/tui/light.go	/^	prevDownTime  time.Time$/;"	m	struct:tui.LightRenderer
prevDownTime	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	prevDownTime time.Time$/;"	m	struct:tui.FullscreenRenderer
prevLines	vim/pack/minpac/start/fzf/src/terminal.go	/^	prevLines  []itemLine$/;"	m	struct:fzf.Terminal
preview	vim/pack/minpac/start/fzf/src/terminal.go	/^	preview    previewOpts$/;"	m	struct:fzf.Terminal
previewBox	vim/pack/minpac/start/fzf/src/terminal.go	/^	previewBox *util.EventBox$/;"	m	struct:fzf.Terminal
previewOpts	vim/pack/minpac/start/fzf/src/options.go	/^type previewOpts struct {$/;"	s	package:fzf
previewer	vim/pack/minpac/start/fzf/src/terminal.go	/^	previewer  previewer$/;"	m	struct:fzf.Terminal
previewer	vim/pack/minpac/start/fzf/src/terminal.go	/^type previewer struct {$/;"	s	package:fzf
previous	vim/pack/minpac/start/fzf/src/history.go	/^func (h *History) previous() string {$/;"	f	unknown:fzf.History
printAll	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) printAll() {$/;"	f	unknown:fzf.Terminal
printHeader	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) printHeader() {$/;"	f	unknown:fzf.Terminal
printHighlighted	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) printHighlighted(result Result, attr tui.Attr, col1 tui.ColorPair, col2 tui.C/;"	f	unknown:fzf.Terminal
printInfo	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) printInfo() {$/;"	f	unknown:fzf.Terminal
printItem	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) printItem(result Result, line int, i int, current bool) {$/;"	f	unknown:fzf.Terminal
printList	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) printList() {$/;"	f	unknown:fzf.Terminal
printPreview	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) printPreview() {$/;"	f	unknown:fzf.Terminal
printPrompt	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) printPrompt() {$/;"	f	unknown:fzf.Terminal
printQuery	vim/pack/minpac/start/fzf/src/terminal.go	/^	printQuery bool$/;"	m	struct:fzf.Terminal
printString	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) printString(text string, pair ColorPair, a Attr) {$/;"	f	unknown:tui.TcellWindow
print_help	vim/pack/minpac/start/ale/test/script/custom-linting-rules	/^function print_help() {$/;"	f
printer	vim/pack/minpac/start/fzf/src/terminal.go	/^	printer    func(string)$/;"	m	struct:fzf.Terminal
procFun	vim/pack/minpac/start/fzf/src/pattern.go	/^	procFun       map[termType]algo.Algo$/;"	m	struct:fzf.Pattern
processTabs	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) processTabs(runes []rune, prefixWidth int) (string, int) {$/;"	f	unknown:fzf.Terminal
progress	vim/pack/minpac/start/fzf/src/terminal.go	/^	progress   int$/;"	m	struct:fzf.Terminal
progressMinDuration	vim/pack/minpac/start/fzf/src/constants.go	/^	progressMinDuration     = 200 * time.Millisecond$/;"	c	package:fzf
project	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^    def project(self, win_width, win_height, fov, viewer_distance):$/;"	m	class:Point3D
projection	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^        projection = True$/;"	v
projection	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^    projection = False$/;"	v
projectionist	vim/pack/minpac/start/vim-projectionist/plugin/projectionist.vim	/^augroup projectionist$/;"	a
projectionist#activate	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#activate() abort$/;"	f
projectionist#append	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#append(root, ...) abort$/;"	f
projectionist#apply_template	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#apply_template() abort$/;"	f
projectionist#completion_filter	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#completion_filter(results, query, sep, ...) abort$/;"	f
projectionist#define_navigation_command	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#define_navigation_command(command, patterns) abort$/;"	f
projectionist#json_parse	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#json_parse(string) abort$/;"	f
projectionist#lencmp	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#lencmp(i1, i2) abort$/;"	f
projectionist#navigation_commands	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#navigation_commands() abort$/;"	f
projectionist#path	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#path(...) abort$/;"	f
projectionist#query	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#query(key, ...) abort$/;"	f
projectionist#query_exec	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#query_exec(key, ...) abort$/;"	f
projectionist#query_file	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#query_file(key) abort$/;"	f
projectionist#query_raw	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#query_raw(key, ...) abort$/;"	f
projectionist#query_scalar	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#query_scalar(key) abort$/;"	f
projectionist#shellescape	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#shellescape(arg) abort$/;"	f
projectionist#slash	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#slash() abort$/;"	f
projectionist.vim	vim/pack/minpac/start/vim-projectionist/README.markdown	/^# projectionist.vim$/;"	c
projectionist_make	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^augroup projectionist_make$/;"	a
promise/param-names	eslintrc.json	/^    "promise\/param-names": "error",$/;"	s	object:rules
prompt	vim/pack/minpac/start/fzf/src/terminal.go	/^	prompt     string$/;"	m	struct:fzf.Terminal
promptLen	vim/pack/minpac/start/fzf/src/terminal.go	/^	promptLen  int$/;"	m	struct:fzf.Terminal
properties	eslintrc.json	/^    "camelcase": ["error", { "properties": "never" }],$/;"	s	object:rules.camelcase.1
prototypejs	eslintrc.json	/^    "prototypejs": false,$/;"	b	object:env
pu	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    pu = up$/;"	v	class:Turtle
push	vim/pack/minpac/start/fzf/src/chunklist.go	/^func (c *Chunk) push(trans ItemBuilder, data []byte) bool {$/;"	f	unknown:fzf.Chunk
pusher	vim/pack/minpac/start/fzf/src/reader.go	/^	pusher   func([]byte) bool$/;"	m	struct:fzf.Reader
pwindow	vim/pack/minpac/start/fzf/src/terminal.go	/^	pwindow    tui.Window$/;"	m	struct:fzf.Terminal
pytest	vim/pack/minpac/start/ale/test/command_callback/python_paths/namespace_package_pytest/pytest.ini	/^[pytest]$/;"	s
python_module	vim/pack/minpac/start/vim-minimap/autoload/minimap.vim	/^    let python_module = fnameescape(globpath(&runtimepath, 'autoload\/minimap.py'))$/;"	v
q	vim/pack/minpac/start/ale/ftplugin/ale-fix-suggest.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	vim/pack/minpac/start/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	vim/pack/minpac/start/ale/ftplugin/ale-preview.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^  nnoremap <silent><buffer> q :bdelete<cr>$/;"	m
q	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^    map <buffer> <silent> q :bwipe<CR>$/;"	m
q	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  nnoremap <buffer> <silent> q :bwipe<CR>$/;"	m
queryCache	vim/pack/minpac/start/fzf/src/cache.go	/^type queryCache map[string][]Result$/;"	t	package:fzf
queryCacheMax	vim/pack/minpac/start/fzf/src/constants.go	/^	queryCacheMax int = chunkSize \/ 5$/;"	c	package:fzf
queryLen	vim/pack/minpac/start/fzf/src/terminal.go	/^	queryLen int$/;"	m	struct:fzf.itemLine
queued	vim/pack/minpac/start/fzf/src/tui/light.go	/^	queued        string$/;"	m	struct:tui.LightRenderer
quote-props	eslintrc.json	/^    "quote-props": 0,$/;"	n	object:rules
quoteEntry	vim/pack/minpac/start/fzf/src/terminal.go	/^func quoteEntry(entry string) string {$/;"	f	package:fzf
quoteEntryCmd	vim/pack/minpac/start/fzf/src/terminal.go	/^func quoteEntryCmd(entry string) string {$/;"	f	package:fzf
quotes	eslintrc.json	/^    "quotes": 0,$/;"	n	object:rules
quotes	eslintrc.json	/^    "quotes": ["error", "single", { "avoidEscape": true, "allowTemplateLiterals": true }],$/;"	a	object:rules
r	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/speed_test.py	/^    r = timeit(c.frame, number=frames)$/;"	v
radix	eslintrc.json	/^    "radix": 0,$/;"	n	object:rules
rails#app	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#app(...) abort$/;"	f
rails#asset_cfile	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#asset_cfile(...) abort$/;"	f
rails#buffer	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#buffer(...)$/;"	f
rails#buffer_setup	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#buffer_setup() abort$/;"	f
rails#buffer_syntax	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#buffer_syntax() abort$/;"	f
rails#cache_clear	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#cache_clear(...)$/;"	f
rails#camelize	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#camelize(str) abort$/;"	f
rails#cfile	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#cfile(...) abort$/;"	f
rails#command	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#command(bang, mods, count, arg) abort$/;"	f
rails#complete_rails	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#complete_rails(ArgLead, CmdLine, P, ...) abort$/;"	f
rails#complete_rake	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#complete_rake(A,L,P) abort$/;"	f
rails#db_canonicalize	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#db_canonicalize(url) abort$/;"	f
rails#db_complete_fragment	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#db_complete_fragment(url, ...) abort$/;"	f
rails#db_test_directory	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#db_test_directory(path) abort$/;"	f
rails#embedded_cfile	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#embedded_cfile(...) abort$/;"	f
rails#get_binding_for	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#get_binding_for(pid) abort$/;"	f
rails#includeexpr	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#includeexpr(fname) abort$/;"	f
rails#json_parse	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#json_parse(string) abort$/;"	f
rails#lencmp	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#lencmp(i1, i2) abort$/;"	f
rails#log_setup	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#log_setup() abort$/;"	f
rails#log_syntax	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#log_syntax() abort$/;"	f
rails#pluralize	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#pluralize(word, ...) abort$/;"	f
rails#revision	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#revision() abort$/;"	f
rails#ruby_syntax	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#ruby_syntax() abort$/;"	f
rails#singularize	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#singularize(word) abort$/;"	f
rails#underscore	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#underscore(str, ...) abort$/;"	f
rails#yaml_parse_file	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! rails#yaml_parse_file(file) abort$/;"	f
rails.vim	vim/pack/minpac/start/vim-rails/README.markdown	/^# rails.vim$/;"	c
railsPluginAbolish	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^augroup railsPluginAbolish$/;"	a
railsPluginAuto	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^augroup railsPluginAuto$/;"	a
railsPluginDetect	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^augroup railsPluginDetect$/;"	a
railsPluginMake	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^augroup railsPluginMake$/;"	a
randResult	vim/pack/minpac/start/fzf/src/merger_test.go	/^func randResult() Result {$/;"	f	package:fzf
rangeEllipsis	vim/pack/minpac/start/fzf/src/tokenizer.go	/^const rangeEllipsis = 0$/;"	c	package:fzf
ratio	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^        ratio = tw \/ float(w)$/;"	v
readFromCommand	vim/pack/minpac/start/fzf/src/reader.go	/^func (r *Reader) readFromCommand(shell string, cmd string) bool {$/;"	f	unknown:fzf.Reader
readFromStdin	vim/pack/minpac/start/fzf/src/reader.go	/^func (r *Reader) readFromStdin() bool {$/;"	f	unknown:fzf.Reader
read_keys	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^def read_keys(stdscr):$/;"	f
readerBufferSize	vim/pack/minpac/start/fzf/src/constants.go	/^	readerBufferSize       = 64 * 1024$/;"	c	package:fzf
readerPollIntervalMax	vim/pack/minpac/start/fzf/src/constants.go	/^	readerPollIntervalMax  = 50 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalMin	vim/pack/minpac/start/fzf/src/constants.go	/^	readerPollIntervalMin  = 10 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalStep	vim/pack/minpac/start/fzf/src/constants.go	/^	readerPollIntervalStep = 5 * time.Millisecond$/;"	c	package:fzf
reading	vim/pack/minpac/start/fzf/src/terminal.go	/^	reading    bool$/;"	m	struct:fzf.Terminal
readonce	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def readonce$/;"	f	class:TestBase
redraw	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) redraw() {$/;"	f	unknown:fzf.Terminal
refresh	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) refresh() {$/;"	f	unknown:fzf.Terminal
regex	vim/pack/minpac/start/fzf/src/tokenizer.go	/^	regex *regexp.Regexp$/;"	m	struct:fzf.Delimiter
regexUFlag	eslintrc.json	/^      "regexUFlag": false,$/;"	b	object:parserOptions.ecmaFeatures
regexYFlag	eslintrc.json	/^      "regexYFlag": false,$/;"	b	object:parserOptions.ecmaFeatures
rel_info	vim/pack/minpac/opt/minpac/tools/dl-kaoriya-vim.py	/^rel_info = json.load(io.StringIO(str(response.read(), 'utf-8')))$/;"	v
release	vim/pack/minpac/start/fzf/Makefile	/^release: target\/$(BINARY32) target\/$(BINARY64) target\/$(BINARYARM5) target\/$(BINARYARM6) tar/;"	t
release	vim/pack/minpac/start/fzf/Makefile	/^release: target\/$(BINARY32) target\/$(BINARY64)$/;"	t
release-all	vim/pack/minpac/start/fzf/Makefile	/^release-all: clean test$/;"	t
remove	vim/pack/minpac/start/fzf/uninstall	/^remove() {$/;"	f
remove_line	vim/pack/minpac/start/fzf/uninstall	/^remove_line() {$/;"	f
renderer	vim/pack/minpac/start/fzf/src/tui/light.go	/^	renderer *LightRenderer$/;"	m	struct:tui.LightWindow
repeat	vim/pack/minpac/start/fzf/src/tui/light.go	/^func repeat(s string, times int) string {$/;"	f	package:tui
replacePlaceholder	vim/pack/minpac/start/fzf/src/terminal.go	/^func replacePlaceholder(template string, stripAnsi bool, delimiter Delimiter, forcePlus bool, qu/;"	f	package:fzf
repo_name	vim/pack/minpac/opt/minpac/tools/dl-kaoriya-vim.py	/^repo_name = 'koron\/vim-kaoriya'$/;"	v
report	vim/pack/minpac/opt/minpac/test/Make_win.mak	/^report:$/;"	t
report	vim/pack/minpac/opt/minpac/test/Makefile	/^report:$/;"	t
reqBox	vim/pack/minpac/start/fzf/src/matcher.go	/^	reqBox         *util.EventBox$/;"	m	struct:fzf.Matcher
reqBox	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqBox     *util.EventBox$/;"	m	struct:fzf.Terminal
reqClose	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqClose$/;"	c	package:fzf
reqHeader	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqHeader$/;"	c	package:fzf
reqInfo	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqInfo$/;"	c	package:fzf
reqJump	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqJump$/;"	c	package:fzf
reqList	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqList$/;"	c	package:fzf
reqPreviewDisplay	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqPreviewDisplay$/;"	c	package:fzf
reqPreviewEnqueue	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqPreviewEnqueue$/;"	c	package:fzf
reqPreviewRefresh	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqPreviewRefresh$/;"	c	package:fzf
reqPrintQuery	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqPrintQuery$/;"	c	package:fzf
reqPrompt	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqPrompt util.EventType = iota$/;"	c	package:fzf
reqQuit	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqQuit$/;"	c	package:fzf
reqRedraw	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqRedraw$/;"	c	package:fzf
reqRefresh	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqRefresh$/;"	c	package:fzf
reqReinit	vim/pack/minpac/start/fzf/src/terminal.go	/^	reqReinit$/;"	c	package:fzf
reqReset	vim/pack/minpac/start/fzf/src/matcher.go	/^	reqReset$/;"	c	package:fzf
reqRetry	vim/pack/minpac/start/fzf/src/matcher.go	/^	reqRetry util.EventType = iota$/;"	c	package:fzf
request	vim/pack/minpac/opt/minpac/tools/dl-kaoriya-vim.py	/^    request = urllib.request.Request(gh_release_url)$/;"	v
requireStringLiterals	eslintrc.json	/^    "valid-typeof": ["error", { "requireStringLiterals": true }],$/;"	b	object:rules.valid-typeof.1
resizeWindows	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) resizeWindows() {$/;"	f	unknown:fzf.Terminal
rest-spread-spacing	eslintrc.json	/^    "rest-spread-spacing": ["error", "never"],$/;"	a	object:rules
result	vim/pack/minpac/start/fzf/src/terminal.go	/^	result   Result$/;"	m	struct:fzf.itemLine
retries	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def retries(times = 3)$/;"	f	module:TestShell
reverse	vim/pack/minpac/start/fzf/src/terminal.go	/^	reverse    bool$/;"	m	struct:fzf.Terminal
reverseStringArray	vim/pack/minpac/start/fzf/src/terminal.go	/^func reverseStringArray(input []string) []string {$/;"	f	package:fzf
revision	vim/pack/minpac/start/fzf/main.go	/^var revision string$/;"	v	package:main
rgb	vim/colors/twilight256.vim	/^    fun <SID>rgb(rgb)$/;"	f
rgb_color	vim/colors/twilight256.vim	/^    fun <SID>rgb_color(x, y, z)$/;"	f
rgb_level	vim/colors/twilight256.vim	/^    fun <SID>rgb_level(n)$/;"	f
rgb_number	vim/colors/twilight256.vim	/^    fun <SID>rgb_number(x)$/;"	f
right	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def right(self, angle):$/;"	m	class:Turtle
rmcup	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) rmcup() {$/;"	f	unknown:tui.LightRenderer
rooter	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^  augroup rooter$/;"	a
rotateX	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^    def rotateX(self, angle):$/;"	m	class:Point3D
rotateY	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^    def rotateY(self, angle):$/;"	m	class:Point3D
rotateZ	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^    def rotateZ(self, angle):$/;"	m	class:Point3D
rows	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def rows(self, min_x=None, min_y=None, max_x=None, max_y=None):$/;"	m	class:Canvas
rt	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    rt = right$/;"	v	class:Turtle
rubout	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) rubout(pattern string) {$/;"	f	unknown:fzf.Terminal
rules	eslintrc.json	/^  "rules": {$/;"	o
s	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/basic.py	/^s = Canvas()$/;"	v
s:ALELintImpl	vim/pack/minpac/start/ale/autoload/ale.vim	/^function! s:ALELintImpl(buffer) abort$/;"	f
s:ALEQueueImpl	vim/pack/minpac/start/ale/autoload/ale.vim	/^function! s:ALEQueueImpl(delay, linting_flag, buffer) abort$/;"	f
s:AR	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:AR(cmd,related,line1,line2,count,...) abort$/;"	f
s:Abbrev	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Abbrev(bang,...) abort$/;"	f
s:AddBracketExpand	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:AddBracketExpand(abbr,expn)$/;"	f
s:AddColonExpand	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:AddColonExpand(abbr,expn)$/;"	f
s:AddHintsForTypeScriptParsingErrors	vim/pack/minpac/start/ale/autoload/ale/handlers/eslint.vim	/^function! s:AddHintsForTypeScriptParsingErrors(output) abort$/;"	f
s:AddParenExpand	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:AddParenExpand(abbr,expn,...)$/;"	f
s:AddProblemsFromOtherBuffers	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! s:AddProblemsFromOtherBuffers(buffer, linters) abort$/;"	f
s:AddSelectiveExpand	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:AddSelectiveExpand(abbr,pat,expn,...)$/;"	f
s:AddTabExpand	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:AddTabExpand(abbr,expn)$/;"	f
s:Alternate	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Alternate(cmd,line1,line2,count,...) abort$/;"	f
s:ApplyPartialTimer	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! s:ApplyPartialTimer(timer_id) abort$/;"	f
s:AssetEdit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:AssetEdit(cmd, name, dir, suffix, fallbacks) abort$/;"	f
s:AutoUpdate	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:AutoUpdate(fname, force, ...) abort$/;"	f
s:BlankDown	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:BlankDown(count) abort$/;"	f
s:BlankUp	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:BlankUp(count) abort$/;"	f
s:Bookmark	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
s:Bookmark.AddBookmark	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
s:Bookmark.BookmarkExistsFor	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
s:Bookmark.BookmarkFor	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
s:Bookmark.BookmarkNames	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
s:Bookmark.Bookmarks	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
s:Bookmark.CacheBookmarks	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
s:Bookmark.ClearAll	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
s:Bookmark.CompareBookmarksByName	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
s:Bookmark.GetNodeForName	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
s:Bookmark.GetSelected	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
s:Bookmark.InvalidBookmarks	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
s:Bookmark.New	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
s:Bookmark.SortBookmarksList	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
s:Bookmark.ToRoot	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
s:Bookmark.Write	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
s:Bookmark.activate	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
s:Bookmark.delete	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
s:Bookmark.getNode	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
s:Bookmark.mustExist	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
s:Bookmark.open	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
s:Bookmark.openInNewTab	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
s:Bookmark.setPath	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
s:Bookmark.str	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
s:Bookmark.toRoot	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
s:Bookmark.validate	vim/pack/minpac/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
s:BufAbbreviations	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:BufAbbreviations()$/;"	f
s:BufCommands	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:BufCommands()$/;"	f
s:BufDatabase	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:BufDatabase(level, ...)$/;"	f
s:BufMappings	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:BufMappings() abort$/;"	f
s:BufNavCommands	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:BufNavCommands()$/;"	f
s:BufProjectionCommands	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:BufProjectionCommands() abort$/;"	f
s:BufScriptWrappers	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:BufScriptWrappers()$/;"	f
s:BufWinId	vim/pack/minpac/start/ale/autoload/ale/list.vim	/^function! s:BufWinId(buffer) abort$/;"	f
s:BuildClassPathOption	vim/pack/minpac/start/ale/ale_linters/java/javac.vim	/^function! s:BuildClassPathOption(buffer, import_paths) abort$/;"	f
s:BuildClassPathOption	vim/pack/minpac/start/ale/ale_linters/kotlin/kotlinc.vim	/^function! s:BuildClassPathOption(buffer, import_paths) abort$/;"	f
s:BuildSignMap	vim/pack/minpac/start/ale/autoload/ale/sign.vim	/^function! s:BuildSignMap(buffer, current_sign_list, grouped_items) abort$/;"	f
s:BuildText	vim/pack/minpac/start/ale/ale_linters/ruby/reek.vim	/^function! s:BuildText(buffer, error) abort$/;"	f
s:COMPLETION_TRIGGER_CHARACTER	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^let s:COMPLETION_TRIGGER_CHARACTER = 2$/;"	v
s:COMPLETION_TRIGGER_INVOKED	vim/pack/minpac/start/ale/autoload/ale/lsp/message.vim	/^let s:COMPLETION_TRIGGER_INVOKED = 1$/;"	v
s:ChangeDirectory	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^function! s:ChangeDirectory(directory)$/;"	f
s:ChangeDirectoryForBuffer	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^function! s:ChangeDirectoryForBuffer()$/;"	f
s:ChangeFoldLevel	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ChangeFoldLevel(diff, force) abort$/;"	f
s:ChangeToRootDirectory	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^function! s:ChangeToRootDirectory()$/;"	f
s:CheckExCtagsVersion	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:CheckExCtagsVersion(output) abort$/;"	f
s:CheckFTCtags	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:CheckFTCtags(bin, ftype) abort$/;"	f
s:CheckForBadConfig	vim/pack/minpac/start/ale/autoload/ale/handlers/eslint.vim	/^function! s:CheckForBadConfig(buffer, lines) abort$/;"	f
s:CheckForExCtags	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:CheckForExCtags(silent) abort$/;"	f
s:CheckMouseClick	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:CheckMouseClick() abort$/;"	f
s:CheckWithLSP	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! s:CheckWithLSP(buffer, linter) abort$/;"	f
s:Choose	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
s:CleanUp	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
s:CleanupEveryBuffer	vim/pack/minpac/start/ale/autoload/ale/toggle.vim	/^function! s:CleanupEveryBuffer() abort$/;"	f
s:ClearMatches	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:ClearMatches() "{{{1$/;"	f
s:Clog	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Clog(bang, mods, arg) abort$/;"	f
s:CloseFold	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:CloseFold() abort$/;"	f
s:CloseWindow	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:CloseWindow() abort$/;"	f
s:CloseWindowIfNeeded	vim/pack/minpac/start/ale/autoload/ale/list.vim	/^function! s:CloseWindowIfNeeded(buffer) abort$/;"	f
s:CmpPatterns	vim/pack/minpac/start/ale/autoload/ale/pattern_options.vim	/^function! s:CmpPatterns(left_item, right_item) abort$/;"	f
s:ColorFinder	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^let s:ColorFinder = [function('s:HexCode'), function('s:RgbColor'), function('s:RgbaColor')]$/;"	v
s:CommandEdit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:CommandEdit(cmd, name, projections, ...)$/;"	f
s:CommandList	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:CommandList(A,L,P)$/;"	f
s:Complete_alternate	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Complete_alternate(A,L,P) abort$/;"	f
s:Complete_breakadd	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:Complete_breakadd(A, L, P) abort$/;"	f
s:Complete_breakdel	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:Complete_breakdel(A, L, P) abort$/;"	f
s:Complete_cd	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Complete_cd(ArgLead, CmdLine, CursorPos) abort$/;"	f
s:Complete_console	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Complete_console(A,L,P) abort$/;"	f
s:Complete_destroy	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Complete_destroy(A,L,P) abort$/;"	f
s:Complete_edit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Complete_edit(ArgLead, CmdLine, CursorPos) abort$/;"	f
s:Complete_environments	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Complete_environments(...) abort$/;"	f
s:Complete_generate	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Complete_generate(A,L,P) abort$/;"	f
s:Complete_log	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Complete_log(A, L, P) abort$/;"	f
s:Complete_preview	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Complete_preview(A,L,P) abort$/;"	f
s:Complete_related	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Complete_related(A,L,P) abort$/;"	f
s:Complete_ruby	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Complete_ruby(A,L,P) abort$/;"	f
s:Complete_server	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Complete_server(A,L,P) abort$/;"	f
s:CompletionStillValid	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! s:CompletionStillValid(request_id) abort$/;"	f
s:Context	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:Context(reverse) abort$/;"	f
s:ContextMotion	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:ContextMotion(reverse) abort$/;"	f
s:CorrectFocusOnStartup	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:CorrectFocusOnStartup() abort$/;"	f
s:Count	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
s:CreateAutocommands	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:CreateAutocommands() abort$/;"	f
s:CreateCountDict	vim/pack/minpac/start/ale/autoload/ale/statusline.vim	/^function! s:CreateCountDict() abort$/;"	f
s:CreateTSServerMessageData	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! s:CreateTSServerMessageData(message) abort$/;"	f
s:CreateTemporaryFileForJob	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! s:CreateTemporaryFileForJob(buffer, temporary_file) abort$/;"	f
s:CreateTemporaryFileForJob	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^function! s:CreateTemporaryFileForJob(buffer, temporary_file, input) abort$/;"	f
s:Creator	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
s:Creator.BufNamePrefix	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
s:Creator.CreateMirror	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
s:Creator.CreateTabTree	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
s:Creator.CreateWindowTree	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
s:Creator.New	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
s:Creator.ToggleTabTree	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
s:Creator._bindMappings	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
s:Creator._broadcastInitEvent	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
s:Creator._createNERDTree	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
s:Creator._createTreeWin	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
s:Creator._isBufHidden	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
s:Creator._nextBufferName	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName()$/;"	f
s:Creator._nextBufferNumber	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
s:Creator._pathForString	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
s:Creator._removeTreeBufForTab	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
s:Creator._setCommonBufOptions	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
s:Creator._setupStatusline	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
s:Creator._tabpagevar	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
s:Creator._uniq	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
s:Creator.createMirror	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
s:Creator.createTabTree	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
s:Creator.createWindowTree	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
s:Creator.toggleTabTree	vim/pack/minpac/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
s:CtagsErrMsg	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:CtagsErrMsg(errmsg, infomsg, silent, ...) abort$/;"	f
s:CursorMoved	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:CursorMoved() "{{{1$/;"	f
s:CustomComplete	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:CustomComplete(A,L,P,cmd) abort$/;"	f
s:DetectFiletype	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:DetectFiletype(bufnr) abort$/;"	f
s:DisablePostamble	vim/pack/minpac/start/ale/autoload/ale/toggle.vim	/^function! s:DisablePostamble() abort$/;"	f
s:Echo	vim/pack/minpac/start/ale/autoload/ale/debugging.vim	/^function! s:Echo(message) abort$/;"	f
s:EchoCommand	vim/pack/minpac/start/ale/autoload/ale/debugging.vim	/^function! s:EchoCommand(item) abort$/;"	f
s:EchoCommandHistory	vim/pack/minpac/start/ale/autoload/ale/debugging.vim	/^function! s:EchoCommandHistory() abort$/;"	f
s:EchoExecutable	vim/pack/minpac/start/ale/autoload/ale/debugging.vim	/^function! s:EchoExecutable(item) abort$/;"	f
s:EchoGlobalVariables	vim/pack/minpac/start/ale/autoload/ale/debugging.vim	/^function! s:EchoGlobalVariables() abort$/;"	f
s:EchoImpl	vim/pack/minpac/start/ale/autoload/ale/cursor.vim	/^function! s:EchoImpl() abort$/;"	f
s:EchoLinterAliases	vim/pack/minpac/start/ale/autoload/ale/debugging.vim	/^function! s:EchoLinterAliases(all_linters) abort$/;"	f
s:EchoLinterVariables	vim/pack/minpac/start/ale/autoload/ale/debugging.vim	/^function! s:EchoLinterVariables(variable_list) abort$/;"	f
s:EnablePreamble	vim/pack/minpac/start/ale/autoload/ale/toggle.vim	/^function! s:EnablePreamble() abort$/;"	f
s:EscapeCtagsCmd	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:EscapeCtagsCmd(ctags_bin, args, ...) abort$/;"	f
s:Event	vim/pack/minpac/start/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
s:Event.New	vim/pack/minpac/start/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
s:ExecMove	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:ExecMove(cmd) abort$/;"	f
s:ExecuteCtags	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtags(ctags_cmd) abort$/;"	f
s:ExecuteCtagsOnFile	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtagsOnFile(fname, realfname, typeinfo) abort$/;"	f
s:ExtraErrorMsg	vim/pack/minpac/start/ale/ale_linters/javascript/flow.vim	/^function! s:ExtraErrorMsg(current, new) abort$/;"	f
s:Extract	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Extract(bang, mods, ...) range abort$/;"	f
s:FGforBG	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:FGforBG(bg) "{{{1$/;"	f
s:FileByOffset	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:FileByOffset(num) abort$/;"	f
s:FindAncestor	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^function! s:FindAncestor(pattern)$/;"	f
s:FindConfig	vim/pack/minpac/start/ale/ale_linters/pug/puglint.vim	/^function! s:FindConfig(buffer) abort$/;"	f
s:FindConnection	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! s:FindConnection(key, value) abort$/;"	f
s:FindDUBConfig	vim/pack/minpac/start/ale/ale_linters/d/dmd.vim	/^function! s:FindDUBConfig(buffer) abort$/;"	f
s:FindHistoryItem	vim/pack/minpac/start/ale/autoload/ale/history.vim	/^function! s:FindHistoryItem(buffer, job_id) abort$/;"	f
s:FindItemAtCursor	vim/pack/minpac/start/ale/autoload/ale/cursor.vim	/^function! s:FindItemAtCursor() abort$/;"	f
s:FindProjectWithInitRequestID	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! s:FindProjectWithInitRequestID(conn, init_request_id) abort$/;"	f
s:FindReferences	vim/pack/minpac/start/ale/autoload/ale/references.vim	/^function! s:FindReferences(linter) abort$/;"	f
s:FindSpan	vim/pack/minpac/start/ale/autoload/ale/handlers/rust.vim	/^function! s:FindSpan(buffer, span) abort$/;"	f
s:FixList	vim/pack/minpac/start/ale/autoload/ale/list.vim	/^function! s:FixList(buffer, list) abort$/;"	f
s:FlagSet	vim/pack/minpac/start/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
s:FlagSet.New	vim/pack/minpac/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
s:FlagSet._flagsForScope	vim/pack/minpac/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
s:FlagSet.addFlag	vim/pack/minpac/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
s:FlagSet.clearFlags	vim/pack/minpac/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
s:FlagSet.removeFlag	vim/pack/minpac/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
s:FlagSet.renderToString	vim/pack/minpac/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
s:FormatEntry	vim/pack/minpac/start/ale/autoload/ale/fix/registry.vim	/^function! s:FormatEntry(key, entry) abort$/;"	f
s:GatherOutput	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! s:GatherOutput(job_id, line) abort$/;"	f
s:GatherOutput	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^function! s:GatherOutput(job_id, line) abort$/;"	f
s:GetAliasedFiletype	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! s:GetAliasedFiletype(original_filetype) abort$/;"	f
s:GetBuildDirectory	vim/pack/minpac/start/ale/ale_linters/c/clangtidy.vim	/^function! s:GetBuildDirectory(buffer) abort$/;"	f
s:GetBuildDirectory	vim/pack/minpac/start/ale/ale_linters/cpp/clangtidy.vim	/^function! s:GetBuildDirectory(buffer) abort$/;"	f
s:GetCachedExtensionMap	vim/pack/minpac/start/ale/autoload/ale/filetypes.vim	/^function! s:GetCachedExtensionMap() abort$/;"	f
s:GetCallbacks	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^function! s:GetCallbacks(buffer, linters) abort$/;"	f
s:GetConflictingPluginWarning	vim/pack/minpac/start/ale/after/plugin/ale.vim	/^function! s:GetConflictingPluginWarning(plugin_name) abort$/;"	f
s:GetCounts	vim/pack/minpac/start/ale/autoload/ale/statusline.vim	/^function! s:GetCounts(buffer) abort$/;"	f
s:GetDetails	vim/pack/minpac/start/ale/ale_linters/javascript/flow.vim	/^function! s:GetDetails(error) abort$/;"	f
s:GetDir	vim/pack/minpac/start/ale/ale_linters/python/mypy.vim	/^function! s:GetDir(buffer) abort$/;"	f
s:GetEscapedExecutable	vim/pack/minpac/start/ale/ale_linters/erlang/syntaxerl.vim	/^function! s:GetEscapedExecutable(buffer) abort$/;"	f
s:GetExecutable	vim/pack/minpac/start/ale/autoload/ale/handlers/sml.vim	/^function! s:GetExecutable(buffer, source) abort$/;"	f
s:GetFileWinnr	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:GetFileWinnr(fileinfo) abort$/;"	f
s:GetFiletypeValue	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! s:GetFiletypeValue(map, filetype) abort$/;"	f
s:GetJSONLines	vim/pack/minpac/start/ale/ale_linters/javascript/flow.vim	/^function! s:GetJSONLines(lines) abort$/;"	f
s:GetLSPCompletions	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! s:GetLSPCompletions(linter) abort$/;"	f
s:GetLinterNames	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! s:GetLinterNames(original_filetype) abort$/;"	f
s:GetLinterVariables	vim/pack/minpac/start/ale/autoload/ale/debugging.vim	/^function! s:GetLinterVariables(filetype, linter_names) abort$/;"	f
s:GetNearbyTag	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:GetNearbyTag(all, forcecurrent, ...) abort$/;"	f
s:GetSupportedFiletypes	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:GetSupportedFiletypes() abort$/;"	f
s:GetTagInfo	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:GetTagInfo(linenr, ignorepseudo) abort$/;"	f
s:GetWorkingDirectory	vim/pack/minpac/start/ale/ale_linters/cs/mcsc.vim	/^function! s:GetWorkingDirectory(buffer) abort$/;"	f
s:GetXterm2rgbTable	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:GetXterm2rgbTable()$/;"	f
s:GoToLSPDefinition	vim/pack/minpac/start/ale/autoload/ale/definition.vim	/^function! s:GoToLSPDefinition(linter, options) abort$/;"	f
s:GotoFileWindow	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:GotoFileWindow(fileinfo, ...) abort$/;"	f
s:GotoNextFold	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:GotoNextFold() abort$/;"	f
s:GotoNextToplevelTag	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:GotoNextToplevelTag(direction) abort$/;"	f
s:GotoPrevFold	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:GotoPrevFold() abort$/;"	f
s:GroupLoclistItems	vim/pack/minpac/start/ale/autoload/ale/sign.vim	/^function! s:GroupLoclistItems(buffer, loclist) abort$/;"	f
s:HL	vim/colors/gruvbox.vim	/^function! s:HL(group, fg, ...)$/;"	f
s:HSL2RGB	vim/colors/neodark.vim	/^function! s:HSL2RGB(HSL)$/;"	f
s:HandleBufDelete	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:HandleBufDelete(bufname, bufnr) abort$/;"	f
s:HandleBufWrite	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:HandleBufWrite(fname) abort$/;"	f
s:HandleChannelMessage	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! s:HandleChannelMessage(channel, message) abort$/;"	f
s:HandleCommandMessage	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! s:HandleCommandMessage(job_id, message) abort$/;"	f
s:HandleExit	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! s:HandleExit(job_id, exit_code) abort$/;"	f
s:HandleExit	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^function! s:HandleExit(job_id, exit_code) abort$/;"	f
s:HandleInitializeResponse	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! s:HandleInitializeResponse(conn, response) abort$/;"	f
s:HandleLSPDiagnostics	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! s:HandleLSPDiagnostics(conn_id, response) abort$/;"	f
s:HandleLSPErrorMessage	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! s:HandleLSPErrorMessage(error_message) abort$/;"	f
s:HandleOnlyWindow	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:HandleOnlyWindow() abort$/;"	f
s:HandleSyntaxError	vim/pack/minpac/start/ale/autoload/ale/handlers/ruby.vim	/^function! s:HandleSyntaxError(buffer, lines) abort$/;"	f
s:HandleTSServerDiagnostics	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! s:HandleTSServerDiagnostics(response, error_type) abort$/;"	f
s:HandleUnixFormat	vim/pack/minpac/start/ale/autoload/ale/handlers/unix.vim	/^function! s:HandleUnixFormat(buffer, lines, type) abort$/;"	f
s:HasOpenFileWindows	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:HasOpenFileWindows() abort$/;"	f
s:HexCode	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:HexCode(str, lineno) "{{{2$/;"	f
s:Hexa2Rgba	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:Hexa2Rgba(hex,alpha) "{{{2$/;"	f
s:HighlightTag	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:HighlightTag(openfolds, ...) abort$/;"	f
s:Init	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:Init(silent) abort$/;"	f
s:InitTypes	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:InitTypes() abort$/;"	f
s:InitWindow	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:InitWindow(autoclose) abort$/;"	f
s:InsertRefs	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
s:Invert	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Invert(bang)$/;"	f
s:InvokeChain	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! s:InvokeChain(buffer, linter, chain_index, input) abort$/;"	f
s:IsBoolean	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! s:IsBoolean(value) abort$/;"	f
s:IsCallback	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! s:IsCallback(value) abort$/;"	f
s:IsDirectory	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^function! s:IsDirectory(pattern)$/;"	f
s:IsGenericFixer	vim/pack/minpac/start/ale/autoload/ale/fix/registry.vim	/^function! s:IsGenericFixer(suggested_filetypes) abort$/;"	f
s:IsHeaderFile	vim/pack/minpac/start/ale/autoload/ale/handlers/gcc.vim	/^function! s:IsHeaderFile(filename) abort$/;"	f
s:IsValidFile	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:IsValidFile(fname, ftype) abort$/;"	f
s:JumpToTag	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:JumpToTag(stay_in_tagbar) abort$/;"	f
s:KeyMap	vim/pack/minpac/start/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
s:KeyMap.Add	vim/pack/minpac/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
s:KeyMap.All	vim/pack/minpac/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
s:KeyMap.BindAll	vim/pack/minpac/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
s:KeyMap.Create	vim/pack/minpac/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
s:KeyMap.FindFor	vim/pack/minpac/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
s:KeyMap.Invoke	vim/pack/minpac/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
s:KeyMap.Remove	vim/pack/minpac/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
s:KeyMap.bind	vim/pack/minpac/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
s:KeyMap.invoke	vim/pack/minpac/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
s:KillHandler	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! s:KillHandler(timer) abort$/;"	f
s:LSP_COMPLETION_CLASS_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_CLASS_KIND = 7$/;"	v
s:LSP_COMPLETION_COLOR_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_COLOR_KIND = 16$/;"	v
s:LSP_COMPLETION_CONSTRUCTOR_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_CONSTRUCTOR_KIND = 4$/;"	v
s:LSP_COMPLETION_ENUM_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_ENUM_KIND = 13$/;"	v
s:LSP_COMPLETION_FIELD_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_FIELD_KIND = 5$/;"	v
s:LSP_COMPLETION_FILE_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_FILE_KIND = 17$/;"	v
s:LSP_COMPLETION_FUNCTION_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_FUNCTION_KIND = 3$/;"	v
s:LSP_COMPLETION_INTERFACE_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_INTERFACE_KIND = 8$/;"	v
s:LSP_COMPLETION_KEYWORD_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_KEYWORD_KIND = 14$/;"	v
s:LSP_COMPLETION_METHOD_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_METHOD_KIND = 2$/;"	v
s:LSP_COMPLETION_MODULE_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_MODULE_KIND = 9$/;"	v
s:LSP_COMPLETION_PROPERTY_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_PROPERTY_KIND = 10$/;"	v
s:LSP_COMPLETION_REFERENCE_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_REFERENCE_KIND = 18$/;"	v
s:LSP_COMPLETION_SNIPPET_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_SNIPPET_KIND = 15$/;"	v
s:LSP_COMPLETION_TEXT_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_TEXT_KIND = 1$/;"	v
s:LSP_COMPLETION_UNIT_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_UNIT_KIND = 11$/;"	v
s:LSP_COMPLETION_VALUE_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_VALUE_KIND = 12$/;"	v
s:LSP_COMPLETION_VARIABLE_KIND	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:LSP_COMPLETION_VARIABLE_KIND = 6$/;"	v
s:LanguageGetter	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^function! s:LanguageGetter(buffer) dict abort$/;"	f
s:LintOnEnter	vim/pack/minpac/start/ale/autoload/ale/events.vim	/^function! s:LintOnEnter(buffer) abort$/;"	f
s:LoadArgCount	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^function! s:LoadArgCount(function) abort$/;"	f
s:LoadUserTypeDefs	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:LoadUserTypeDefs(...) abort$/;"	f
s:MAX_COL_SIZE	vim/pack/minpac/start/ale/autoload/ale/highlight.vim	/^let s:MAX_COL_SIZE = 1073741824 " pow(2, 30)$/;"	v
s:MAX_POS_VALUES	vim/pack/minpac/start/ale/autoload/ale/highlight.vim	/^let s:MAX_POS_VALUES = 8$/;"	v
s:MapKeys	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:MapKeys() abort$/;"	f
s:MapNextFamily	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:MapNextFamily(map,cmd) abort$/;"	f
s:MarkProjectAsInitialized	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! s:MarkProjectAsInitialized(conn, project) abort$/;"	f
s:Match_debug	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^fun! s:Match_debug()$/;"	f
s:Match_wrapper	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^function! s:Match_wrapper(word, forward, mode) range$/;"	f
s:MenuController	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
s:MenuController.New	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
s:MenuController._allIndexesFor	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
s:MenuController._current	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
s:MenuController._cursorDown	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
s:MenuController._cursorUp	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
s:MenuController._echoPrompt	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
s:MenuController._handleKeypress	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
s:MenuController._nextIndexFor	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
s:MenuController._restoreOptions	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
s:MenuController._saveOptions	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
s:MenuController._setCmdheight	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
s:MenuController.showMenu	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
s:MenuItem	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
s:MenuItem.All	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
s:MenuItem.AllEnabled	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
s:MenuItem.Create	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
s:MenuItem.CreateSeparator	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
s:MenuItem.CreateSubmenu	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
s:MenuItem.enabled	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
s:MenuItem.execute	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
s:MenuItem.isSeparator	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
s:MenuItem.isSubmenu	vim/pack/minpac/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
s:MinimizeMaxFoldLevel	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:MinimizeMaxFoldLevel(fileinfo, tags) abort$/;"	f
s:Move	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:Move(cmd, count, map) abort$/;"	f
s:MoveSelectionDown	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:MoveSelectionDown(count) abort$/;"	f
s:MoveSelectionUp	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:MoveSelectionUp(count) abort$/;"	f
s:MultiMatch	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^fun! s:MultiMatch(spflag, mode)$/;"	f
s:NERDTree	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
s:NERDTree.AddPathFilter	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
s:NERDTree.Close	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
s:NERDTree.CloseIfQuitOnOpen	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CloseIfQuitOnOpen()$/;"	f
s:NERDTree.CursorToBookmarkTable	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
s:NERDTree.CursorToTreeWin	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin()$/;"	f
s:NERDTree.ExistsForBuf	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
s:NERDTree.ExistsForTab	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
s:NERDTree.ForCurrentBuf	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
s:NERDTree.ForCurrentTab	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
s:NERDTree.GetWinNum	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
s:NERDTree.IsOpen	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
s:NERDTree.MustBeOpen	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
s:NERDTree.New	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
s:NERDTree.PathFilters	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
s:NERDTree.changeRoot	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
s:NERDTree.getRoot	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
s:NERDTree.isTabTree	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
s:NERDTree.isWinTree	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
s:NERDTree.previousBuf	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
s:NERDTree.render	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
s:NERDTree.setPreviousBuf	vim/pack/minpac/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
s:NERDTreeSortStarIndex	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NeoVimCallback	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! s:NeoVimCallback(job, data, event) abort$/;"	f
s:NewConnection	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! s:NewConnection() abort$/;"	f
s:Notifier	vim/pack/minpac/start/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
s:Notifier.AddListener	vim/pack/minpac/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
s:Notifier.GetListenersForEvent	vim/pack/minpac/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
s:Notifier.GetListenersMap	vim/pack/minpac/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
s:Notifier.NotifyListeners	vim/pack/minpac/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
s:Open	vim/pack/minpac/start/ale/autoload/ale/preview.vim	/^function! s:Open(open_in_tab) abort$/;"	f
s:OpenFold	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:OpenFold() abort$/;"	f
s:OpenParents	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:OpenParents(...) abort$/;"	f
s:OpenWindow	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:OpenWindow(flags) abort$/;"	f
s:Opener	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
s:Opener.New	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
s:Opener._bufInWindows	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
s:Opener._checkToCloseTree	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
s:Opener._firstUsableWindow	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
s:Opener._gotoTargetWin	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
s:Opener._isWindowUsable	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
s:Opener._newSplit	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
s:Opener._newVSplit	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
s:Opener._openDirectory	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
s:Opener._openFile	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
s:Opener._previousWindow	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
s:Opener._restoreCursorPos	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
s:Opener._reuseWindow	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
s:Opener._saveCursorPos	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
s:Opener.open	vim/pack/minpac/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
s:ParseSkip	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^fun! s:ParseSkip(str)$/;"	f
s:ParseTagline	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ParseTagline(part1, part2, typeinfo, fileinfo) abort$/;"	f
s:ParseWords	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^fun! s:ParseWords(groups)$/;"	f
s:Path	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
s:Path.AbsolutePathFor	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(pathStr)$/;"	f
s:Path.CopyingSupported	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
s:Path.Create	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
s:Path.JoinPathStrings	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
s:Path.New	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(pathStr)$/;"	f
s:Path.Resolve	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
s:Path.Slash	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Slash()$/;"	f
s:Path.WinToUnixPath	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
s:Path._escChars	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
s:Path._ignorePatternMatches	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
s:Path._splitChunks	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._splitChunks(path)$/;"	f
s:Path._str	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
s:Path._strForCd	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
s:Path._strForEdit	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
s:Path._strForGlob	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
s:Path._strForUI	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
s:Path.bookmarkNames	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
s:Path.cacheDisplayString	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
s:Path.changeToDir	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
s:Path.compareTo	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.compareTo(path)$/;"	f
s:Path.copy	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
s:Path.copyingWillOverwrite	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
s:Path.createParentDirectories	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
s:Path.delete	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
s:Path.displayString	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
s:Path.edit	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
s:Path.equals	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
s:Path.exists	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
s:Path.extractDriveLetter	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
s:Path.getDir	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
s:Path.getLastPathComponent	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
s:Path.getParent	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
s:Path.getSortKey	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
s:Path.getSortOrderIndex	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
s:Path.ignore	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
s:Path.isAncestor	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(path)$/;"	f
s:Path.isHiddenUnder	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isHiddenUnder(path)$/;"	f
s:Path.isUnder	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(path)$/;"	f
s:Path.isUnixHiddenFile	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
s:Path.isUnixHiddenPath	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
s:Path.readInfoFromDisk	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
s:Path.refresh	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
s:Path.refreshFlags	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
s:Path.rename	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
s:Path.str	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
s:Path.strTrunk	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
s:Path.tabnr	vim/pack/minpac/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
s:Plog	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Plog(bang, arg) abort$/;"	f
s:PrepareWrappedCommand	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! s:PrepareWrappedCommand(original_wrapper, command) abort$/;"	f
s:Preview	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Preview(bang, lnum, uri) abort$/;"	f
s:PreviewColorInLine	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:PreviewColorInLine(where) "{{{1$/;"	f
s:PrintHelp	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:PrintHelp() abort$/;"	f
s:PrintKinds	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:PrintKinds(typeinfo, fileinfo) abort$/;"	f
s:PrintTag	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:PrintTag(tag, depth, output, fileinfo, typeinfo) abort$/;"	f
s:ProcessFile	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ProcessFile(fname, ftype) abort$/;"	f
s:ProcessTag	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function s:ProcessTag(name, filename, pattern, fields, is_split, typeinfo, fileinfo) abort$/;"	f
s:RGB2HSL	vim/colors/neodark.vim	/^function! s:RGB2HSL(RGB)$/;"	f
s:RGB2hex	vim/colors/neodark.vim	/^function! s:RGB2hex(RGB)$/;"	f
s:Rails	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Rails(bang, count, arg) abort$/;"	f
s:Rake	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Rake(bang, lnum, arg) abort$/;"	f
s:Ref	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^fun! s:Ref(string, d, ...)$/;"	f
s:Refresh	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Refresh(bang)$/;"	f
s:RefreshBuffer	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:RefreshBuffer()$/;"	f
s:Related	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:Related(cmd,line1,line2,count,...) abort$/;"	f
s:RemapItemTypes	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! s:RemapItemTypes(type_map, loclist) abort$/;"	f
s:RemoveProblemsForDisabledLinters	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! s:RemoveProblemsForDisabledLinters(buffer, linters) abort$/;"	f
s:RemoveUnicodeQuotes	vim/pack/minpac/start/ale/autoload/ale/handlers/flawfinder.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
s:RemoveUnicodeQuotes	vim/pack/minpac/start/ale/autoload/ale/handlers/gcc.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
s:RemoveUnicodeQuotes	vim/pack/minpac/start/ale/autoload/ale/handlers/pony.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
s:RenderContent	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:RenderContent(...) abort$/;"	f
s:RenderKeepView	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:RenderKeepView(...) abort$/;"	f
s:ReopenWindow	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ReopenWindow(delbufname) abort$/;"	f
s:ReplaceCompleteopt	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! s:ReplaceCompleteopt() abort$/;"	f
s:Resolve	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^fun! s:Resolve(source, target, output)$/;"	f
s:RestoreSession	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:RestoreSession() abort$/;"	f
s:Rgb2xterm	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:Rgb2xterm(color) "{{{1$/;"	f
s:RgbBgColor	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:RgbBgColor() "{{{2$/;"	f
s:RgbColor	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:RgbColor(str, lineno) "{{{2$/;"	f
s:Rgba2Rgb	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:Rgba2Rgb(r,g,b,alpha,percent,rgb_bg) "{{{2$/;"	f
s:RgbaColor	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:RgbaColor(str, lineno) "{{{2$/;"	f
s:RootDirectory	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^function! s:RootDirectory()$/;"	f
s:RubyExtract	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:RubyExtract(bang, mods, root, before, name) range abort$/;"	f
s:RunFixer	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^function! s:RunFixer(options) abort$/;"	f
s:RunJob	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! s:RunJob(options) abort$/;"	f
s:RunJob	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^function! s:RunJob(options) abort$/;"	f
s:RunLinter	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! s:RunLinter(buffer, linter) abort$/;"	f
s:SEVERITY_ERROR	vim/pack/minpac/start/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_ERROR = 1$/;"	v
s:SEVERITY_HINT	vim/pack/minpac/start/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_HINT = 4$/;"	v
s:SEVERITY_INFORMATION	vim/pack/minpac/start/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_INFORMATION = 3$/;"	v
s:SEVERITY_WARNING	vim/pack/minpac/start/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_WARNING = 2$/;"	v
s:SID	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function s:SID()$/;"	f
s:SandboxCheck	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^        function! s:SandboxCheck() abort$/;"	f
s:SearchForRootDirectory	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^function! s:SearchForRootDirectory()$/;"	f
s:SendMessageData	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^function! s:SendMessageData(conn, data) abort$/;"	f
s:SetFoldLevel	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevel(level, force) abort$/;"	f
s:SetFoldLevelRecursive	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevelRecursive(fileinfo, tags, level) abort$/;"	f
s:SetListsImpl	vim/pack/minpac/start/ale/autoload/ale/list.vim	/^function! s:SetListsImpl(timer_id, buffer, loclist) abort$/;"	f
s:SetMatcher	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:SetMatcher(color, pat) "{{{1$/;"	f
s:SetSignColumnWithoutErrorsHighlight	vim/pack/minpac/start/ale/autoload/ale/sign.vim	/^    function! s:SetSignColumnWithoutErrorsHighlight() abort$/;"	f
s:SetStatusLine	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:SetStatusLine()$/;"	f
s:Setup	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! s:Setup(enabled) abort$/;"	f
s:ShouldOpen	vim/pack/minpac/start/ale/autoload/ale/list.vim	/^function! s:ShouldOpen(buffer) abort$/;"	f
s:ShouldSuggestForType	vim/pack/minpac/start/ale/autoload/ale/fix/registry.vim	/^function! s:ShouldSuggestForType(suggested_filetypes, type_list) abort$/;"	f
s:ShowDetails	vim/pack/minpac/start/ale/autoload/ale/hover.vim	/^function! s:ShowDetails(linter) abort$/;"	f
s:ShowInPreviewWin	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ShowInPreviewWin() abort$/;"	f
s:ShowPrototype	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ShowPrototype(short) abort$/;"	f
s:ShrinkIfExpanded	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ShrinkIfExpanded() abort$/;"	f
s:State	vim/pack/minpac/start/tagbar/autoload/tagbar/state.vim	/^let s:State = {$/;"	v
s:State.New	vim/pack/minpac/start/tagbar/autoload/tagbar/state.vim	/^function! s:State.New() abort dict$/;"	f
s:State.getCurrent	vim/pack/minpac/start/tagbar/autoload/tagbar/state.vim	/^function! s:State.getCurrent(force_current) abort dict$/;"	f
s:State.setCurrentFile	vim/pack/minpac/start/tagbar/autoload/tagbar/state.vim	/^function! s:State.setCurrentFile(fileinfo) abort dict$/;"	f
s:State.setPaused	vim/pack/minpac/start/tagbar/autoload/tagbar/state.vim	/^function! s:State.setPaused() abort dict$/;"	f
s:StatusForListFormat	vim/pack/minpac/start/ale/autoload/ale/statusline.vim	/^function! s:StatusForListFormat() abort$/;"	f
s:StopCurrentJobs	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^function! s:StopCurrentJobs(buffer, include_lint_file_jobs) abort$/;"	f
s:StopCursorTimer	vim/pack/minpac/start/ale/autoload/ale/cursor.vim	/^function! s:StopCursorTimer() abort$/;"	f
s:TYPE	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^let s:TYPE = {'dict': type({}), 'funcref': type(function('call')), 'string': type(''), 'list': t/;"	v
s:TagbarBufName	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:TagbarBufName() abort$/;"	f
s:TemporaryFilename	vim/pack/minpac/start/ale/autoload/ale/command.vim	/^function! s:TemporaryFilename(buffer) abort$/;"	f
s:TextChanged	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:TextChanged() "{{{1$/;"	f
s:TimerHandler	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^function! s:TimerHandler(...) abort$/;"	f
s:ToggleAutoclose	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleAutoclose() abort$/;"	f
s:ToggleCaseInsensitive	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleCaseInsensitive() abort$/;"	f
s:ToggleFold	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleFold() abort$/;"	f
s:ToggleHelp	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleHelp() abort$/;"	f
s:ToggleHideNonPublicTags	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleHideNonPublicTags() abort$/;"	f
s:ToggleSort	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleSort() abort$/;"	f
s:ToggleWindow	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleWindow(flags) abort$/;"	f
s:Transform	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:Transform(algorithm,type) abort$/;"	f
s:TransformOpfunc	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:TransformOpfunc(type) abort$/;"	f
s:TransformSetup	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:TransformSetup(algorithm) abort$/;"	f
s:TransformUserTypeDef	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:TransformUserTypeDef(def) abort$/;"	f
s:TreeDirNode	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
s:TreeDirNode.AbsoluteTreeRoot	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
s:TreeDirNode.GetSelected	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
s:TreeDirNode.New	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
s:TreeDirNode._glob	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
s:TreeDirNode._initChildren	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
s:TreeDirNode._openInNewTab	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
s:TreeDirNode.activate	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
s:TreeDirNode.addChild	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
s:TreeDirNode.close	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
s:TreeDirNode.closeChildren	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
s:TreeDirNode.createChild	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
s:TreeDirNode.displayString	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
s:TreeDirNode.findNode	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
s:TreeDirNode.getCascade	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
s:TreeDirNode.getChild	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
s:TreeDirNode.getChildByIndex	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
s:TreeDirNode.getChildCount	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
s:TreeDirNode.getChildIndex	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
s:TreeDirNode.getVisibleChildCount	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
s:TreeDirNode.getVisibleChildren	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
s:TreeDirNode.hasVisibleChildren	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
s:TreeDirNode.isCascadable	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
s:TreeDirNode.open	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
s:TreeDirNode.openAlong	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
s:TreeDirNode.openExplorer	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
s:TreeDirNode.openInNewTab	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
s:TreeDirNode.openRecursively	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
s:TreeDirNode.refresh	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
s:TreeDirNode.refreshDirFlags	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
s:TreeDirNode.refreshFlags	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
s:TreeDirNode.removeChild	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
s:TreeDirNode.reveal	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
s:TreeDirNode.sortChildren	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
s:TreeDirNode.toggleOpen	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
s:TreeDirNode.transplantChild	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
s:TreeFileNode	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
s:TreeFileNode.GetRootForTab	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
s:TreeFileNode.GetSelected	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
s:TreeFileNode.New	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
s:TreeFileNode._renderToString	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
s:TreeFileNode.activate	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
s:TreeFileNode.bookmark	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
s:TreeFileNode.cacheParent	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
s:TreeFileNode.clearBookmarks	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
s:TreeFileNode.copy	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
s:TreeFileNode.delete	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
s:TreeFileNode.displayString	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
s:TreeFileNode.equals	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
s:TreeFileNode.findNode	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
s:TreeFileNode.findOpenDirSiblingWithVisibleChildren	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
s:TreeFileNode.findSibling	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
s:TreeFileNode.getNerdtree	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
s:TreeFileNode.isRoot	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
s:TreeFileNode.isVisible	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
s:TreeFileNode.open	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
s:TreeFileNode.openInNewTab	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
s:TreeFileNode.openSplit	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
s:TreeFileNode.openVSplit	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
s:TreeFileNode.putCursorHere	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
s:TreeFileNode.refresh	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
s:TreeFileNode.refreshFlags	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
s:TreeFileNode.rename	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
s:TreeFileNode.renderToString	vim/pack/minpac/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
s:UI	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
s:UI.IndentWid	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
s:UI.MarkupReg	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
s:UI.New	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
s:UI.UpDirLine	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
s:UI._dumpHelp	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
s:UI._indentLevelFor	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
s:UI._renderBookmarks	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
s:UI._stripMarkup	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line)$/;"	f
s:UI.centerView	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
s:UI.getLineNum	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(file_node)$/;"	f
s:UI.getPath	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
s:UI.getRootLineNum	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
s:UI.getShowBookmarks	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
s:UI.getShowFiles	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
s:UI.getShowHelp	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
s:UI.getShowHidden	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
s:UI.isIgnoreFilterEnabled	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
s:UI.isMinimal	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
s:UI.render	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
s:UI.renderViewSavingPosition	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
s:UI.restoreScreenState	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
s:UI.saveScreenState	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
s:UI.setShowHidden	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
s:UI.toggleHelp	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
s:UI.toggleIgnoreFilter	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
s:UI.toggleShowBookmarks	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
s:UI.toggleShowFiles	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
s:UI.toggleShowHidden	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
s:UI.toggleZoom	vim/pack/minpac/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
s:UpdateLineNumbers	vim/pack/minpac/start/ale/autoload/ale/sign.vim	/^function! s:UpdateLineNumbers(buffer, current_sign_list, loclist) abort$/;"	f
s:UsingModule	vim/pack/minpac/start/ale/ale_linters/python/flake8.vim	/^function! s:UsingModule(buffer) abort$/;"	f
s:VimCloseCallback	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! s:VimCloseCallback(channel) abort$/;"	f
s:VimErrorCallback	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! s:VimErrorCallback(channel, data) abort$/;"	f
s:VimExitCallback	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! s:VimExitCallback(job, exit_code) abort$/;"	f
s:VimOutputCallback	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^function! s:VimOutputCallback(channel, data) abort$/;"	f
s:Wholematch	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
s:Xterm2rgb	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^function! s:Xterm2rgb(color) "{{{1$/;"	f
s:ZoomWindow	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:ZoomWindow() abort$/;"	f
s:_	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^let s:_ = 1$/;"	v
s:_getPrefix	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:_getPrefix() abort dict$/;"	f
s:_handleOldOptions	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
s:_lightline	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^let s:_lightline = {$/;"	v
s:abolish_l	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^function! s:abolish_l(word)$/;"	f
s:abolish_setup	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^function! s:abolish_setup()$/;"	f
s:abolish_t	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^function! s:abolish_t(word)$/;"	f
s:absolute	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:absolute(path, in) abort$/;"	f
s:ack	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^let s:ack     = index(g:grepper.tools, 'ack')$/;"	v
s:ackgrep	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^let s:ackgrep = index(g:grepper.tools, 'ack-grep')$/;"	v
s:action_for	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:action_for(key, ...)$/;"	f
s:activateAll	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll()$/;"	f
s:activateBookmark	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm)$/;"	f
s:activateDirNode	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(directoryNode)$/;"	f
s:activateFileNode	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node)$/;"	f
s:active	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:active() abort$/;"	f
s:addChild	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:addChild(tag) abort dict$/;"	f
s:addTag	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:addTag(tag) abort dict$/;"	f
s:add_db	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
s:add_methods	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:add_methods(namespace, method_names)$/;"	f
s:add_snr	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_tag_recursive	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:add_tag_recursive(parent, taginfo, pathlist) abort$/;"	f
s:added_db_files	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:addfilecmds	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:addfilecmds(type) abort$/;"	f
s:ag_handler	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_handler(lines, with_column)$/;"	f
s:ag_to_qf	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_to_qf(line, with_column)$/;"	f
s:align_lists	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_lists(lists)$/;"	f
s:align_pairs	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_pairs(list)$/;"	f
s:all	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:all() abort$/;"	f
s:all_files	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:all_files()$/;"	f
s:ansi	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
s:ansi	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cya/;"	v
s:app_asset_path	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_asset_path() dict abort$/;"	f
s:app_commands	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_commands() dict abort$/;"	f
s:app_db_config	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_db_config(environment) dict$/;"	f
s:app_db_url	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_db_url(...) dict abort$/;"	f
s:app_dbext_settings	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_dbext_settings(environment) dict abort$/;"	f
s:app_default_locale	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_default_locale() dict abort$/;"	f
s:app_engines	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_engines() dict abort$/;"	f
s:app_environments	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_environments() dict$/;"	f
s:app_execute_rails_command	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_execute_rails_command(cmd) dict abort$/;"	f
s:app_file	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_file(name) dict abort$/;"	f
s:app_find_file	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_find_file(name, ...) dict abort$/;"	f
s:app_gems	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_gems() dict abort$/;"	f
s:app_generator_command	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_generator_command(bang, mods, ...) dict abort$/;"	f
s:app_generators	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_generators() dict abort$/;"	f
s:app_has	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_has(feature) dict$/;"	f
s:app_has_file	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_has_file(file) dict$/;"	f
s:app_has_gem	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_has_gem(gem) dict abort$/;"	f
s:app_has_path	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_has_path(path) dict$/;"	f
s:app_has_rails5	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_has_rails5() abort dict$/;"	f
s:app_internal_load_path	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_internal_load_path() dict abort$/;"	f
s:app_migration	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_migration(file) dict$/;"	f
s:app_named_route_file	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_named_route_file(route_name) dict abort$/;"	f
s:app_output_command	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_output_command(count, code) dict$/;"	f
s:app_pack_suffixes	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_pack_suffixes(type) dict abort$/;"	f
s:app_path	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_path(...) dict$/;"	f
s:app_prepare_rails_command	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_prepare_rails_command(cmd) dict abort$/;"	f
s:app_projections	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_projections() dict abort$/;"	f
s:app_prototype	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:app_prototype = {}$/;"	v
s:app_prototype	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:app_prototype.cache = s:cache_prototype$/;"	v
s:app_rake_command	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_rake_command(...) dict abort$/;"	f
s:app_rake_tasks	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_rake_tasks() dict abort$/;"	f
s:app_relglob	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_relglob(path,glob,...) dict$/;"	f
s:app_resolve_asset	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_resolve_asset(name, ...) dict abort$/;"	f
s:app_resolve_pack	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_resolve_pack(name, ...) dict abort$/;"	f
s:app_routes	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_routes() dict abort$/;"	f
s:app_ruby_script_command	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_ruby_script_command(cmd) dict abort$/;"	f
s:app_server_binding	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_server_binding() dict abort$/;"	f
s:app_server_command	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_server_command(kill, bg, arg) dict abort$/;"	f
s:app_server_pid	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_server_pid() dict abort$/;"	f
s:app_smart_projections	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_smart_projections() dict abort$/;"	f
s:app_start_rails_command	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_start_rails_command(cmd, ...) dict abort$/;"	f
s:app_static_rails_command	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_static_rails_command(cmd) dict abort$/;"	f
s:app_stylesheet_suffix	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_stylesheet_suffix() dict abort$/;"	f
s:app_tags_command	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_tags_command() dict abort$/;"	f
s:app_user_assertions	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_user_assertions() dict$/;"	f
s:app_user_classes	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:app_user_classes() dict$/;"	f
s:apps	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^  let s:apps = {}$/;"	v
s:aqua	vim/colors/gruvbox.vim	/^  let s:aqua   = s:gb.bright_aqua$/;"	v
s:aqua	vim/colors/gruvbox.vim	/^  let s:aqua   = s:gb.faded_aqua$/;"	v
s:aqua	vim/colors/gruvbox.vim	/^  let s:aqua[1]   = 14$/;"	v
s:aqua	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:aqua = '#3e999f'$/;"	v
s:aqua	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:aqua = '#3e999f'$/;"	v
s:assert	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	vim/pack/minpac/start/lightline.vim/test/error.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	vim/pack/minpac/start/lightline.vim/test/link.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	vim/pack/minpac/start/lightline.vim/test/mode.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	vim/pack/minpac/start/lightline.vim/test/toggle.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	vim/pack/minpac/start/lightline.vim/test/uniq.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:asset_cfile	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:asset_cfile() abort$/;"	f
s:autocamelize	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:autocamelize(files,test)$/;"	f
s:autocommands_done	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:autocommands_done = 0$/;"	v
s:background	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:background = '#444444'$/;"	v
s:background	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:background = '#F5F5F5'$/;"	v
s:backslashdump	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:backslashdump(value, indent) abort$/;"	f
s:base0	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base0 = [ '#0000ff', 12 ]$/;"	v
s:base0	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base0 = '#666666'$/;"	v
s:base0	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base0 = '#909090'$/;"	v
s:base0	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base0 = '#ffffff'$/;"	v
s:base0	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base0 = '#949494'$/;"	v
s:base0	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base0 = '#777777'$/;"	v
s:base0	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base0 = [ '#808070', 244 ]$/;"	v
s:base0	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base0 = [ '#808070', 244 ]$/;"	v
s:base0	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base0 = [ '#839496', s:cuicolors.base0[s:cuiindex] ]$/;"	v
s:base0	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base0 = [ '#808080', 244 ]$/;"	v
s:base00	vim/colors/OceanicNext.vim	/^  let s:base00=['#1b2b34', '235']$/;"	v
s:base00	vim/colors/OceanicNextLight.vim	/^  let s:base00=['#d8dee9', '253']$/;"	v
s:base00	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base00 = [ '#ffff00', 11  ]$/;"	v
s:base00	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base00 = '#808080'$/;"	v
s:base00	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base00 = '#666666'$/;"	v
s:base00	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base00 = '#6060df'$/;"	v
s:base00	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base00 = '#767676'$/;"	v
s:base00	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base00 = '#666666'$/;"	v
s:base00	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base00 = [ '#666656', 242  ]$/;"	v
s:base00	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base00 = [ '#666656', 242  ]$/;"	v
s:base00	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base00 = [ '#657b83', s:cuicolors.base00[s:cuiindex] ]$/;"	v
s:base00	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base00 = [ '#666666', 242  ]$/;"	v
s:base01	vim/colors/OceanicNext.vim	/^  let s:base01=['#343d46', '237']$/;"	v
s:base01	vim/colors/OceanicNextLight.vim	/^  let s:base01=['#cdd3de', '252']$/;"	v
s:base01	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base01 = [ '#00ff00', 10 ]$/;"	v
s:base01	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base01 = '#b4b4b4'$/;"	v
s:base01	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base01 = '#555555'$/;"	v
s:base01	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base01 = '#6060af'$/;"	v
s:base01	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base01 = '#606060'$/;"	v
s:base01	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base01 = '#555555'$/;"	v
s:base01	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base01 = [ '#4e4e43', 239 ]$/;"	v
s:base01	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base01 = [ '#4e4e43', 239 ]$/;"	v
s:base01	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base01 = [ '#586e75', s:cuicolors.base01[s:cuiindex] ]$/;"	v
s:base01	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base01 = [ '#585858', 240 ]$/;"	v
s:base02	vim/colors/OceanicNext.vim	/^  let s:base02=['#4f5b66', '240']$/;"	v
s:base02	vim/colors/OceanicNextLight.vim	/^  let s:base02=['#c0c5ce', '251']$/;"	v
s:base02	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base02 = [ '#000000', 0 ]$/;"	v
s:base02	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base02 = '#c8c8c8'$/;"	v
s:base02	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base02 = '#434343'$/;"	v
s:base02	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base02 = '#606087'$/;"	v
s:base02	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base02 = '#4e4e4e'$/;"	v
s:base02	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base02 = '#444444'$/;"	v
s:base02	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base02 = [ '#30302c ', 236 ]$/;"	v
s:base02	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base02 = [ '#30302c ', 236 ]$/;"	v
s:base02	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base02 = [ '#073642', s:cuicolors.base02[s:cuiindex] ]$/;"	v
s:base02	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base02 = [ '#444444 ', 238 ]$/;"	v
s:base023	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base023 = '#dfdfdf'$/;"	v
s:base023	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base023 = '#303030'$/;"	v
s:base023	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base023 = '#202087'$/;"	v
s:base023	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base023 = '#262626'$/;"	v
s:base023	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base023 = '#333333'$/;"	v
s:base023	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base023 = [ '#353535 ', 236 ]$/;"	v
s:base03	vim/colors/OceanicNext.vim	/^  let s:base03=['#65737e', '243']$/;"	v
s:base03	vim/colors/OceanicNextLight.vim	/^  let s:base03=['#a7adba', '145']$/;"	v
s:base03	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base03 = [ '#808080', 8 ]$/;"	v
s:base03	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base03 = '#fafafa'$/;"	v
s:base03	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base03 = '#1d1f21'$/;"	v
s:base03	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base03 = '#002451'$/;"	v
s:base03	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base03 = '#12124c'$/;"	v
s:base03	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base03 = '#2d2d2d'$/;"	v
s:base03	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base03 = [ '#151513', 233 ]$/;"	v
s:base03	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base03 = [ '#151513', 233 ]$/;"	v
s:base03	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base03 = [ '#002b36', s:cuicolors.base03[s:cuiindex] ]$/;"	v
s:base03	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base03 = [ '#242424', 235 ]$/;"	v
s:base04	vim/colors/OceanicNext.vim	/^  let s:base04=['#a7adba', '145']$/;"	v
s:base04	vim/colors/OceanicNextLight.vim	/^  let s:base04=['#65737e', '243']$/;"	v
s:base05	vim/colors/OceanicNext.vim	/^  let s:base05=['#c0c5ce', '251']$/;"	v
s:base05	vim/colors/OceanicNextLight.vim	/^  let s:base05=['#4f5b66', '240']$/;"	v
s:base06	vim/colors/OceanicNext.vim	/^  let s:base06=['#cdd3de', '252']$/;"	v
s:base06	vim/colors/OceanicNextLight.vim	/^  let s:base06=['#343d46', '237']$/;"	v
s:base07	vim/colors/OceanicNext.vim	/^  let s:base07=['#d8dee9', '253']$/;"	v
s:base07	vim/colors/OceanicNextLight.vim	/^  let s:base07=['#1b2b34', '235']$/;"	v
s:base08	vim/colors/OceanicNext.vim	/^  let s:base08=['#ec5f67', '203']$/;"	v
s:base08	vim/colors/OceanicNextLight.vim	/^  let s:base08=['#b40b11', '124']$/;"	v
s:base09	vim/colors/OceanicNext.vim	/^  let s:base09=['#f99157', '209']$/;"	v
s:base09	vim/colors/OceanicNextLight.vim	/^  let s:base09=['#b4713d', '131']$/;"	v
s:base0A	vim/colors/OceanicNext.vim	/^  let s:base0A=['#fac863', '221']$/;"	v
s:base0A	vim/colors/OceanicNextLight.vim	/^  let s:base0A=['#a48c32', '137']$/;"	v
s:base0B	vim/colors/OceanicNext.vim	/^  let s:base0B=['#99c794', '114']$/;"	v
s:base0B	vim/colors/OceanicNextLight.vim	/^  let s:base0B=['#869235', '101']$/;"	v
s:base0C	vim/colors/OceanicNext.vim	/^  let s:base0C=['#62b3b2', '73']$/;"	v
s:base0C	vim/colors/OceanicNextLight.vim	/^  let s:base0C=['#5b9c90', '72']$/;"	v
s:base0D	vim/colors/OceanicNext.vim	/^  let s:base0D=['#6699cc', '68']$/;"	v
s:base0D	vim/colors/OceanicNextLight.vim	/^  let s:base0D=['#526f93', '60']$/;"	v
s:base0E	vim/colors/OceanicNext.vim	/^  let s:base0E=['#c594c5', '176']$/;"	v
s:base0E	vim/colors/OceanicNextLight.vim	/^  let s:base0E=['#896a98', '96']$/;"	v
s:base0F	vim/colors/OceanicNext.vim	/^  let s:base0F=['#ab7967', '137']$/;"	v
s:base0F	vim/colors/OceanicNextLight.vim	/^  let s:base0F=['#9a806d', '101']$/;"	v
s:base1	vim/colors/neodark.vim	/^  let s:base1 = ['#1F2F38', 236]$/;"	v
s:base1	vim/colors/neodark.vim	/^  let s:base1 = [bases[0], 236]$/;"	v
s:base1	vim/colors/neodark.vim	/^  let s:base1[0] = '#303030'$/;"	v
s:base1	vim/colors/neodark.vim	/^  let s:base1[1] = 'none' " This doesn't work well for airline$/;"	v
s:base1	vim/colors/neodark.vim	/^  let s:base1[1] = 0$/;"	v
s:base1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base1 = [ '#00ffff', 14 ]$/;"	v
s:base1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base1 = '#555555'$/;"	v
s:base1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base1 = '#a0a0a0'$/;"	v
s:base1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base1 = '#ffffff'$/;"	v
s:base1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base1 = '#b2b2b2'$/;"	v
s:base1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base1 = '#999999'$/;"	v
s:base1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base1 = [ '#949484', 246 ]$/;"	v
s:base1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base1 = [ '#949484', 246 ]$/;"	v
s:base1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base1 = [ '#93a1a1', s:cuicolors.base1[s:cuiindex] ]$/;"	v
s:base1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base1 = [ '#969696', 247 ]$/;"	v
s:base10	vim/colors/OceanicNext.vim	/^  let s:base10=['#ffffff', '15']$/;"	v
s:base10	vim/colors/OceanicNextLight.vim	/^  let s:base10=['#ffffff', '15']$/;"	v
s:base2	vim/colors/neodark.vim	/^  let s:base2 = ['#263A45', 237]$/;"	v
s:base2	vim/colors/neodark.vim	/^  let s:base2 = [bases[1], 237]$/;"	v
s:base2	vim/colors/neodark.vim	/^  let s:base2[0] = '#3a3a3a'$/;"	v
s:base2	vim/colors/neodark.vim	/^  let s:base2[1] = 8$/;"	v
s:base2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base2 = [ '#c0c0c0', 7 ]$/;"	v
s:base2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base2 = '#4f4f4f'$/;"	v
s:base2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base2 = '#bababa'$/;"	v
s:base2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base2 = '#ffffff'$/;"	v
s:base2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base2 = '#c6c6c6'$/;"	v
s:base2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base2 = '#aaaaaa'$/;"	v
s:base2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base2 = [ '#a8a897', 248 ]$/;"	v
s:base2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base2 = [ '#a8a897', 248 ]$/;"	v
s:base2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base2 = [ '#eee8d5', s:cuicolors.base2[s:cuiindex] ]$/;"	v
s:base2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base2 = [ '#a8a8a8', 248 ]$/;"	v
s:base23	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base23 = '#ffffff'$/;"	v
s:base23	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base23 = '#d0d0d0'$/;"	v
s:base23	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base23 = '#bbbbbb'$/;"	v
s:base3	vim/colors/neodark.vim	/^  let s:base3 = ['#475C69', 59]$/;"	v
s:base3	vim/colors/neodark.vim	/^  let s:base3 = [bases[2], 59]$/;"	v
s:base3	vim/colors/neodark.vim	/^  let s:base3[0] = '#5f5f5f'$/;"	v
s:base3	vim/colors/neodark.vim	/^  let s:base3[1] = 13$/;"	v
s:base3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base3 = [ '#ffffff', 15 ]$/;"	v
s:base3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base3 = '#4d4d4c'$/;"	v
s:base3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base3 = '#c5c8c6'$/;"	v
s:base3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base3 = '#ffffff'$/;"	v
s:base3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base3 = '#eaeaea'$/;"	v
s:base3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base3 = '#cccccc'$/;"	v
s:base3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base3 = [ '#e8e8d3', 253 ]$/;"	v
s:base3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base3 = [ '#e8e8d3', 253 ]$/;"	v
s:base3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base3 = [ '#fdf6e3', s:cuicolors.base3[s:cuiindex] ]$/;"	v
s:base3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base3 = [ '#d0d0d0', 252 ]$/;"	v
s:base4	vim/colors/neodark.vim	/^  let s:base4 = ['#658595', 245]$/;"	v
s:base4	vim/colors/neodark.vim	/^  let s:base4 = [bases[3], 245]$/;"	v
s:base4	vim/colors/neodark.vim	/^  let s:base4[0] = '#8a8a8a'$/;"	v
s:base4	vim/colors/neodark.vim	/^  let s:base4[1] = 7$/;"	v
s:base5	vim/colors/neodark.vim	/^  let s:base5 = ['#AABBC4', 250]$/;"	v
s:base5	vim/colors/neodark.vim	/^  let s:base5 = [bases[4], 250]$/;"	v
s:base5	vim/colors/neodark.vim	/^  let s:base5[0] = '#bcbcbc'$/;"	v
s:base5	vim/colors/neodark.vim	/^  let s:base5[1] = 15$/;"	v
s:base_dir	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^  let s:base_dir = expand('<sfile>:h:h')$/;"	v
s:basic16	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^let s:basic16 = [$/;"	v
s:begin_failed_skip_pattern	vim/pack/minpac/start/ale/ale_linters/perl/perl.vim	/^let s:begin_failed_skip_pattern = '\\v' . join([$/;"	v
s:beige	vim/colors/neodark.vim	/^  let s:beige[0]      = '#d7af87'$/;"	v
s:beige	vim/colors/neodark.vim	/^  let s:beige[1]      = 11$/;"	v
s:beige	vim/colors/neodark.vim	/^let s:beige      = ['#C7C18B', 180]$/;"	v
s:beige	vim/colors/twilight.vim	/^let s:beige = '#ceb67f'$/;"	v
s:bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:bg     = '#263238'$/;"	v
s:bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:bg     = '#ffffff'$/;"	v
s:bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:bg     = '#263238'$/;"	v
s:bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:bg     = '#ffffff'$/;"	v
s:bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:bg     = [ '#282c34', 235 ]$/;"	v
s:bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:bg     = [ '#fafafa', 255 ]$/;"	v
s:bg0	vim/colors/gruvbox.vim	/^    let s:bg0  = s:gb.dark0_hard$/;"	v
s:bg0	vim/colors/gruvbox.vim	/^    let s:bg0  = s:gb.dark0_soft$/;"	v
s:bg0	vim/colors/gruvbox.vim	/^    let s:bg0  = s:gb.light0_hard$/;"	v
s:bg0	vim/colors/gruvbox.vim	/^    let s:bg0  = s:gb.light0_soft$/;"	v
s:bg0	vim/colors/gruvbox.vim	/^  let s:bg0  = s:gb.dark0$/;"	v
s:bg0	vim/colors/gruvbox.vim	/^  let s:bg0  = s:gb.light0$/;"	v
s:bg0	vim/colors/gruvbox.vim	/^  let s:bg0[1]    = 0$/;"	v
s:bg1	vim/colors/gruvbox.vim	/^  let s:bg1  = s:gb.dark1$/;"	v
s:bg1	vim/colors/gruvbox.vim	/^  let s:bg1  = s:gb.light1$/;"	v
s:bg2	vim/colors/gruvbox.vim	/^  let s:bg2  = s:gb.dark2$/;"	v
s:bg2	vim/colors/gruvbox.vim	/^  let s:bg2  = s:gb.light2$/;"	v
s:bg3	vim/colors/gruvbox.vim	/^  let s:bg3  = s:gb.dark3$/;"	v
s:bg3	vim/colors/gruvbox.vim	/^  let s:bg3  = s:gb.light3$/;"	v
s:bg4	vim/colors/gruvbox.vim	/^  let s:bg4  = s:gb.dark4$/;"	v
s:bg4	vim/colors/gruvbox.vim	/^  let s:bg4  = s:gb.light4$/;"	v
s:bin	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = fnamemodify(s:bin.preview, ':8')$/;"	v
s:bin	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = split(system('for %A in ("'.s:bin.preview.'") do @echo %~sA'), "\\n")[0]$/;"	v
s:bin	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^  let s:bin.preview = (executable('ruby') ? 'ruby' : 'bash').' '.escape(s:bin.preview, '\\')$/;"	v
s:bin	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^let s:bin = {$/;"	v
s:bin_dir	vim/pack/minpac/start/ale/autoload/ale/python.vim	/^let s:bin_dir = has('unix') ? 'bin' : 'Scripts'$/;"	v
s:bin_dir	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^let s:bin_dir = expand('<sfile>:h:h:h').'\/bin\/'$/;"	v
s:black	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:black(x) abort$/;"	f
s:black	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:black = [ '#2b2b2b', 235 ]$/;"	v
s:black	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:black = [ '#232526', 233 ]$/;"	v
s:blue	vim/colors/gruvbox.vim	/^  let s:blue   = s:gb.bright_blue$/;"	v
s:blue	vim/colors/gruvbox.vim	/^  let s:blue   = s:gb.faded_blue$/;"	v
s:blue	vim/colors/gruvbox.vim	/^  let s:blue[1]   = 12$/;"	v
s:blue	vim/colors/neodark.vim	/^  let s:blue[0]       = '#5fafd7'$/;"	v
s:blue	vim/colors/neodark.vim	/^  let s:blue[1]       = 4$/;"	v
s:blue	vim/colors/neodark.vim	/^let s:blue       = ['#639EE4', 74]$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:blue = [ '#000080', 4 ]$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:blue = [ '#4fb4d8' , 39 ]$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:blue = '#00afaf'$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:blue = '#4271ae'$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:blue = '#4271ae'$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:blue = '#81a2be'$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:blue = '#bbdaff'$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:blue = '#7aa6da'$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:blue = '#99cccc'$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:blue = [ '#6897bb' , 67 ] $/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:blue = [ '#8197bf', 103 ]$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:blue   = '#89ddff'$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:blue   = '#82aaff'$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:blue   = [ '#61afef', 75 ]$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:blue = [ '#87afaf', 109 ]$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:blue = [ '#268bd2', s:cuicolors.blue[s:cuiindex] ]$/;"	v
s:blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:blue = [ '#8ac6f2', 117 ]$/;"	v
s:bold	vim/colors/OceanicNext.vim	/^   let s:bold = "bold"$/;"	v
s:bold	vim/colors/OceanicNext.vim	/^  let s:bold = ""$/;"	v
s:bold	vim/colors/OceanicNextLight.vim	/^   let s:bold = "bold"$/;"	v
s:bold	vim/colors/OceanicNextLight.vim	/^  let s:bold = ""$/;"	v
s:bold	vim/colors/gruvbox.vim	/^  let s:bold = ''$/;"	v
s:bold	vim/colors/gruvbox.vim	/^let s:bold = 'bold,'$/;"	v
s:break	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:break(type, arg) abort$/;"	f
s:breaksnr	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:breaksnr(arg) abort$/;"	f
s:brown	vim/colors/neodark.vim	/^  let s:brown[0]      = '#af8787'$/;"	v
s:brown	vim/colors/neodark.vim	/^  let s:brown[1]      = 14$/;"	v
s:brown	vim/colors/neodark.vim	/^let s:brown      = ['#AE8785', 138]$/;"	v
s:btags_sink	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_sink(lines)$/;"	f
s:btags_source	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_source(tag_cmds)$/;"	f
s:buffer_app	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:buffer_app() dict abort$/;"	f
s:buffer_getline	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:buffer_getline(...) dict abort$/;"	f
s:buffer_getvar	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:buffer_getvar(varname) dict abort$/;"	f
s:buffer_line_handler	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_line_handler(lines)$/;"	f
s:buffer_lines	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_lines()$/;"	f
s:buffer_lines	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:buffer_lines() dict abort$/;"	f
s:buffer_name	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:buffer_name() dict abort$/;"	f
s:buffer_number	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:buffer_number() dict abort$/;"	f
s:buffer_path	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:buffer_path() dict abort$/;"	f
s:buffer_prototype	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_seqno	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:buffer_seqno = 0$/;"	v
s:buffer_setvar	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:buffer_setvar(varname, val) dict abort$/;"	f
s:buffer_type_name	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:buffer_type_name(...) dict abort$/;"	f
s:buflisted	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted()$/;"	f
s:buflisted_sorted	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted_sorted()$/;"	f
s:bufopen	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:bufopen(lines)$/;"	f
s:build_cmdline	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:build_cmdline(flags) abort$/;"	f
s:build_path	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:build_path() abort$/;"	f
s:cache_clear	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:cache_clear(...) dict$/;"	f
s:cache_get	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:cache_get(...) dict abort$/;"	f
s:cache_needs	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:cache_needs(key, ...) dict abort$/;"	f
s:cache_project_root	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
s:cache_prototype	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:cache_prototype = {'dict': {}}$/;"	v
s:cache_set	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:cache_set(key, value, ...) dict abort$/;"	f
s:cached_map	vim/pack/minpac/start/ale/autoload/ale/filetypes.vim	/^let s:cached_map = {}$/;"	v
s:calc_size	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:calc_size(max, val, dict)$/;"	f
s:callback	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:callback(dict, lines) abort$/;"	f
s:cfile_delegate	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:cfile_delegate(expr) abort$/;"	f
s:chCwd	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node)$/;"	f
s:chRoot	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node)$/;"	f
s:chdir_pop	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:chdir_pop(buf_dir)$/;"	f
s:chdir_push	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:chdir_push(work_dir)$/;"	f
s:checked_ctags	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:checked_ctags       = 0$/;"	v
s:checked_ctags_types	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:checked_ctags_types = 0$/;"	v
s:chomp	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:chomp(str)$/;"	f
s:classpath_sep	vim/pack/minpac/start/ale/ale_linters/java/javac.vim	/^let s:classpath_sep = has('unix') ? ':' : ';'$/;"	v
s:classpath_sep	vim/pack/minpac/start/ale/ale_linters/kotlin/kotlinc.vim	/^let s:classpath_sep = has('unix') ? ':' : ';'$/;"	v
s:clearOldFolds	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:clearOldFolds() abort dict$/;"	f
s:closeChildren	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node)$/;"	f
s:closeCurrentDir	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node)$/;"	f
s:closeFold	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:closeFold() abort dict$/;"	f
s:closeFold	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:closeFold() abort dict$/;"	f
s:closeKindFold	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:closeKindFold(kind) abort dict$/;"	f
s:closeTreeWindow	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow()$/;"	f
s:cmd	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:cmd(bang, ...) abort$/;"	f
s:cmd_history_sink	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:cmd_history_sink(lines)$/;"	f
s:cmdline	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^let s:cmdline = ''$/;"	v
s:col_end_patterns	vim/pack/minpac/start/ale/autoload/ale/handlers/eslint.vim	/^let s:col_end_patterns = [$/;"	v
s:collect	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:collect(temps) abort$/;"	f
s:color_column	vim/colors/gruvbox.vim	/^  let s:color_column = get(s:gb, g:gruvbox_color_column)$/;"	v
s:color_column	vim/colors/gruvbox.vim	/^let s:color_column = s:bg1$/;"	v
s:color_efm	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:color_efm(pre, before, after)$/;"	f
s:combine_projections	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:combine_projections(dest, src, ...) abort$/;"	f
s:command_sink	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:command_sink(lines)$/;"	f
s:commits	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits(buffer_local, args)$/;"	f
s:commits_sink	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits_sink(lines)$/;"	f
s:common_sink	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:common_sink(action, lines) abort$/;"	f
s:compare_by_kind	vim/pack/minpac/start/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_kind(tag1, tag2) abort$/;"	f
s:compare_by_line	vim/pack/minpac/start/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_line(tag1, tag2) abort$/;"	f
s:compare_typeinfo	vim/pack/minpac/start/tagbar/autoload/tagbar/sorting.vim	/^let s:compare_typeinfo = {}$/;"	v
s:complete_insert	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_insert(lines)$/;"	f
s:complete_trigger	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_trigger()$/;"	f
s:completion_filter	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:completion_filter(results, A, ...) abort$/;"	f
s:compute_working_directory	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:compute_working_directory(flags) abort$/;"	f
s:connections	vim/pack/minpac/start/ale/autoload/ale/lsp.vim	/^let s:connections = []$/;"	v
s:context_jump	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:context_jump(close_window) abort$/;"	f
s:context_next	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:context_next() abort$/;"	f
s:context_previous	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:context_previous() abort$/;"	f
s:controller	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:controller(...)$/;"	f
s:controllerList	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:controllerList(A,L,P)$/;"	f
s:convert	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! s:convert(name, index) abort$/;"	f
s:convert	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:convert(rgb) abort$/;"	f
s:cpo_save	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:createKinddict	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:createKinddict() abort dict$/;"	f
s:create_pseudotag	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:create_pseudotag(name, parent, kind, typeinfo, fileinfo) abort$/;"	f
s:csi	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:csi(color, fg)$/;"	f
s:ctags_is_uctags	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:ctags_is_uctags     = 0$/;"	v
s:cuicolor	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:cuicolor = {$/;"	v
s:cuicolors	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:cuicolors = {$/;"	v
s:cuiindex	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 0$/;"	v
s:cuiindex	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 1$/;"	v
s:cuiindex	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 2$/;"	v
s:cursor_options	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:cursor_options() abort$/;"	f
s:cursor_timer	vim/pack/minpac/start/ale/autoload/ale/cursor.vim	/^let s:cursor_timer = -1$/;"	v
s:cyan	vim/colors/twilight.vim	/^let s:cyan = '#74dad9'$/;"	v
s:cyan	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:cyan = [ '#008080', 6 ]$/;"	v
s:cyan	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:cyan = '#3e999f'$/;"	v
s:cyan	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:cyan = '#8abeb7'$/;"	v
s:cyan	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:cyan = '#99ffff'$/;"	v
s:cyan	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:cyan = '#70c0b1'$/;"	v
s:cyan	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:cyan = '#009999'$/;"	v
s:cyan	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:cyan = [ '#8fbfdc', 110 ]$/;"	v
s:cyan	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:cyan = [ '#66d9ef', 81 ]$/;"	v
s:cyan	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:cyan = [ '#87d7d7', 23 ]$/;"	v
s:cyan	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:cyan = [ '#2aa198', s:cuicolors.cyan[s:cuiindex] ]$/;"	v
s:cyan	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:cyan = s:blue$/;"	v
s:darkGray	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:darkGray = [ '#45474f' , 238 ]$/;"	v
s:dark_grey_blue	vim/colors/twilight.vim	/^let s:dark_grey_blue = '#34383c'$/;"	v
s:darkgrey	vim/colors/twilight.vim	/^let s:darkgrey = '#1a1a1a'$/;"	v
s:debug	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:debug(str)$/;"	f
s:debug_enabled	vim/pack/minpac/start/tagbar/autoload/tagbar/debug.vim	/^let s:debug_enabled = 0$/;"	v
s:debug_file	vim/pack/minpac/start/tagbar/autoload/tagbar/debug.vim	/^let s:debug_file = ''$/;"	v
s:decrement_job_count	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! s:decrement_job_count() abort$/;"	f
s:default_action	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^let s:default_action = {$/;"	v
s:default_action	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^let s:default_action = {$/;"	v
s:default_ale_linter_aliases	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^let s:default_ale_linter_aliases = {$/;"	v
s:default_ale_linters	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^let s:default_ale_linters = {$/;"	v
s:default_layout	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^let s:default_layout = { 'down': '~40%' }$/;"	v
s:default_options	vim/pack/minpac/start/ale/ale_linters/html/tidy.vim	/^let s:default_options = get(g:, 'ale_html_tidy_args', '-q -e -language en')$/;"	v
s:default_options	vim/pack/minpac/start/ale/ale_linters/python/flake8.vim	/^let s:default_options = get(g:, 'ale_python_flake8_args', '')$/;"	v
s:default_projections	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:default_projections = {$/;"	v
s:default_registry	vim/pack/minpac/start/ale/autoload/ale/fix/registry.vim	/^let s:default_registry = {$/;"	v
s:defaults	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:defaults()$/;"	f
s:defaults	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^let s:defaults = {$/;"	v
s:defaults	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^let s:defaults.operator = deepcopy(s:defaults)$/;"	v
s:defaults	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^let s:defaults.operator.prompt = 0$/;"	v
s:define_navcommand	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:define_navcommand(name, projection, ...) abort$/;"	f
s:defs	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^function! s:defs(commands)$/;"	f
s:delayed_update_files	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:delayed_update_files = []$/;"	v
s:deleteBookmark	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bookmark)$/;"	f
s:did_check_exe	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:dirArrows	vim/pack/minpac/start/nerdtree/syntax/nerdtree.vim	/^let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowExpand/;"	v
s:dir_complete	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:dir_complete(lead, cmdline, _) abort$/;"	f
s:disable_maps_and_commands	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:disable_maps_and_commands(file, buf) abort$/;"	f
s:displayHelp	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp()$/;"	f
s:do	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:do(bang, count, cmd) abort$/;"	f
s:do_delayed_update	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:do_delayed_update() abort$/;"	f
s:doau_user	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^function! s:doau_user(arg) abort$/;"	f
s:done	vim/pack/minpac/opt/minpac/test/runtest.vim	/^let s:done = 0$/;"	v
s:done	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^  let s:done += 1$/;"	v
s:done	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^let s:done = 0$/;"	v
s:dopopd	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:dopopd()$/;"	f
s:dot_relative	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:dot_relative(path) abort$/;"	f
s:dotcmp	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:dotcmp(i1, i2)$/;"	f
s:echo_verbose	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! s:echo_verbose(level, msg) abort$/;"	f
s:echom_verbose	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! s:echom_verbose(level, msg) abort$/;"	f
s:edit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:edit(cmd, file) abort$/;"	f
s:edit_command	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:edit_command(cmd, count, ...) abort$/;"	f
s:edit_complete	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:edit_complete(lead, cmdline, _) abort$/;"	f
s:editcmdfor	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:editcmdfor(cmd) abort$/;"	f
s:efm_dir	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:efm_dir() abort$/;"	f
s:efm_generate	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:efm_generate =$/;"	v
s:enable_neovim	vim/pack/minpac/start/ale/ale_linters/vim/vint.vim	/^let s:enable_neovim = has('nvim') ? ' --enable-neovim' : ''$/;"	v
s:end_col_pattern_map	vim/pack/minpac/start/ale/ale_linters/python/flake8.vim	/^let s:end_col_pattern_map = {$/;"	v
s:endof	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:endof(lnum)$/;"	f
s:endswith	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:endswith(str, suffix) abort$/;"	f
s:endswith	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:endswith(string,suffix)$/;"	f
s:ensure_initialization	vim/pack/minpac/opt/minpac/plugin/minpac.vim	/^function! s:ensure_initialization() abort$/;"	f
s:entries	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:entries(path) abort$/;"	f
s:environment	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:environment()$/;"	f
s:err_cb	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! s:err_cb(jobid, opts, job, data) abort$/;"	f
s:error	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:error(msg)$/;"	f
s:error	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:error = '#5f0000'$/;"	v
s:error	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:error = '#ffafdf'$/;"	v
s:error	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:error(msg)$/;"	f
s:error	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:error(str) abort$/;"	f
s:error	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^function! s:error(str)$/;"	f
s:error_delay_ms	vim/pack/minpac/start/ale/autoload/ale.vim	/^let s:error_delay_ms = 1000 * 60 * 2$/;"	v
s:errored	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^      let s:errored = 0$/;"	v
s:errored	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^let s:errored = 0$/;"	v
s:errors	vim/pack/minpac/opt/minpac/test/runtest.vim	/^let s:errors = []$/;"	v
s:errors	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^      let s:errors += 1$/;"	v
s:errors	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^  let s:errors += 1$/;"	v
s:errors	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^let s:errors = 0$/;"	v
s:escape	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape(path)$/;"	f
s:escape	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:escape(path)$/;"	f
s:escape_cword	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:escape_cword(flags, cword)$/;"	f
s:escape_query	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:escape_query(flags, query)$/;"	f
s:escapes	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^let s:escapes = {$/;"	v
s:escarg	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:escarg(p)$/;"	f
s:esccmd	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:esccmd(p)$/;"	f
s:eval	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:eval(dict, key, arg)$/;"	f
s:evaluate_expand	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! s:evaluate_expand(component) abort$/;"	f
s:evaluate_opts	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:evaluate_opts(options)$/;"	f
s:excmds	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:excmds()$/;"	f
s:executable_cache_map	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^    let s:executable_cache_map = {}$/;"	v
s:execute	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:execute(dict, command, use_height, temps) abort$/;"	f
s:execute_term	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:execute_term(dict, command, temps) abort$/;"	f
s:execute_tmux	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:execute_tmux(dict, command, temps) abort$/;"	f
s:exit_cb	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! s:exit_cb(jobid, opts, job, status) abort$/;"	f
s:exit_handler	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:exit_handler(code, command, ...)$/;"	f
s:expand	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! s:expand(components) abort$/;"	f
s:expand	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:expand(...)$/;"	f
s:expand_bufnr	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:expand_bufnr = -1$/;"	v
s:expand_placeholder	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:expand_placeholder(placeholder, expansions) abort$/;"	f
s:expand_placeholder	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:expand_placeholder(placeholder, expansions) abort$/;"	f
s:expand_placeholders	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:expand_placeholders(value, expansions) abort$/;"	f
s:expand_placeholders	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:expand_placeholders(string, placeholders) abort$/;"	f
s:expand_url	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:expand_url(url, params) abort$/;"	f
s:extend	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:extend(base, extra)$/;"	f
s:extend_opts	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:extend_opts(dict, eopts, prepend)$/;"	f
s:extend_projection	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:extend_projection(dest, src) abort$/;"	f
s:extract_path	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:extract_path(string) abort$/;"	f
s:fail	vim/pack/minpac/opt/minpac/test/runtest.vim	/^    let s:fail += 1$/;"	v
s:fail	vim/pack/minpac/opt/minpac/test/runtest.vim	/^let s:fail = 0$/;"	v
s:fail	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^      let s:fail += 1$/;"	v
s:fail	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^let s:fail = 0$/;"	v
s:fg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:fg     = '#d5dbe5'$/;"	v
s:fg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:fg     = '#eeffff'$/;"	v
s:fg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:fg     = [ '#abb2bf', 145 ]$/;"	v
s:fg0	vim/colors/gruvbox.vim	/^  let s:fg0 = s:gb.dark0$/;"	v
s:fg0	vim/colors/gruvbox.vim	/^  let s:fg0 = s:gb.light0$/;"	v
s:fg1	vim/colors/gruvbox.vim	/^  let s:fg1 = s:gb.dark1$/;"	v
s:fg1	vim/colors/gruvbox.vim	/^  let s:fg1 = s:gb.light1$/;"	v
s:fg1	vim/colors/gruvbox.vim	/^  let s:fg1[1]    = 15$/;"	v
s:fg2	vim/colors/gruvbox.vim	/^  let s:fg2 = s:gb.dark2$/;"	v
s:fg2	vim/colors/gruvbox.vim	/^  let s:fg2 = s:gb.light2$/;"	v
s:fg3	vim/colors/gruvbox.vim	/^  let s:fg3 = s:gb.dark3$/;"	v
s:fg3	vim/colors/gruvbox.vim	/^  let s:fg3 = s:gb.light3$/;"	v
s:fg4	vim/colors/gruvbox.vim	/^  let s:fg4 = s:gb.dark4$/;"	v
s:fg4	vim/colors/gruvbox.vim	/^  let s:fg4 = s:gb.light4$/;"	v
s:fg4	vim/colors/gruvbox.vim	/^  let s:fg4[1]    = 7$/;"	v
s:fg4_256	vim/colors/gruvbox.vim	/^  let s:fg4_256 = s:gb.dark4_256$/;"	v
s:fg4_256	vim/colors/gruvbox.vim	/^  let s:fg4_256 = s:gb.light4_256$/;"	v
s:file	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:file = expand('<sfile>:p')$/;"	v
s:file_getline	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:file_getline(lnum,...) dict abort$/;"	f
s:file_lines	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:file_lines() dict abort$/;"	f
s:file_name	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:file_name() dict abort$/;"	f
s:file_options	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_options(prefix)$/;"	f
s:file_path	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:file_path() dict abort$/;"	f
s:file_prototype	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:file_prototype = {}$/;"	v
s:file_source	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_source(prefix)$/;"	f
s:file_split_prefix	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_split_prefix(prefix)$/;"	f
s:filename_regexp	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^let s:filename_regexp = '\\v^%(\\>\\>\\>|\\]\\]\\]) ([[:alnum:][:blank:]\\\/\\-_.~]+):(\\d+)'$/;"	v
s:find	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:find(cmd, file) abort$/;"	f
s:findAndRevealPath	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath(pathStr)$/;"	f
s:find_open_window	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:find_open_window(b)$/;"	f
s:findamethod	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:findamethod(func,repl)$/;"	f
s:findasset	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:findasset(path, dir) abort$/;"	f
s:findasymbol	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:findasymbol(sym,repl)$/;"	f
s:findcmdfor	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:findcmdfor(cmd) abort$/;"	f
s:findfromview	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:findfromview(func,repl)$/;"	f
s:findit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:findit(pat,repl)$/;"	f
s:findlayout	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:findlayout(name)$/;"	f
s:findview	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:findview(name) abort$/;"	f
s:finish_up	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:finish_up(flags)$/;"	f
s:first_line	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:first_line(lines)$/;"	f
s:fixturesEdit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:fixturesEdit(cmd,...)$/;"	f
s:fixturesList	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:fixturesList(A,L,P)$/;"	f
s:flaky	vim/pack/minpac/opt/minpac/test/runtest.vim	/^let s:flaky = [$/;"	v
s:flatten_twice	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! s:flatten_twice(xss) abort$/;"	f
s:fname_prefix	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:fname_prefix(str)$/;"	f
s:fnameescape	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:fnameescape(file) abort$/;"	f
s:fnameescape	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:fnameescape(file) abort$/;"	f
s:fnameescape	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:fnameescape(file) abort$/;"	f
s:force_group_update	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^let s:force_group_update = 0$/;"	v
s:foreground	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:foreground = '#d0d0d0'$/;"	v
s:foreground	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:foreground = '#4d4d4c'$/;"	v
s:format	vim/pack/minpac/start/ale/ale_linters/vim/vint.vim	/^let s:format = '-f "{file_path}:{line_number}:{column_number}: {severity}: {description} (see {r/;"	v
s:format	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:format()$/;"	f
s:format_buffer	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_buffer(b)$/;"	f
s:format_cmd	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_cmd(line)$/;"	f
s:format_excmd	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_excmd(ex)$/;"	f
s:format_mark	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_mark(line)$/;"	f
s:format_win	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_win(tab, win, buf)$/;"	f
s:function	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:function(name) abort$/;"	f
s:function	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
s:function	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
s:function	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:function(name) abort$/;"	f
s:function	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^function! s:function(name)$/;"	f
s:fuzzyglob	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:fuzzyglob(arg) abort$/;"	f
s:fzf	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:fzf(name, opts, extra)$/;"	f
s:fzf_call	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^  function! s:fzf_call(fn, ...)$/;"	f
s:fzf_exec	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:fzf_exec()$/;"	f
s:fzf_expand	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:fzf_expand(fmt)$/;"	f
s:fzf_fnamemodify	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:fzf_fnamemodify(fname, mods)$/;"	f
s:fzf_getcwd	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:fzf_getcwd()$/;"	f
s:fzf_go	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^let s:fzf_go = s:base_dir.'\/bin\/fzf'$/;"	v
s:fzf_restore_colors	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_restore_colors()$/;"	f
s:fzf_tempname	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:fzf_tempname()$/;"	f
s:fzf_tmux	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:fzf_tmux(dict)$/;"	f
s:fzf_tmux	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^let s:fzf_tmux = s:base_dir.'\/bin\/fzf-tmux'$/;"	v
s:fzf_vim_term	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_vim_term()$/;"	f
s:gb	vim/colors/gruvbox.vim	/^let s:gb = {}$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.aqua   = s:aqua$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.bg0 = s:bg0$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.bg1 = s:bg1$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.bg2 = s:bg2$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.bg3 = s:bg3$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.bg4 = s:bg4$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.blue   = s:blue$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.bright_aqua    = ['#8ec07c', 108]     " 142-192-124$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.bright_blue    = ['#83a598', 109]     " 131-165-152$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.bright_green   = ['#b8bb26', 142]     " 184-187-38$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.bright_orange  = ['#fe8019', 208]     " 254-128-25$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.bright_purple  = ['#d3869b', 175]     " 211-134-155$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.bright_red     = ['#fb4934', 167]     " 251-73-52$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.bright_yellow  = ['#fabd2f', 214]     " 250-189-47$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.dark0       = ['#282828', 235]     " 40-40-40$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.dark0_hard  = ['#1d2021', 234]     " 29-32-33$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.dark0_soft  = ['#32302f', 236]     " 50-48-47$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.dark1       = ['#3c3836', 237]     " 60-56-54$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.dark2       = ['#504945', 239]     " 80-73-69$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.dark3       = ['#665c54', 241]     " 102-92-84$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.dark4       = ['#7c6f64', 243]     " 124-111-100$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.dark4_256   = ['#7c6f64', 243]     " 124-111-100$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.faded_aqua     = ['#427b58', 66]      " 66-123-88$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.faded_blue     = ['#076678', 24]      " 7-102-120$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.faded_green    = ['#79740e', 100]     " 121-116-14$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.faded_orange   = ['#af3a03', 130]     " 175-58-3$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.faded_purple   = ['#8f3f71', 96]      " 143-63-113$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.faded_red      = ['#9d0006', 88]      " 157-0-6$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.faded_yellow   = ['#b57614', 136]     " 181-118-20$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.fg0 = s:fg0$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.fg1 = s:fg1$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.fg2 = s:fg2$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.fg3 = s:fg3$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.fg4 = s:fg4$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.fg4_256 = s:fg4_256$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.gray = s:gray$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.gray_244    = ['#928374', 244]     " 146-131-116$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.gray_245    = ['#928374', 245]     " 146-131-116$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.green  = s:green$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.light0      = ['#fbf1c7', 229]     " 253-244-193$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.light0_hard = ['#f9f5d7', 230]     " 249-245-215$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.light0_soft = ['#f2e5bc', 228]     " 242-229-188$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.light1      = ['#ebdbb2', 223]     " 235-219-178$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.light2      = ['#d5c4a1', 250]     " 213-196-161$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.light3      = ['#bdae93', 248]     " 189-174-147$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.light4      = ['#a89984', 246]     " 168-153-132$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.light4_256  = ['#a89984', 246]     " 168-153-132$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.neutral_aqua   = ['#689d6a', 72]      " 104-157-106$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.neutral_blue   = ['#458588', 66]      " 69-133-136$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.neutral_green  = ['#98971a', 106]     " 152-151-26$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.neutral_orange = ['#d65d0e', 166]     " 214-93-14$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.neutral_purple = ['#b16286', 132]     " 177-98-134$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.neutral_red    = ['#cc241d', 124]     " 204-36-29$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.neutral_yellow = ['#d79921', 172]     " 215-153-33$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.orange = s:orange$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.purple = s:purple$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.red    = s:red$/;"	v
s:gb	vim/colors/gruvbox.vim	/^let s:gb.yellow = s:yellow$/;"	v
s:generate_base_colors	vim/colors/neodark.vim	/^function! s:generate_base_colors(base1)$/;"	f
s:generate_helptags	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! s:generate_helptags(dir, force) abort$/;"	f
s:get	vim/pack/minpac/start/tagbar/autoload/tagbar/state.vim	/^function! s:get() abort$/;"	f
s:getChildren	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildren() dict abort$/;"	f
s:getChildrenByName	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildrenByName(tagname) dict abort$/;"	f
s:getClosedParentTline	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getClosedParentTline() abort dict$/;"	f
s:getKind	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:getKind(kind) abort dict$/;"	f
s:getPrototype	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getPrototype	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getPrototype	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getTags	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTags() dict abort$/;"	f
s:getTagsByName	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTagsByName(tagname) dict abort$/;"	f
s:get_color	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_color	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_config	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:get_config() abort$/;"	f
s:get_ctags_executable	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
s:get_current_tool	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:get_current_tool(flags) abort$/;"	f
s:get_current_tool_name	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:get_current_tool_name(flags) abort$/;"	f
s:get_git_root	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_git_root()$/;"	f
s:get_grepprg	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:get_grepprg(flags) abort$/;"	f
s:get_map_str	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:get_map_str(map) abort$/;"	f
s:get_plugin_revision	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! s:get_plugin_revision(name) abort$/;"	f
s:getcmdwintype_exists	vim/pack/minpac/start/ale/autoload/ale.vim	/^let s:getcmdwintype_exists = exists('*getcmdwintype')$/;"	v
s:getlist	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:getlist(arg, key)$/;"	f
s:getnames	vim/pack/minpac/opt/minpac/test/test_minpac.vim	/^func s:getnames(plugs)$/;"	f
s:getpos	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:getpos()$/;"	f
s:gettime	vim/pack/minpac/start/tagbar/autoload/tagbar/debug.vim	/^    function! s:gettime() abort$/;"	f
s:global_variable_list	vim/pack/minpac/start/ale/autoload/ale/debugging.vim	/^let s:global_variable_list = [$/;"	v
s:go_to_definition_map	vim/pack/minpac/start/ale/autoload/ale/definition.vim	/^let s:go_to_definition_map = {}$/;"	v
s:goto_markedwin	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:goto_markedwin(...) abort$/;"	f
s:goto_tagbar	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:goto_tagbar(...) abort$/;"	f
s:goto_win	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:goto_win(winnr, ...) abort$/;"	f
s:gray	vim/colors/gruvbox.vim	/^  let s:gray = s:gb.gray_244$/;"	v
s:gray	vim/colors/gruvbox.vim	/^  let s:gray = s:gb.gray_245$/;"	v
s:gray	vim/colors/gruvbox.vim	/^  let s:gray[1]   = 8$/;"	v
s:gray	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:gray = [ '#686b78' , 242 ]$/;"	v
s:gray	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:gray = [ '#323232', 236 ]$/;"	v
s:gray	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:gray = [ '#808080', 244 ]$/;"	v
s:gray1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray1  = '#2c393f'$/;"	v
s:gray1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray1  = '#37474f'$/;"	v
s:gray1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray1  = '#2e3c43'$/;"	v
s:gray1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray1  = '#314549'$/;"	v
s:gray1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray1  = [ '#494b53', 238 ]$/;"	v
s:gray1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray1  = [ '#5c6370', 241 ]$/;"	v
s:gray2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray2  = '#2c393f'$/;"	v
s:gray2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray2  = '#d5dbe5'$/;"	v
s:gray2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray2  = '#2E3C43'$/;"	v
s:gray2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray2  = '#eeffff'$/;"	v
s:gray2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray2  = [ '#2c323d', 235 ]$/;"	v
s:gray2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray2  = [ '#f0f0f0', 255 ]$/;"	v
s:gray3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray3  = '#37474f'$/;"	v
s:gray3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray3  = '#707880'$/;"	v
s:gray3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray3  = '#314549'$/;"	v
s:gray3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray3  = '#546e7a'$/;"	v
s:gray3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray3  = [ '#3e4452', 240 ]$/;"	v
s:gray3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray3  = [ '#d0d0d0', 250 ]$/;"	v
s:green	vim/colors/gruvbox.vim	/^  let s:green  = s:gb.bright_green$/;"	v
s:green	vim/colors/gruvbox.vim	/^  let s:green  = s:gb.faded_green$/;"	v
s:green	vim/colors/gruvbox.vim	/^  let s:green[1]  = 10$/;"	v
s:green	vim/colors/neodark.vim	/^  let s:green[0]      = '#87af87'$/;"	v
s:green	vim/colors/neodark.vim	/^  let s:green[1]      = 2$/;"	v
s:green	vim/colors/neodark.vim	/^let s:green      = ['#84B97C', 108]$/;"	v
s:green	vim/colors/twilight.vim	/^let s:green = '#a2a96f'$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:green = [ '#008000', 2 ]$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:green = [ '#78bd65' , 41 ]$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:green = '#008700'$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:green = '#008700'$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:green = '#718c00'$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:green = '#b5bd68'$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:green = '#d1f1a9'$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:green = '#b9ca4a'$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:green = '#99cc99'$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:green = [ '#629755', 71 ] $/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:green = [ '#99ad6a', 107 ]$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:green  = '#8bd649'$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:green  = '#c3e88d'$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:green = [ '#a6e22e', 118 ]$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:green  = [ '#98c379', 35 ]$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:green  = [ '#98c379', 76 ]$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:green = [ '#87af87', 108 ]$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:green = [ '#859900', s:cuicolors.green[s:cuiindex] ]$/;"	v
s:green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:green = [ '#95e454', 119 ]$/;"	v
s:grey	vim/colors/twilight.vim	/^let s:grey = '#303030'$/;"	v
s:grey_blue	vim/colors/twilight.vim	/^let s:grey_blue = '#8a9597'$/;"	v
s:gsub	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
s:gsub	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:gsub(str, pat, repl) abort$/;"	f
s:gsub	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
s:guicolor	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:guicolor = {$/;"	v
s:handleLeftClick	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick()$/;"	f
s:handleMiddleMouse	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse()$/;"	f
s:has	vim/pack/minpac/start/vim-projectionist/plugin/projectionist.vim	/^function! s:has(root, file) abort$/;"	f
s:has_any	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:has_any(dict, keys)$/;"	f
s:has_doau_modeline	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^let s:has_doau_modeline = v:version > 703 || v:version == 703 && has('patch442')$/;"	v
s:has_features	vim/pack/minpac/start/ale/plugin/ale.vim	/^    let s:has_features = has('timers') && exists('*job_start') && exists('*ch_close_in')$/;"	v
s:has_features	vim/pack/minpac/start/ale/plugin/ale.vim	/^    let s:has_features = has('timers')$/;"	v
s:has_projections	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:has_projections = {$/;"	v
s:helpermethods	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:helpermethods()$/;"	f
s:helptag_sink	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:helptag_sink(line)$/;"	f
s:hex2RGB	vim/colors/neodark.vim	/^function! s:hex2RGB(hex)$/;"	f
s:hi	vim/colors/neodark.vim	/^function! s:hi(group, fg, bg, attr)$/;"	f
s:hi	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^function! s:hi(name)$/;"	f
s:hi	vim/pack/minpac/start/lightline.vim/test/link.vim	/^function! s:hi(name)$/;"	f
s:highlight_keys	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:highlight_keys(str)$/;"	f
s:highlight_projections	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:highlight_projections(append) abort$/;"	f
s:highlight_query	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:highlight_query(flags)$/;"	f
s:highlight_ruby_defaults	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:highlight_ruby_defaults() abort$/;"	f
s:history	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^function! s:history(arg, bang)$/;"	f
s:history_sink	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_sink(type, lines)$/;"	f
s:history_source	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_source(type)$/;"	f
s:hls_cursor	vim/colors/gruvbox.vim	/^  let s:hls_cursor = get(s:gb, g:gruvbox_hls_cursor)$/;"	v
s:hls_cursor	vim/colors/gruvbox.vim	/^let s:hls_cursor = s:orange$/;"	v
s:hover_map	vim/pack/minpac/start/ale/autoload/ale/hover.vim	/^let s:hover_map = {}$/;"	v
s:ics	vim/pack/minpac/start/tagbar/syntax/tagbar.vim	/^let s:ics = escape(join(g:tagbar_iconchars, ''), ']^\\-')$/;"	v
s:initFoldState	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:initFoldState(known_files) abort dict$/;"	f
s:initOpenURL	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:initOpenURL() abort$/;"	f
s:initVariable	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
s:init_done	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:init_done = 0$/;"	v
s:init_path	vim/pack/minpac/start/ale/autoload/ale/gradle.vim	/^let s:init_path = has('win32')$/;"	v
s:init_var	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^function! s:init_var(var, value) abort$/;"	f
s:inject_snippet	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:inject_snippet(line)$/;"	f
s:install	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^let s:install = s:base_dir.'\/install'$/;"	v
s:installed	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^let s:installed = 0$/;"	v
s:inverse	vim/colors/gruvbox.vim	/^  let s:inverse = ''$/;"	v
s:inverse	vim/colors/gruvbox.vim	/^let s:inverse = 'inverse,'$/;"	v
s:invert_selection	vim/colors/gruvbox.vim	/^    let s:invert_selection = ''$/;"	v
s:invert_selection	vim/colors/gruvbox.vim	/^let s:invert_selection = s:inverse$/;"	v
s:invert_signs	vim/colors/gruvbox.vim	/^    let s:invert_signs = s:inverse$/;"	v
s:invert_signs	vim/colors/gruvbox.vim	/^let s:invert_signs = ''$/;"	v
s:invert_tabline	vim/colors/gruvbox.vim	/^    let s:invert_tabline = s:inverse$/;"	v
s:invert_tabline	vim/colors/gruvbox.vim	/^let s:invert_tabline = ''$/;"	v
s:invertrange	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:invertrange(beg,end)$/;"	f
s:invoke_hook	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! s:invoke_hook(hooktype, args, hook) abort$/;"	f
s:isFoldable	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFoldable() abort dict$/;"	f
s:isFoldable	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFoldable() abort dict$/;"	f
s:isFolded	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFolded() abort dict$/;"	f
s:isFolded	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFolded() abort dict$/;"	f
s:isKindheader	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isKindheader() abort dict$/;"	f
s:isKindheader	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isKindheader() abort dict$/;"	f
s:isNormalTag	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isNormalTag() abort dict$/;"	f
s:isNormalTag	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:isNormalTag() abort dict$/;"	f
s:isPseudoTag	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
s:isPseudoTag	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
s:isSplitTag	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isSplitTag() abort dict$/;"	f
s:isSplitTag	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:isSplitTag() abort dict$/;"	f
s:is_dark	vim/colors/gruvbox.vim	/^let s:is_dark=(&background == 'dark')$/;"	v
s:is_embedded_ruby	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:is_embedded_ruby() abort$/;"	f
s:is_maximized	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:is_maximized    = 0$/;"	v
s:is_win	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	vim/pack/minpac/start/fzf.vim/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:italic	vim/colors/OceanicNext.vim	/^    let s:italic = "italic"$/;"	v
s:italic	vim/colors/OceanicNext.vim	/^  let s:italic = ""$/;"	v
s:italic	vim/colors/OceanicNextLight.vim	/^    let s:italic = "italic"$/;"	v
s:italic	vim/colors/OceanicNextLight.vim	/^  let s:italic = ""$/;"	v
s:italic	vim/colors/gruvbox.vim	/^  let s:italic = ''$/;"	v
s:italic	vim/colors/gruvbox.vim	/^let s:italic = 'italic,'$/;"	v
s:italicize_comments	vim/colors/gruvbox.vim	/^    let s:italicize_comments = ''$/;"	v
s:italicize_comments	vim/colors/gruvbox.vim	/^let s:italicize_comments = s:italic$/;"	v
s:italicize_strings	vim/colors/gruvbox.vim	/^    let s:italicize_strings = s:italic$/;"	v
s:italicize_strings	vim/colors/gruvbox.vim	/^let s:italicize_strings = ''$/;"	v
s:javascriptEdit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:javascriptEdit(cmd,...) abort$/;"	f
s:javascriptList	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:javascriptList(A, L, P, ...) abort$/;"	f
s:job_err_cb	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! s:job_err_cb(id, message, event) dict abort$/;"	f
s:job_error_unsupported_job_type	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^let s:job_error_unsupported_job_type = -2 " unsupported job type$/;"	v
s:job_exit_cb	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! s:job_exit_cb(id, errcode, event) dict abort$/;"	f
s:job_info_map	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^    let s:job_info_map = {}$/;"	v
s:job_info_map	vim/pack/minpac/start/ale/autoload/ale/fix.vim	/^    let s:job_info_map = {}$/;"	v
s:job_kill_timers	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^    let s:job_kill_timers = {}$/;"	v
s:job_map	vim/pack/minpac/start/ale/autoload/ale/job.vim	/^    let s:job_map = {}$/;"	v
s:job_send	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! s:job_send(jobid, data) abort$/;"	f
s:job_start	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! s:job_start(cmd, opts) abort$/;"	f
s:job_stop	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! s:job_stop(jobid) abort$/;"	f
s:job_supported_types	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! s:job_supported_types() abort$/;"	f
s:job_supports_type	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! s:job_supports_type(type) abort$/;"	f
s:job_type_nvimjob	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^let s:job_type_nvimjob = 'nvimjob'$/;"	v
s:job_type_vimjob	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^let s:job_type_vimjob = 'vimjob'$/;"	v
s:job_wait	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! s:job_wait(jobids, timeout) abort$/;"	f
s:job_wait_single	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! s:job_wait_single(jobid, timeout, start) abort$/;"	f
s:jobidseq	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^let s:jobidseq = 0$/;"	v
s:joblist	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^let s:joblist = []$/;"	v
s:jobs	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^let s:jobs = {} " { job, opts, type: 'vimjob|nvimjob'}$/;"	v
s:join	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:join(arg) abort$/;"	f
s:jump	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump(t, w)$/;"	f
s:jump	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:jump(def, ...) abort$/;"	f
s:jumpToChild	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(currentNode, direction)$/;"	f
s:jumpToFirstChild	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node)$/;"	f
s:jumpToLastChild	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node)$/;"	f
s:jumpToNextSibling	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node)$/;"	f
s:jumpToParent	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node)$/;"	f
s:jumpToPrevSibling	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node)$/;"	f
s:jumpToRoot	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot()$/;"	f
s:jumpToSibling	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(currentNode, forward)$/;"	f
s:jumpargs	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:jumpargs(file, jump) abort$/;"	f
s:jumpopt	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:jumpopt(file) abort$/;"	f
s:keepcpo	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^let s:keepcpo = &cpo$/;"	v
s:key_sink	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:key_sink(line)$/;"	f
s:known_files	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:known_files = {$/;"	v
s:known_files	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_files.get	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:known_files.get(fname) abort dict$/;"	f
s:known_files.has	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:known_files.has(fname) abort dict$/;"	f
s:known_files.put	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:known_files.put(fileinfo, ...) abort dict$/;"	f
s:known_files.rm	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:known_files.rm(fname) abort dict$/;"	f
s:known_projects	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:last_alt_bufnr	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:last_alt_bufnr = -1$/;"	v
s:last_done_pos	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:last_done_pos = []$/;"	v
s:last_highlight_tline	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:last_highlight_tline = 0$/;"	v
s:last_mps	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^let s:last_mps = ""$/;"	v
s:last_pattern_options	vim/pack/minpac/start/ale/autoload/ale/pattern_options.vim	/^let s:last_pattern_options = {}$/;"	v
s:last_pos	vim/pack/minpac/start/ale/autoload/ale/cursor.vim	/^let s:last_pos = [0, 0, 0]$/;"	v
s:last_words	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^let s:last_words = ":"$/;"	v
s:lastmethod	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:lastmethod(...)$/;"	f
s:lastmethodline	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:lastmethodline(start)$/;"	f
s:lastopeningline	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:lastopeningline(pattern,limit,start)$/;"	f
s:launcher	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^  let s:launcher = '%s'$/;"	v
s:launcher	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^  let s:launcher = function('s:xterm_launcher')$/;"	v
s:layoutEdit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:layoutEdit(cmd,...) abort$/;"	f
s:layoutList	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:layoutList(A,L,P)$/;"	f
s:layout_keys	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:layout_keys	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:legacy_option_map	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:legacy_option_map(letter) abort$/;"	f
s:lencompare	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:lencompare(a, b) abort$/;"	f
s:lightGray	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:lightGray = [ '#848794' , 245 ]$/;"	v
s:light_blue	vim/colors/neodark.vim	/^  let s:light_blue[0] = '#5fd7d7'$/;"	v
s:light_blue	vim/colors/neodark.vim	/^  let s:light_blue[1] = 12$/;"	v
s:light_blue	vim/colors/neodark.vim	/^let s:light_blue = ['#72C7D1', 80]$/;"	v
s:light_grey_blue	vim/colors/twilight.vim	/^let s:light_grey_blue = '#a0a8b0'$/;"	v
s:light_orange	vim/colors/twilight.vim	/^let s:light_orange = '#ebc471'$/;"	v
s:lightgreen	vim/colors/twilight.vim	/^let s:lightgreen = '#c2c98f'$/;"	v
s:lightgrey	vim/colors/twilight.vim	/^let s:lightgrey = '#605958'$/;"	v
s:line	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! s:line(tabline, inactive) abort$/;"	f
s:line_handler	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:line_handler(lines)$/;"	f
s:lint_timer	vim/pack/minpac/start/ale/autoload/ale.vim	/^let s:lint_timer = -1$/;"	v
s:linters	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^let s:linters = {}$/;"	v
s:load	vim/pack/minpac/start/lightline.vim/autoload/lightline/colortable.vim	/^function! s:load() abort$/;"	f
s:localeEdit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:localeEdit(cmd,...)$/;"	f
s:localeList	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:localeList(A,L,P)$/;"	f
s:log_detect	vim/pack/minpac/start/vim-rails/plugin/rails.vim	/^function! s:log_detect() abort$/;"	f
s:lsp_linter_map	vim/pack/minpac/start/ale/autoload/ale/engine.vim	/^    let s:lsp_linter_map = {}$/;"	v
s:lstrip	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:lstrip(string) abort$/;"	f
s:magenta	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:magenta = [ '#800080', 5 ]$/;"	v
s:magenta	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:magenta = '#8959a8'$/;"	v
s:magenta	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:magenta = '#b294bb'$/;"	v
s:magenta	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:magenta = '#ebbbff'$/;"	v
s:magenta	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:magenta = '#c397d8'$/;"	v
s:magenta	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:magenta = '#cc99cc'$/;"	v
s:magenta	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:magenta = [ '#f0a0c0', 217 ]$/;"	v
s:magenta	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:magenta = [ '#df5f87', 168 ]$/;"	v
s:magenta	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:magenta = [ '#d33682', s:cuicolors.magenta[s:cuiindex] ]$/;"	v
s:magenta	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:magenta = [ '#f2c68a', 216 ]$/;"	v
s:make	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:make(bang, args, ...)$/;"	f
s:manual_update_tags	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
s:map	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^  function! s:map(xs, f) abort$/;"	f
s:map	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^  let s:map = function('map')$/;"	v
s:map	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:map(...) abort$/;"	f
s:maps	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:maps() abort$/;"	f
s:maps	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^let s:maps = []$/;"	v
s:mark_sink	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:mark_sink(lines)$/;"	f
s:mark_window	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:mark_window() abort$/;"	f
s:match	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:match(file, pattern) abort$/;"	f
s:match_plugin	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! s:match_plugin(dir, packname, plugnames) abort$/;"	f
s:match_type	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:match_type(type,...)$/;"	f
s:matchcursor	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:matchcursor(pat)$/;"	f
s:merge_configs	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:merge_configs(config, defaults) abort$/;"	f
s:merge_opts	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:merge_opts(dict, eopts)$/;"	f
s:message	vim/pack/minpac/start/lightline.vim/test/error.vim	/^function! s:message() abort$/;"	f
s:messages	vim/pack/minpac/opt/minpac/test/runtest.vim	/^let s:messages = []$/;"	v
s:messages	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^let s:messages = []$/;"	v
s:mextargs	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:mextargs(str,num)$/;"	f
s:mid_grey_blue	vim/colors/twilight.vim	/^let s:mid_grey_blue = '#64686c'$/;"	v
s:migrationEdit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:migrationEdit(cmd,...)$/;"	f
s:migrationList	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:migrationList(A,L,P)$/;"	f
s:migspc	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:migspc(line)$/;"	f
s:mkeep	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:mkeep(str)$/;"	f
s:mode	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^let s:mode = ''$/;"	v
s:model	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:model(...)$/;"	f
s:mods	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:mods(mods) abort$/;"	f
s:navy	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:navy = '#df875f'$/;"	v
s:navy	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:navy = '#005f87'$/;"	v
s:nbs	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^let s:nbs = nr2char(0x2007)$/;"	v
s:nearby_disabled	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:nearby_disabled = 0$/;"	v
s:new_window	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:new_window      = 1$/;"	v
s:next_tool	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:next_tool(flags)$/;"	f
s:nomodeline	vim/pack/minpac/start/vim-rooter/plugin/rooter.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' :/;"	v
s:none	vim/colors/OceanicNext.vim	/^  let s:none=['NONE', 'NONE']$/;"	v
s:none	vim/colors/OceanicNextLight.vim	/^  let s:none=['NONE', 'NONE']$/;"	v
s:none	vim/colors/gruvbox.vim	/^let s:none = ['NONE', 'NONE']$/;"	v
s:nord0	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord0 = ["#2E3440", "NONE"]$/;"	v
s:nord1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord1 = ["#3B4252", 0]$/;"	v
s:nord10	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord10 = ["#5E81AC", 12]$/;"	v
s:nord11	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord11 = ["#BF616A", 1]$/;"	v
s:nord12	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord12 = ["#D08770", 11]$/;"	v
s:nord13	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord13 = ["#EBCB8B", 3]$/;"	v
s:nord14	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord14 = ["#A3BE8C", 2]$/;"	v
s:nord15	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord15 = ["#B48EAD", 5]$/;"	v
s:nord2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord2 = ["#434C5E", "NONE"]$/;"	v
s:nord3	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord3 = ["#4C566A", 8]$/;"	v
s:nord4	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord4 = ["#D8DEE9", "NONE"]$/;"	v
s:nord5	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord5 = ["#E5E9F0", 7]$/;"	v
s:nord6	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord6 = ["#ECEFF4", 15]$/;"	v
s:nord7	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord7 = ["#8FBCBB", 14]$/;"	v
s:nord8	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord8 = ["#88C0D0", 6]$/;"	v
s:nord9	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord9 = ["#81A1C1", 4]$/;"	v
s:normalize	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! s:normalize(result) abort$/;"	f
s:notslash	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^let s:notslash = '\\\\\\@<!\\%(\\\\\\\\\\)*'$/;"	v
s:nr	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:nr(x) abort$/;"	f
s:number_column	vim/colors/gruvbox.vim	/^  let s:number_column = get(s:gb, g:gruvbox_number_column)$/;"	v
s:number_column	vim/colors/gruvbox.vim	/^let s:number_column = s:none$/;"	v
s:nvim_job_exit_wrapper	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
s:nvim_job_out_wrapper	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
s:old_cpo	vim/pack/minpac/start/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:olive	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:olive = '#dfaf5f'$/;"	v
s:olive	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:olive = '#718c00'$/;"	v
s:omni_start_map	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:omni_start_map = {$/;"	v
s:on_exit	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! s:on_exit(jobid, status, event) abort$/;"	f
s:on_exit	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:on_exit(...) dict abort$/;"	f
s:on_stderr	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! s:on_stderr(jobid, data, event) abort$/;"	f
s:on_stdout	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! s:on_stdout(jobid, data, event) abort$/;"	f
s:on_stdout_nvim	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:on_stdout_nvim(_job_id, data, _event) dict abort$/;"	f
s:on_stdout_vim	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:on_stdout_vim(_job_id, data) dict abort$/;"	f
s:open	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:open(cmd, target)$/;"	f
s:open	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:open(cmd, target)$/;"	f
s:open	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:open(cmd, file) abort$/;"	f
s:openExplorer	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node)$/;"	f
s:openFold	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openFold() abort dict$/;"	f
s:openFold	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:openFold() abort dict$/;"	f
s:openHSplit	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target)$/;"	f
s:openInNewTab	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target)$/;"	f
s:openInNewTabSilent	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target)$/;"	f
s:openKindFold	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:openKindFold(kind) abort dict$/;"	f
s:openNodeRecursively	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node)$/;"	f
s:openParents	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openParents() abort dict$/;"	f
s:openVSplit	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target)$/;"	f
s:open_projection	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:open_projection(cmd, variants, ...) abort$/;"	f
s:operator	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:operator(type) abort$/;"	f
s:opfunc	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:opfunc(t) abort$/;"	f
s:option_map	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:option_map(letter, option, mode) abort$/;"	f
s:orange	vim/colors/gruvbox.vim	/^  let s:orange = s:gb.bright_orange$/;"	v
s:orange	vim/colors/gruvbox.vim	/^  let s:orange = s:gb.faded_orange$/;"	v
s:orange	vim/colors/neodark.vim	/^  let s:orange[0]     = '#d7875f'$/;"	v
s:orange	vim/colors/neodark.vim	/^  let s:orange[1]     = 6$/;"	v
s:orange	vim/colors/neodark.vim	/^let s:orange     = ['#E18254', 173]$/;"	v
s:orange	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:orange = [ '#ff0000', 9 ]$/;"	v
s:orange	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:orange = [ '#ef7c2a' , 202 ]$/;"	v
s:orange	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:orange = '#d75f00'$/;"	v
s:orange	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:orange = '#d75f00'$/;"	v
s:orange	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:orange = '#f5871f'$/;"	v
s:orange	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:orange = '#de935f'$/;"	v
s:orange	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:orange = '#ffc58f'$/;"	v
s:orange	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:orange = '#e78c45'$/;"	v
s:orange	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:orange = '#f99157'$/;"	v
s:orange	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:orange = [ '#fad07a', 222 ]$/;"	v
s:orange	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:orange = [ '#ef5939', 166 ]$/;"	v
s:orange	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:orange = [ '#d7875f', 216 ]$/;"	v
s:orange	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:orange = [ '#cb4b16', s:cuicolors.orange[s:cuiindex] ]$/;"	v
s:orange	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:orange = [ '#e5786d', 173 ]$/;"	v
s:out_cb	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^function! s:out_cb(jobid, opts, job, data) abort$/;"	f
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.right = [ [ s:base02, s:base01 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.insert.left = [ [ s:base3, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.error = [ [ s:base2, s:red ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.left = [ [ s:base3, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.warning = [ [ s:base02, s:yellow ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.replace.left = [ [ s:base3, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.visual.left = [ [ s:base3, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.inactive.left = [ [ s:lightGray, s:darkGray ], [ s:white, s:darkGray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.inactive.middle = [ [ s:white, s:darkGray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.inactive.right = [ [ s:darkGray, s:gray ], [ s:darkGray, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.insert.left = [ [ s:white, s:green ], [ s:white, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.insert.right = copy(s:p.insert.left)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.error = [ [ s:red, s:darkGray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.left = [ [ s:white, s:blue ], [ s:white, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.middle = [ [ s:white, s:darkGray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.right = copy(s:p.normal.left)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.warning = [ [ s:orange, s:darkGray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.replace.left = [ [ s:white, s:red ], [ s:white, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.replace.right = copy(s:p.replace.left)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.left = [ [ s:lightGray, s:darkGray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.middle = [ [ s:yellow, s:veryDarkGray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.right = copy(s:p.tabline.left)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.tabsel = [ [ s:darkGray, s:yellow ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.visual.left = [ [ s:white, s:orange ], [ s:white, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.visual.right = copy(s:p.visual.left)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.left = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.middle = [ [ s:foreground, s:background ], ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.right = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.insert.left = [ [ s:background, s:blue], [ s:statusline_active_fg, s:status ], [ s:statu/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.error = [ [ s:background, s:error ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.left = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ /;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.middle = [ [ s:statusline_active_fg, s:statusline_active_bg ]]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.right = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.replace.left = [ [ s:background, s:pink ], [s:statusline_active_fg, s:status ], [ s:stat/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.left = [ [s:tabline_inactive_fg, s:tabline_inactive_bg ]]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.middle = [ [s:tabline_bg, s:tabline_bg]]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.tabsel = [ [s:tabline_active_fg, s:tabline_active_bg ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.visual.left = [ [ s:visual_fg, s:visual_bg ], [s:statusline_active_fg, s:status ], [ s:s/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.left = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.middle = [ [ s:foreground, s:background ], ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.right = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.insert.left = [ [ s:blue, s:background ], [ s:statusline_active_fg, s:status ], [ s:stat/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.error = [ [ s:background, s:error ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.left = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ /;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.middle = [ [ s:statusline_active_fg, s:statusline_active_bg ]]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.right = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.warning = [ [ s:background, s:olive ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.replace.left = [ [ s:background, s:pink ], [s:statusline_active_fg, s:status ], [ s:stat/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.left = [ [s:tabline_inactive_fg, s:tabline_inactive_bg ]]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.middle = [ [s:tabline_bg, s:tabline_bg]]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.tabsel = [ [s:tabline_active_fg, s:tabline_active_bg ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.visual.left = [ [ s:background, s:orange ], [s:statusline_active_fg, s:status ], [ s:sta/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.error = [ [ s:red, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base0 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.replace.left = [ [ s:base02, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base00 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.error = [ [ s:red, s:base023 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.replace.left = [ [ s:base02, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base0 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.error = [ [ s:base023, s:red ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base03 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.error = [ [ s:red, s:base023 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.error = [ [ s:base023, s:red ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base03 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.left =  [ [ s:black, s:blue ], [ s:blue, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.middle = [ [ s:white, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.right = [ [ s:black, s:blue ], [ s:blue, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.insert.left = [ [ s:black, s:green ], [ s:green, s:gray ] ] $/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.insert.right = [ [ s:black, s:green ], [ s:green, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.error = [ [ s:red, s:black ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.left = [ [ s:black, s:purple ], [ s:purple, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.middle = [ [ s:white, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.right = [ [ s:black, s:purple ], [ s:purple, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.warning = [ [ s:yellow, s:black ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.replace.left = [ [ s:black, s:red ], [ s:red, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.replace.right = [ [ s:black, s:red ], [ s:red, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.left = [ [ s:blue, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.middle = [ [ s:blue, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.right = [ [ s:black, s:blue ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.tabsel = [ [ s:black, s:blue ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.visual.left = [ [ s:black, s:yellow ], [ s:yellow, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.visual.right = [ [ s:black, s:yellow ], [ s:yellow, s:gray ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.inactive.right = [ [ '#292c33', '#61afef', s:term_black, s:term_blue], [ '#abb2bf', '#3e/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.insert.left = [ [ '#292c33', '#61afef', s:term_black, s:term_blue, 'bold' ], [ '#61afef'/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.insert.middle = s:p.normal.middle$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.insert.right = [ [ '#292c33', '#61afef', s:term_black, s:term_blue ], [ '#ABB2BF', '#3E4/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.error = [ [ '#292c33', '#e06c75', s:term_black, s:term_red ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.left = [ [ '#292c33', '#98c379', s:term_black, s:term_green, 'bold' ], [ '#98c379/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.middle = [ [ '#abb2bf', '#292c33', s:term_white, s:term_black ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.right = [ [ '#292c33', '#98c379', s:term_black, s:term_green ], [ '#abb2bf', '#3e/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.warning = [ [ '#292c33', '#e5c07b', s:term_black, s:term_yellow ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.replace.left = [ [ '#292c33', '#e06c75', s:term_black, s:term_red, 'bold' ], [ '#e06c75'/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.replace.middle = s:p.normal.middle$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.replace.right = [ [ '#292c33', '#e06c75', s:term_black, s:term_red, 'bold' ], s:p.normal/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.left = [ s:p.normal.left[1] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.middle = s:p.normal.middle$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.right = [ s:p.normal.left[1] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.tabsel = [ s:p.normal.left[0] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.visual.left = [ [ '#292c33', '#c678dd', s:term_black, s:term_purple, 'bold' ], [ '#c678d/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.visual.right = [ [ '#292c33', '#c678dd', s:term_black, s:term_purple, 'bold' ], s:p.norm/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.middle = [ [ s:base00, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.error = [ [ s:red, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.replace.left = [ [ s:base02, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.middle = [ [ '#303030', '#121212', 236, 233 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.right = [ [ '#121212', '#606060', 233, 241 ], [ '#121212', '#3a3a3a', 233, 237 /;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.insert.left =  [ ['#005f00', '#ffffff', 22, 231, 'bold' ], [ '#ffffff', '#005f00', 231, /;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.error = [ [ '#d0d0d0', '#ff0000', 252, 196 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.left = [ ['#0000ff', '#ffffff', 21, 231, 'bold' ], [ '#ffffff', '#0000ff', 231, 2/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.middle = [ [ '#8a8a8a', '#303030', 245, 236 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.right = [ [ '#303030', '#d0d0d0', 236, 252 ], [ '#303030', '#8a8a8a', 236, 245 ],/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.warning = [ [ '#262626', '#ffff00', 235, 226 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.replace.left = [ [ '#af0000', '#ffffff', 124, 231, 'bold' ], [ '#ffffff', '#af0000', 231/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.left = [ [ '#d0d0d0', '#666666', 252, 242 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.middle = [ [ '#8a8a8a', '#3a3a3a', 245, 237 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.right = [ [ '#d0d0d0', '#666666', 252, 242 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.tabsel = [ [ '#dadada', '#121212', 253, 233 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.visual.left = [ [ '#5f00ff', '#ffffff', 57, 231, 'bold' ], [ '#ffffff', '#5f00ff', 231, /;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.left   = [ [ s:bg,  s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.left   = [ [ s:gray1,  s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.middle = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.right  = [ [ s:bg, s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.right  = [ [ s:gray1, s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.insert.left     = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.insert.left     = [ [ s:bg, s:blue, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.left     = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.left     = [ [ s:bg, s:green, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.middle   = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.middle   = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.insert.right   = [ [ s:bg, s:blue, 'bold' ], [ s:bg, s:blue, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.normal.error   = [ [ s:red2,   s:bg ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.normal.right   = [ [ s:bg, s:green, 'bold' ], [ s:bg, s:green, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.normal.warning = [ [ s:yellow, s:bg ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.replace.right  = [ [ s:bg, s:red1, 'bold' ], [ s:bg, s:red1, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.left   = [ [ s:bg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.right  = copy(s:p.normal.right)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.tabsel = [ [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.visual.right   = [ [ s:bg, s:purple, 'bold' ], [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.left   = [ [ s:bg,  s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.left   = [ [ s:gray1,  s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.middle = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.right  = [ [ s:bg, s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.right  = [ [ s:gray1, s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.insert.left     = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.insert.left     = [ [ s:bg, s:green, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.left     = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.left     = [ [ s:bg, s:blue, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.middle   = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.middle   = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.insert.right   = [ [ s:bg, s:green, 'bold' ], [ s:bg, s:green, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.normal.error   = [ [ s:red2,   s:bg ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.normal.right   = [ [ s:bg, s:blue, 'bold' ], [ s:bg, s:blue, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.normal.warning = [ [ s:yellow, s:bg ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.replace.right  = [ [ s:bg, s:red1, 'bold' ], [ s:bg, s:red1, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.left   = [ [ s:fg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.right  = [ [ s:bg, s:red1, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.tabsel = [ [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.visual.right   = [ [ s:bg, s:purple, 'bold' ], [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.left =  [ [ s:pink, s:black ], [ s:white, s:black ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.middle = [ [ s:gray, s:black ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.right = [ [ s:white, s:pink ], [ s:pink, s:black ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.insert.left = [ [ s:black, s:green ], [ s:green, s:black ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.error = [ [ s:pink, s:black ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.left = [ [ s:black, s:cyan ], [ s:orange, s:black ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.middle = [ [ s:orange, s:black ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.right = [ [ s:pink, s:black ], [ s:black, s:pink ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.warning = [ [ s:yellow, s:black ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.replace.left = [ [ s:black, s:red ], [ s:red, s:black ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.left = [ [ s:pink, s:black ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.middle = [ [ s:pink, s:black] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.tabsel = [ [ s:black, s:pink ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.visual.left = [ [ s:black, s:yellow ], [ s:yellow, s:black ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.left =  [ [ s:nord1, s:nord8 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.middle = [ [ s:nord5, s:nord1 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.right = [ [ s:nord5, s:nord1 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.insert.left = [ [ s:nord1, s:nord6 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.error = [ [ s:nord1, s:nord11 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.left = [ [ s:nord1, s:nord8 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.middle = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.right = [ [ s:nord5, s:nord1 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.warning = [ [ s:nord1, s:nord13 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.replace.left = [ [ s:nord1, s:nord13 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.left = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.middle = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.right = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.tabsel = [ [ s:nord1, s:nord8 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.visual.left = [ [ s:nord1, s:nord7 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.left   = [ [ s:bg,  s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.left   = [ [ s:gray1,  s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.middle = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.right  = [ [ s:bg, s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.right  = [ [ s:gray1, s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.insert.left     = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.insert.left     = [ [ s:bg, s:blue, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.normal.left     = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.normal.left     = [ [ s:bg, s:green, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.normal.middle   = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.normal.middle   = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.insert.right   = [ [ s:bg, s:blue, 'bold' ], [ s:bg, s:blue, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.error   = [ [ s:red2,   s:bg ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.right   = [ [ s:bg, s:green, 'bold' ], [ s:bg, s:green, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.warning = [ [ s:yellow, s:bg ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.replace.right  = [ [ s:bg, s:red1, 'bold' ], [ s:bg, s:red1, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.left   = [ [ s:bg, s:gray3 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.right  = copy(s:p.normal.right)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.tabsel = [ [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.visual.right   = [ [ s:bg, s:purple, 'bold' ], [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.inactive.right = [ ['gray1', 'gray5'], ['gray4', 'gray1'], ['gray4', 'gray0'] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.left = [ ['darkestcyan', 'white', 'bold'], ['white', 'darkblue'] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.middle = [ [ 'mediumcyan', 'darkestblue' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.right = [ [ 'darkestcyan', 'mediumcyan' ], [ 'mediumcyan', 'darkblue' ], [ 'mediu/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.error = [ [ 'gray9', 'brightestred' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.left = [ ['darkestgreen', 'brightgreen', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.middle = [ [ 'gray7', 'gray2' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.right = [ ['gray5', 'gray10'], ['gray9', 'gray4'], ['gray8', 'gray2'] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.warning = [ [ 'gray1', 'yellow' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.left = [ ['white', 'brightred', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.middle = s:p.normal.middle$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.right = s:p.normal.right$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.left = [ [ 'gray9', 'gray4' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.middle = [ [ 'gray2', 'gray8' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.right = [ [ 'gray9', 'gray3' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.tabsel = [ [ 'gray9', 'gray1' ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.visual.left = [ ['darkred', 'brightorange', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.middle = [ [ s:base00, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.error = [ [ s:red, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.replace.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.visual.left = [ [ s:base02, s:peach ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.middle = [ [ s:base01, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.right = [ [ s:base03, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.insert.left = [ [ s:base03, s:green ], [ s:base03, s:base00 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.left = [ [ s:base03, s:blue ], [ s:base03, s:base00 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.right = [ [ s:base03, s:base1 ], [ s:base03, s:base00 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.warning = [ [ s:base03, s:yellow ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.replace.left = [ [ s:base03, s:red ], [ s:base03, s:base00 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.left = [ [ s:base03, s:base00 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.tabsel = [ [ s:base03, s:base1 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.visual.left = [ [ s:base03, s:magenta ], [ s:base03, s:base00 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.left =  [ [ s:base1, s:base02 ], [ s:base00, s:base023 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.middle = [ [ s:base1, s:base023 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.right = [ [ s:base023, s:base01 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.replace.left = [ [ s:base023, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.right = [ [ s:base2, s:base00 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base03 ] ]$/;"	v
s:p	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:parse_flags	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:parse_flags(args) abort$/;"	f
s:partial_timers	vim/pack/minpac/start/ale/autoload/ale/util.vim	/^    let s:partial_timers = {}$/;"	v
s:patBR	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^let s:patBR = ""$/;"	v
s:pathjoin	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:pathjoin(...) abort$/;"	f
s:paths	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:paths() abort$/;"	f
s:pathsplit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:pathsplit(path) abort$/;"	f
s:pattern	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^function! s:pattern(xs, ...) abort$/;"	f
s:pattern	vim/pack/minpac/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=#\\([^-+# ]\\)\\@='$/;"	v
s:pattern	vim/pack/minpac/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=+\\([^-+# ]\\)\\@='$/;"	v
s:pattern	vim/pack/minpac/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=-\\([^-+# ]\\)\\@='$/;"	v
s:pattern	vim/pack/minpac/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . '][-+# ]\\?\\)\\@<=[^*(]\\+\\(\\*\\?\\(([^)]\\+)\\)\\? /;"	v
s:pattern	vim/pack/minpac/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(^[' . s:ics . '] \\?\\)\\@3<=[^-+: ]\\+[^:]\\+$'$/;"	v
s:pattern	vim/pack/minpac/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\S\\@<![' . s:ics . ']\\([-+# ]\\?\\)\\@='$/;"	v
s:paused	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:paused = 0$/;"	v
s:peach	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:peach = [ '#d7afaf', 181 ]$/;"	v
s:pink	vim/colors/neodark.vim	/^  let s:pink[0]       = '#d7afaf'$/;"	v
s:pink	vim/colors/neodark.vim	/^  let s:pink[1]       = 9$/;"	v
s:pink	vim/colors/neodark.vim	/^let s:pink       = ['#E69CA0', 181]$/;"	v
s:pink	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:pink = '#afdf00'$/;"	v
s:pink	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:pink = '#d7005f'$/;"	v
s:pink	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:pink = [ '#f92672', 161 ]$/;"	v
s:pluck	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:pluck(dict, key, default)$/;"	f
s:pop_command	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:pop_command()$/;"	f
s:pragma_error	vim/pack/minpac/start/ale/autoload/ale/handlers/gcc.vim	/^let s:pragma_error = '#pragma once in main file'$/;"	v
s:predefined_fgcolors	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^let s:predefined_fgcolors = {}$/;"	v
s:predefined_fgcolors	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^let s:predefined_fgcolors['dark']  = ['#444444', '#222222', '#000000']$/;"	v
s:predefined_fgcolors	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^let s:predefined_fgcolors['light'] = ['#bbbbbb', '#dddddd', '#ffffff']$/;"	v
s:prefixes	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^let s:prefixes = {$/;"	v
s:prepend_opts	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:prepend_opts(dict, eopts)$/;"	f
s:present	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:present(dict, ...)$/;"	f
s:previewNodeCurrent	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node)$/;"	f
s:previewNodeHSplit	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node)$/;"	f
s:previewNodeVSplit	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node)$/;"	f
s:previewwindow	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:previewwindow() abort$/;"	f
s:process_flags	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:process_flags(flags)$/;"	f
s:process_options_file	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
s:projection_complete	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:projection_complete(lead, cmdline, _) abort$/;"	f
s:projection_pairs	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:projection_pairs(options)$/;"	f
s:projectionist_detect	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^function! s:projectionist_detect() abort$/;"	f
s:projections_for_gems	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:projections_for_gems = {}$/;"	v
s:prompt	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:prompt(flags)$/;"	f
s:promptToDelBuffer	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
s:promptToRenameBuffer	vim/pack/minpac/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToRenameBuffer(bufnum, msg, newFileName)$/;"	f
s:purple	vim/colors/gruvbox.vim	/^  let s:purple = s:gb.bright_purple$/;"	v
s:purple	vim/colors/gruvbox.vim	/^  let s:purple = s:gb.faded_purple$/;"	v
s:purple	vim/colors/gruvbox.vim	/^  let s:purple[1] = 13$/;"	v
s:purple	vim/colors/neodark.vim	/^  let s:purple[0]     = '#af87d7'$/;"	v
s:purple	vim/colors/neodark.vim	/^  let s:purple[1]     = 5$/;"	v
s:purple	vim/colors/neodark.vim	/^let s:purple     = ['#B888E2', 140]$/;"	v
s:purple	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:purple = '#8959a8'$/;"	v
s:purple	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:purple = '#8959a8'$/;"	v
s:purple	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:purple = [ '#9876aa', 104 ]$/;"	v
s:purple	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:purple = '#82aaff'$/;"	v
s:purple	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:purple = '#c792ea'$/;"	v
s:purple	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:purple = [ '#c678dd', 176 ]$/;"	v
s:push_chdir	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:push_chdir(...)$/;"	f
s:pushd	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:pushd(dict)$/;"	f
s:putline	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:putline(how, map) abort$/;"	f
s:pwin_by_tagbar	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:pwin_by_tagbar = 0$/;"	v
s:qf_pre	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:qf_pre() abort$/;"	f
s:qf_pre	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:qf_pre() abort$/;"	f
s:query_exec_with_alternate	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:query_exec_with_alternate(key) abort$/;"	f
s:queued_buffer_number	vim/pack/minpac/start/ale/autoload/ale.vim	/^let s:queued_buffer_number = -1$/;"	v
s:quote_cmds	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^  function! s:quote_cmds(cmds)$/;"	f
s:rake2rails	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:rake2rails(task) abort$/;"	f
s:readable_absolute	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_absolute() dict abort$/;"	f
s:readable_alternate	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_alternate(...) dict abort$/;"	f
s:readable_alternate_candidates	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_alternate_candidates(...) dict abort$/;"	f
s:readable_app	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_app() dict abort$/;"	f
s:readable_calculate_file_type	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_calculate_file_type() dict abort$/;"	f
s:readable_controller_name	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_controller_name(...) dict abort$/;"	f
s:readable_default_rake_task	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_default_rake_task(...) dict abort$/;"	f
s:readable_default_task	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_default_task(...) dict abort$/;"	f
s:readable_define_pattern	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_define_pattern() dict abort$/;"	f
s:readable_end_of	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_end_of(lnum) dict abort$/;"	f
s:readable_find_affinity	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_find_affinity() dict abort$/;"	f
s:readable_format	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_format(start) dict abort$/;"	f
s:readable_last_method	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_last_method(start) dict abort$/;"	f
s:readable_last_method_line	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_last_method_line(start) dict abort$/;"	f
s:readable_last_opening_line	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_last_opening_line(start,pattern,limit) dict abort$/;"	f
s:readable_line_count	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_line_count() dict abort$/;"	f
s:readable_model_name	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_model_name(...) dict abort$/;"	f
s:readable_open_command	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_open_command(cmd, argument, name, projections) dict abort$/;"	f
s:readable_params	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_params(...) dict abort$/;"	f
s:readable_preview_urls	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_preview_urls(lnum) dict abort$/;"	f
s:readable_projected	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_projected(key, ...) dict abort$/;"	f
s:readable_projected_with_raw	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_projected_with_raw(key, ...) dict abort$/;"	f
s:readable_prototype	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:readable_prototype = {}$/;"	v
s:readable_related	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_related(...) dict abort$/;"	f
s:readable_relative	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_relative() dict abort$/;"	f
s:readable_resolve_layout	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_resolve_layout(name, ...) dict abort$/;"	f
s:readable_resolve_view	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_resolve_view(name, ...) dict abort$/;"	f
s:readable_runner_command	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_runner_command(bang, count, arg) dict abort$/;"	f
s:readable_spec	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_spec() dict abort$/;"	f
s:readable_test_file	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_test_file() dict abort$/;"	f
s:readable_test_file_candidates	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_test_file_candidates() dict abort$/;"	f
s:readable_type_name	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readable_type_name(...) dict abort$/;"	f
s:readfile	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:readfile(path,...)$/;"	f
s:red	vim/colors/gruvbox.vim	/^  let s:red    = s:gb.bright_red$/;"	v
s:red	vim/colors/gruvbox.vim	/^  let s:red    = s:gb.faded_red$/;"	v
s:red	vim/colors/gruvbox.vim	/^  let s:red[1]    = 9$/;"	v
s:red	vim/colors/neodark.vim	/^  let s:red[0]        = '#d75f87'$/;"	v
s:red	vim/colors/neodark.vim	/^  let s:red[1]        = 1$/;"	v
s:red	vim/colors/neodark.vim	/^let s:red        = ['#DC657D', 168]$/;"	v
s:red	vim/colors/twilight.vim	/^let s:red = '#d08356'$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:red = [ '#800000', 1 ]$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:red = [ '#f92672' , 161 ]$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:red = '#df0000'$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:red = '#df0000'$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:red = '#c82829'$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:red = '#cc6666'$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:red = '#ff9da4'$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:red = '#d54e53'$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:red = '#f2777a'$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:red = [ '#ff6b68', 204 ]$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:red = [ '#cf6a4c', 167 ]$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:red = [ '#ff0000', 160 ]$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:red = [ '#d68787', 131 ]$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:red = [ '#dc322f', s:cuicolors.red[s:cuiindex] ]$/;"	v
s:red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:red = [ '#e5786d', 203 ]$/;"	v
s:red1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:red1   = '#ec5f67'$/;"	v
s:red1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:red1   = '#f07178'$/;"	v
s:red1	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:red1   = [ '#e06c75', 168 ]$/;"	v
s:red2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:red2   = '#ec5f67'$/;"	v
s:red2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:red2   = '#ff5370'$/;"	v
s:red2	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:red2   = [ '#be5046', 168 ]$/;"	v
s:reduce_line	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:reduce_line(lines)$/;"	f
s:references_map	vim/pack/minpac/start/ale/autoload/ale/references.vim	/^let s:references_map = {}$/;"	v
s:refreshCurrent	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node)$/;"	f
s:refreshRoot	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot()$/;"	f
s:relglob	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:relglob(...)$/;"	f
s:reload_log	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:reload_log() abort$/;"	f
s:remain_jobs	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^let s:remain_jobs = 0$/;"	v
s:removeChild	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:removeChild(tag) dict abort$/;"	f
s:removeTag	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:removeTag(tag) dict abort$/;"	f
s:remove_layout	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:remove_layout(opts)$/;"	f
s:reset	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:reset() abort dict$/;"	f
s:resetomnicomplete	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:resetomnicomplete()$/;"	f
s:restore_errorformat	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:restore_errorformat() abort$/;"	f
s:restore_mapping	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:restore_mapping(mapping)$/;"	f
s:reuseWin	vim/pack/minpac/start/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
s:rgb	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:rgb(r, g, b) abort$/;"	f
s:rquote	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:rquote(str)$/;"	f
s:ruby_cfile	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:ruby_cfile() abort$/;"	f
s:run	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:run(flags)$/;"	f
s:runner_exe	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = gutentags#get_plat_file('update_tags')$/;"	v
s:runtime_globpath	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:runtime_globpath(file) abort$/;"	f
s:runtime_loaded_map	vim/pack/minpac/start/ale/autoload/ale/linter.vim	/^let s:runtime_loaded_map = {}$/;"	v
s:save_cpo	vim/pack/minpac/opt/minpac/autoload/minpac/job.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim/pack/minpac/start/colorizer/plugin/colorizer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim/pack/minpac/start/lightline.vim/autoload/lightline/colortable.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim/pack/minpac/start/lightline.vim/autoload/lightline/tab.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim/pack/minpac/start/lightline.vim/plugin/lightline.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim/pack/minpac/start/vim-matchit/plugin/matchit.vim	/^let s:save_cpo = &cpo$/;"	v
s:saved_fgcontrast	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^let s:saved_fgcontrast = g:colorizer_fgcontrast$/;"	v
s:scanlineforuris	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:scanlineforuris(line) abort$/;"	f
s:schemaEdit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:schemaEdit(cmd,...)$/;"	f
s:schemaList	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:schemaList(A,L,P) abort$/;"	f
s:script_path	vim/pack/minpac/start/ale/autoload/ale/gradle.vim	/^let s:script_path = fnamemodify(resolve(expand('<sfile>:p')), ':h')$/;"	v
s:search_history_sink	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:search_history_sink(lines)$/;"	f
s:selectiveexpand	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:selectiveexpand(pat,good,default,...)$/;"	f
s:sep	vim/pack/minpac/start/ale/autoload/ale/c.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:sep	vim/pack/minpac/start/ale/autoload/ale/handlers/eslint.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:sep	vim/pack/minpac/start/ale/autoload/ale/python.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:setFolded	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:setFolded(folded) abort dict$/;"	f
s:set_path_options	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:set_path_options() abort$/;"	f
s:set_prompt_op	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:set_prompt_op(op) abort$/;"	f
s:setup_keymaps	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^function! s:setup_keymaps() abort$/;"	f
s:setup_options	vim/pack/minpac/start/tagbar/plugin/tagbar.vim	/^function! s:setup_options() abort$/;"	f
s:setup_paste	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:setup_paste() abort$/;"	f
s:shellesc	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:shellesc(arg) abort$/;"	f
s:shellesc_cmd	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:shelljoin	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:shelljoin(val) abort$/;"	f
s:shellslash	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:shellslash(path) abort$/;"	f
s:short_help	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:short_help      = 1$/;"	v
s:shortpath	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:shortpath()$/;"	f
s:shortpath	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:shortpath()$/;"	f
s:should_complete_map	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:should_complete_map = {$/;"	v
s:should_lint_file_for_buffer	vim/pack/minpac/start/ale/autoload/ale.vim	/^let s:should_lint_file_for_buffer = {}$/;"	v
s:showMenu	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node)$/;"	f
s:sid	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:sid = s:sub(maparg("<SID>xx"),'xx$','')$/;"	v
s:side	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:side(flags) abort$/;"	f
s:side_buffer_settings	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:side_buffer_settings() abort$/;"	f
s:side_context_scroll_into_viewport	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:side_context_scroll_into_viewport() abort$/;"	f
s:side_create_window	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:side_create_window(flags) abort$/;"	f
s:sign_column	vim/colors/gruvbox.vim	/^    let s:sign_column = get(s:gb, g:gruvbox_sign_column)$/;"	v
s:sign_column	vim/colors/gruvbox.vim	/^  let s:sign_column = s:number_column$/;"	v
s:sign_column	vim/colors/gruvbox.vim	/^let s:sign_column = s:bg1$/;"	v
s:skipped	vim/pack/minpac/opt/minpac/test/runtest.vim	/^let s:skipped = []$/;"	v
s:slash	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^let s:slash   = exists('+shellslash') && !&shellslash ? '\\' : '\/'$/;"	v
s:slash	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:slash(str) abort$/;"	f
s:solarized_termcolors	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:solarized_termcolors = get(g:, 'solarized_termcolors', 256)$/;"	v
s:sortTags	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:sortTags(compare_typeinfo) abort dict$/;"	f
s:sort_buffers	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:sort_buffers(...)$/;"	f
s:sorted_items	vim/pack/minpac/start/ale/autoload/ale/pattern_options.vim	/^let s:sorted_items = []$/;"	v
s:specEdit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:specEdit(cmd,...) abort$/;"	f
s:specList	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:specList(A,L,P)$/;"	f
s:split	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:split(dict)$/;"	f
s:split	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:split(arg, ...)$/;"	f
s:split_one	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:split_one(string) abort$/;"	f
s:splittable	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:splittable(dict)$/;"	f
s:sql_define	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:sql_define = substitute($/;"	v
s:srcdir	vim/pack/minpac/opt/minpac/test/runtest.vim	/^let s:srcdir = expand('%:p:h:h')$/;"	v
s:start	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:start(flags) abort$/;"	f
s:start_job	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! s:start_job(cmds, name, seq) abort$/;"	f
s:startswith	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:startswith(str, prefix) abort$/;"	f
s:startswith	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:startswith(string,prefix)$/;"	f
s:status	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:status = '#c6c6c6'$/;"	v
s:status	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:status = s:aqua$/;"	v
s:statusbump	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:statusbump() abort$/;"	f
s:statusline_active_bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_active_bg = '#5f8787'$/;"	v
s:statusline_active_bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_active_bg = s:navy$/;"	v
s:statusline_active_fg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_active_fg = '#1c1c1c'$/;"	v
s:statusline_active_fg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_active_fg = s:window$/;"	v
s:statusline_in_use	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:statusline_in_use = 0$/;"	v
s:statusline_inactive_bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_inactive_bg = '#444444'$/;"	v
s:statusline_inactive_bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_inactive_bg = '#dadada'$/;"	v
s:statusline_inactive_fg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_inactive_fg = '#c6c6c6'$/;"	v
s:statusline_inactive_fg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_inactive_fg = s:foreground$/;"	v
s:store_errorformat	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:store_errorformat(flags) abort$/;"	f
s:str	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:str(longsig, full) abort dict$/;"	f
s:strfmt	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:strfmt() abort dict$/;"	f
s:strfmt	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:strfmt() abort dict$/;"	f
s:string_decode	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:string_decode(str) abort$/;"	f
s:string_encode	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:string_encode(str) abort$/;"	f
s:strip	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:strip(str)$/;"	f
s:stylesheetEdit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:stylesheetEdit(cmd,...) abort$/;"	f
s:stylesheetList	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:stylesheetList(A, L, P) abort$/;"	f
s:sub	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
s:sub	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:sub(str, pat, repl) abort$/;"	f
s:sub	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
s:subseparator	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! s:subseparator(components, subseparator, expanded) abort$/;"	f
s:subseparator	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:subseparator(...)$/;"	f
s:suffixes	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:suffixes(type) abort$/;"	f
s:suite	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^let s:suite = themis#suite('concatenate')$/;"	v
s:suite	vim/pack/minpac/start/lightline.vim/test/error.vim	/^let s:suite = themis#suite('error')$/;"	v
s:suite	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^let s:suite = themis#suite('expand')$/;"	v
s:suite	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^let s:suite = themis#suite('highlight')$/;"	v
s:suite	vim/pack/minpac/start/lightline.vim/test/link.vim	/^let s:suite = themis#suite('link')$/;"	v
s:suite	vim/pack/minpac/start/lightline.vim/test/mode.vim	/^let s:suite = themis#suite('mode')$/;"	v
s:suite	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^let s:suite = themis#suite('onetab')$/;"	v
s:suite	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^let s:suite = themis#suite('subseparator')$/;"	v
s:suite	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^let s:suite = themis#suite('tabline')$/;"	v
s:suite	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^let s:suite = themis#suite('tabs')$/;"	v
s:suite	vim/pack/minpac/start/lightline.vim/test/toggle.vim	/^let s:suite = themis#suite('toggle')$/;"	v
s:suite	vim/pack/minpac/start/lightline.vim/test/uniq.vim	/^let s:suite = themis#suite('uniq')$/;"	v
s:suite.active_inactive	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^function! s:suite.active_inactive()$/;"	f
s:suite.before_each	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	vim/pack/minpac/start/lightline.vim/test/link.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	vim/pack/minpac/start/lightline.vim/test/toggle.vim	/^function! s:suite.before_each()$/;"	f
s:suite.component_raw	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.component_raw()$/;"	f
s:suite.component_type	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^function! s:suite.component_type()$/;"	f
s:suite.component_type	vim/pack/minpac/start/lightline.vim/test/link.vim	/^function! s:suite.component_type()$/;"	f
s:suite.custom	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom()$/;"	f
s:suite.custom_error	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_error()$/;"	f
s:suite.custom_left_nil	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_left_nil()$/;"	f
s:suite.custom_mixed	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_mixed()$/;"	f
s:suite.custom_mixed_2	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_mixed_2()$/;"	f
s:suite.custom_number	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_number()$/;"	f
s:suite.custom_one	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_one()$/;"	f
s:suite.custom_right_nil	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_right_nil()$/;"	f
s:suite.custom_string	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_string()$/;"	f
s:suite.custom_two	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_two()$/;"	f
s:suite.custom_type	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type()$/;"	f
s:suite.custom_type_error	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_error()$/;"	f
s:suite.custom_type_flatten	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_flatten()$/;"	f
s:suite.custom_type_left_nil	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_left_nil()$/;"	f
s:suite.custom_type_mixed	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_mixed()$/;"	f
s:suite.custom_type_mixed_2	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_mixed_2()$/;"	f
s:suite.custom_type_notfound	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_notfound()$/;"	f
s:suite.custom_type_number	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_number()$/;"	f
s:suite.custom_type_one	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_one()$/;"	f
s:suite.custom_type_right_nil	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_right_nil()$/;"	f
s:suite.custom_type_string	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_string()$/;"	f
s:suite.custom_type_two	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_two()$/;"	f
s:suite.custom_type_void_string	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string()$/;"	f
s:suite.custom_type_void_string_array	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array()$/;"	f
s:suite.custom_type_void_string_array_2	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_2()$/;"	f
s:suite.custom_type_void_string_array_3	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_3()$/;"	f
s:suite.custom_type_void_string_array_4	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_4()$/;"	f
s:suite.custom_void_string	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string()$/;"	f
s:suite.custom_void_string_array	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array()$/;"	f
s:suite.custom_void_string_array_2	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_2()$/;"	f
s:suite.custom_void_string_array_3	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_3()$/;"	f
s:suite.custom_void_string_array_4	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_4()$/;"	f
s:suite.default	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.default()$/;"	f
s:suite.default	vim/pack/minpac/start/lightline.vim/test/toggle.vim	/^function! s:suite.default()$/;"	f
s:suite.dictionary_function	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.dictionary_function()$/;"	f
s:suite.disable_enable	vim/pack/minpac/start/lightline.vim/test/toggle.vim	/^function! s:suite.disable_enable()$/;"	f
s:suite.disabled	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^function! s:suite.disabled()$/;"	f
s:suite.duplicated_both_nil	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil()$/;"	f
s:suite.duplicated_both_nil_left_most	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil_left_most()$/;"	f
s:suite.duplicated_both_nil_right_most	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil_right_most()$/;"	f
s:suite.duplicated_left_nil	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_left_nil()$/;"	f
s:suite.duplicated_right_nil	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_right_nil()$/;"	f
s:suite.duplicated_type_both_nil	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil()$/;"	f
s:suite.duplicated_type_both_nil_left_most	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil_left_most()$/;"	f
s:suite.duplicated_type_both_nil_right_most	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil_right_most()$/;"	f
s:suite.duplicated_type_left_nil	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_left_nil()$/;"	f
s:suite.duplicated_type_right_nil	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_right_nil()$/;"	f
s:suite.enabled	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^function! s:suite.enabled()$/;"	f
s:suite.error	vim/pack/minpac/start/lightline.vim/test/error.vim	/^function! s:suite.error()$/;"	f
s:suite.expand	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.expand()$/;"	f
s:suite.filename	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^function! s:suite.filename()$/;"	f
s:suite.filename_modified	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^function! s:suite.filename_modified()$/;"	f
s:suite.flatten	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.flatten()$/;"	f
s:suite.highlight	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^function! s:suite.highlight()$/;"	f
s:suite.insert	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^function! s:suite.insert()$/;"	f
s:suite.insert	vim/pack/minpac/start/lightline.vim/test/link.vim	/^function! s:suite.insert()$/;"	f
s:suite.keep_original	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.keep_original()$/;"	f
s:suite.left_right	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^function! s:suite.left_right()$/;"	f
s:suite.left_right	vim/pack/minpac/start/lightline.vim/test/link.vim	/^function! s:suite.left_right()$/;"	f
s:suite.link	vim/pack/minpac/start/lightline.vim/test/link.vim	/^function! s:suite.link()$/;"	f
s:suite.many1	vim/pack/minpac/start/lightline.vim/test/uniq.vim	/^function! s:suite.many1()$/;"	f
s:suite.many2	vim/pack/minpac/start/lightline.vim/test/uniq.vim	/^function! s:suite.many2()$/;"	f
s:suite.many3	vim/pack/minpac/start/lightline.vim/test/uniq.vim	/^function! s:suite.many3()$/;"	f
s:suite.mode	vim/pack/minpac/start/lightline.vim/test/mode.vim	/^function! s:suite.mode()$/;"	f
s:suite.mode_map	vim/pack/minpac/start/lightline.vim/test/mode.vim	/^function! s:suite.mode_map()$/;"	f
s:suite.modified	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^function! s:suite.modified()$/;"	f
s:suite.multiple	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.multiple()$/;"	f
s:suite.multiple_type	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.multiple_type()$/;"	f
s:suite.nil	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.nil()$/;"	f
s:suite.nil	vim/pack/minpac/start/lightline.vim/test/uniq.vim	/^function! s:suite.nil()$/;"	f
s:suite.no_components	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^function! s:suite.no_components()$/;"	f
s:suite.notfound	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.notfound()$/;"	f
s:suite.one	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.one()$/;"	f
s:suite.one	vim/pack/minpac/start/lightline.vim/test/uniq.vim	/^function! s:suite.one()$/;"	f
s:suite.one_empty	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.one_empty()$/;"	f
s:suite.onetab	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^function! s:suite.onetab()$/;"	f
s:suite.raw_type	vim/pack/minpac/start/lightline.vim/test/expand.vim	/^function! s:suite.raw_type()$/;"	f
s:suite.replace	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^function! s:suite.replace()$/;"	f
s:suite.replace	vim/pack/minpac/start/lightline.vim/test/link.vim	/^function! s:suite.replace()$/;"	f
s:suite.subseparator	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^function! s:suite.subseparator()$/;"	f
s:suite.subseparator	vim/pack/minpac/start/lightline.vim/test/link.vim	/^function! s:suite.subseparator()$/;"	f
s:suite.subseparator_component	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component()$/;"	f
s:suite.subseparator_component_expand	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand()$/;"	f
s:suite.subseparator_component_expand_1	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_1()$/;"	f
s:suite.subseparator_component_expand_2	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_2()$/;"	f
s:suite.subseparator_component_expand_3	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_3()$/;"	f
s:suite.subseparator_component_function	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function()$/;"	f
s:suite.subseparator_component_function_1	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_1()$/;"	f
s:suite.subseparator_component_function_2	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_2()$/;"	f
s:suite.subseparator_component_function_3	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_3()$/;"	f
s:suite.subseparator_component_function_4	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_4()$/;"	f
s:suite.subseparator_component_function_5	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_5()$/;"	f
s:suite.subseparator_component_function_6	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_6()$/;"	f
s:suite.subseparator_component_function_7	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_7()$/;"	f
s:suite.subseparator_component_function_visible_condition_1	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_1()$/;"	f
s:suite.subseparator_component_function_visible_condition_2	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_2()$/;"	f
s:suite.subseparator_component_function_visible_condition_3	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_3()$/;"	f
s:suite.subseparator_component_function_visible_condition_4	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_4()$/;"	f
s:suite.subseparator_component_function_visible_condition_5	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_5()$/;"	f
s:suite.subseparator_component_function_visible_condition_6	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_6()$/;"	f
s:suite.subseparator_component_function_visible_condition_7	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_7()$/;"	f
s:suite.subseparator_component_not_found	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found()$/;"	f
s:suite.subseparator_component_not_found_1	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found_1()$/;"	f
s:suite.subseparator_component_not_found_2	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found_2()$/;"	f
s:suite.subseparator_component_visible_condition_1	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_1()$/;"	f
s:suite.subseparator_component_visible_condition_2	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_2()$/;"	f
s:suite.subseparator_component_visible_condition_3	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_3()$/;"	f
s:suite.subseparator_component_visible_condition_4	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_4()$/;"	f
s:suite.subseparator_component_visible_condition_5	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_5()$/;"	f
s:suite.subseparator_component_visible_condition_6	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_6()$/;"	f
s:suite.subseparator_component_visible_condition_7	vim/pack/minpac/start/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_7()$/;"	f
s:suite.tab_component	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component()$/;"	f
s:suite.tab_component_empty_left	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_empty_left()$/;"	f
s:suite.tab_component_empty_middle	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_empty_middle()$/;"	f
s:suite.tab_component_function	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_function()$/;"	f
s:suite.tabclose	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^function! s:suite.tabclose()$/;"	f
s:suite.tabclose_last	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^function! s:suite.tabclose_last()$/;"	f
s:suite.tabline	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^function! s:suite.tabline()$/;"	f
s:suite.tabnew	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^function! s:suite.tabnew()$/;"	f
s:suite.tabnew	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^function! s:suite.tabnew()$/;"	f
s:suite.tabnew	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew()$/;"	f
s:suite.tabnew_20	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20()$/;"	f
s:suite.tabnew_20_tabfirst	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabfirst()$/;"	f
s:suite.tabnew_20_tabfirst_tabnext	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabfirst_tabnext()$/;"	f
s:suite.tabnew_20_tabnext_10	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabnext_10()$/;"	f
s:suite.tabnew_20_tabprevious	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabprevious()$/;"	f
s:suite.tabnew_20_tabprevious_tabprevious	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabprevious_tabprevious()$/;"	f
s:suite.tabnew_first	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^function! s:suite.tabnew_first()$/;"	f
s:suite.tabnew_tabfirst	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabfirst()$/;"	f
s:suite.tabnew_tabnew	vim/pack/minpac/start/lightline.vim/test/onetab.vim	/^function! s:suite.tabnew_tabnew()$/;"	f
s:suite.tabnew_tabnew	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew()$/;"	f
s:suite.tabnew_tabnew_tabfirst	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew_tabfirst()$/;"	f
s:suite.tabnew_tabnew_tabprevious	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew_tabprevious()$/;"	f
s:suite.tabnext	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^function! s:suite.tabnext()$/;"	f
s:suite.tabonly	vim/pack/minpac/start/lightline.vim/test/tabline.vim	/^function! s:suite.tabonly()$/;"	f
s:suite.tabs	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^function! s:suite.tabs()$/;"	f
s:suite.three	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.three()$/;"	f
s:suite.three	vim/pack/minpac/start/lightline.vim/test/uniq.vim	/^function! s:suite.three()$/;"	f
s:suite.three_duplicated	vim/pack/minpac/start/lightline.vim/test/uniq.vim	/^function! s:suite.three_duplicated()$/;"	f
s:suite.three_empty_all	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_all()$/;"	f
s:suite.three_empty_left	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left()$/;"	f
s:suite.three_empty_left_middle	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left_middle()$/;"	f
s:suite.three_empty_left_right	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left_right()$/;"	f
s:suite.three_empty_middle	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_middle()$/;"	f
s:suite.three_empty_middle_right	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_middle_right()$/;"	f
s:suite.three_empty_right	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_right()$/;"	f
s:suite.toggle	vim/pack/minpac/start/lightline.vim/test/toggle.vim	/^function! s:suite.toggle()$/;"	f
s:suite.two	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.two()$/;"	f
s:suite.two	vim/pack/minpac/start/lightline.vim/test/uniq.vim	/^function! s:suite.two()$/;"	f
s:suite.two_duplicated	vim/pack/minpac/start/lightline.vim/test/uniq.vim	/^function! s:suite.two_duplicated()$/;"	f
s:suite.two_empty_both	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_both()$/;"	f
s:suite.two_empty_left	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_left()$/;"	f
s:suite.two_empty_right	vim/pack/minpac/start/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_right()$/;"	f
s:suite.visual	vim/pack/minpac/start/lightline.vim/test/highlight.vim	/^function! s:suite.visual()$/;"	f
s:suite.visual	vim/pack/minpac/start/lightline.vim/test/link.vim	/^function! s:suite.visual()$/;"	f
s:system	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! s:system(cmds) abort$/;"	f
s:system_out_cb	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! s:system_out_cb(id, message, event) dict abort$/;"	f
s:tab	vim/pack/minpac/start/lightline.vim/test/tabs.vim	/^function! s:tab(number, ...) abort$/;"	f
s:tabcnt	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^let s:tabcnt = -1$/;"	v
s:table	vim/pack/minpac/start/lightline.vim/autoload/lightline/colortable.vim	/^let s:table = s:load()$/;"	v
s:tabline	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^let s:tabline = ''$/;"	v
s:tabline_active_bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_active_bg = '#00afaf'$/;"	v
s:tabline_active_bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_active_bg = s:window$/;"	v
s:tabline_active_fg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_active_fg = '#1c1c1c'$/;"	v
s:tabline_active_fg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_active_fg = s:foreground$/;"	v
s:tabline_bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_bg = '#3a3a3a'$/;"	v
s:tabline_bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_bg = s:navy$/;"	v
s:tabline_inactive_bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_inactive_bg = '#585858'$/;"	v
s:tabline_inactive_bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_inactive_bg = s:aqua$/;"	v
s:tabline_inactive_fg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_inactive_fg = '#c6c6c6'$/;"	v
s:tabline_inactive_fg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_inactive_fg = s:background$/;"	v
s:tabnr	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^let s:tabnr = -1$/;"	v
s:tags_sink	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:tags_sink(lines)$/;"	f
s:teal	vim/colors/neodark.vim	/^  let s:teal[0]       = '#5fafaf'$/;"	v
s:teal	vim/colors/neodark.vim	/^  let s:teal[1]       = 10$/;"	v
s:teal	vim/colors/neodark.vim	/^let s:teal       = ['#4BB1A7', 73]$/;"	v
s:temp_dir	vim/pack/minpac/start/ale/autoload/ale/handlers/haskell.vim	/^let s:temp_dir = fnamemodify(tempname(), ':h')$/;"	v
s:temp_dir	vim/pack/minpac/start/ale/autoload/ale/path.vim	/^let s:temp_dir = ale#path#Simplify(fnamemodify(tempname(), ':h'))$/;"	v
s:temp_regex_prefix	vim/pack/minpac/start/ale/autoload/ale/handlers/haskell.vim	/^let s:temp_regex_prefix =$/;"	v
s:term	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^function! s:term(p) abort$/;"	f
s:term_black	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_black = 235$/;"	v
s:term_blue	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_blue = 39$/;"	v
s:term_green	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_green = 114$/;"	v
s:term_grey	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_grey = 236$/;"	v
s:term_marker	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^  let s:term_marker = ";#FZF"$/;"	v
s:term_marker	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^  let s:term_marker = '&::FZF'$/;"	v
s:term_purple	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_purple = 170$/;"	v
s:term_red	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_red = 204$/;"	v
s:term_white	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_white = 145$/;"	v
s:term_yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_yellow = 180$/;"	v
s:tests	vim/pack/minpac/opt/minpac/test/runtest.vim	/^  let s:tests = filter(s:tests, 'v:val =~ argv(1)')$/;"	v
s:tests	vim/pack/minpac/opt/minpac/test/runtest.vim	/^let s:tests = split(substitute(@q, 'function \\(\\k*()\\)', '\\1', 'g'))$/;"	v
s:tests	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^  let s:tests = filter(s:tests, 'v:val =~ argv(1)')$/;"	v
s:tests	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^let s:tests = split(substitute(@q, 'function \\(\\k*()\\)', '\\1', 'g'))$/;"	v
s:timer_args	vim/pack/minpac/start/ale/autoload/ale/list.vim	/^    let s:timer_args = {}$/;"	v
s:timer_id	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:timer_id = -1$/;"	v
s:timestamp_map	vim/pack/minpac/start/ale/autoload/ale.vim	/^let s:timestamp_map = {}$/;"	v
s:tmux_enabled	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:tmux_enabled()$/;"	f
s:toggle	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:toggle(op) abort$/;"	f
s:toggleFold	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:toggleFold(fileinfo) abort dict$/;"	f
s:toggleIgnoreFilter	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter()$/;"	f
s:toggleShowBookmarks	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks()$/;"	f
s:toggleShowFiles	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles()$/;"	f
s:toggleShowHidden	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden()$/;"	f
s:toggleZoom	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom()$/;"	f
s:transformations	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:transformations = {}$/;"	v
s:transformations.basename	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:transformations.basename(input, o) abort$/;"	f
s:transformations.blank	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:transformations.blank(input, o) abort$/;"	f
s:transformations.camelcase	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:transformations.camelcase(input, o) abort$/;"	f
s:transformations.capitalize	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:transformations.capitalize(input, o) abort$/;"	f
s:transformations.close	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:transformations.close(input, o) abort$/;"	f
s:transformations.colons	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:transformations.colons(input, o) abort$/;"	f
s:transformations.dirname	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:transformations.dirname(input, o) abort$/;"	f
s:transformations.dot	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:transformations.dot(input, o) abort$/;"	f
s:transformations.hyphenate	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:transformations.hyphenate(input, o) abort$/;"	f
s:transformations.open	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:transformations.open(input, o) abort$/;"	f
s:transformations.plural	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:transformations.plural(input, o) abort$/;"	f
s:transformations.singular	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:transformations.singular(input, o) abort$/;"	f
s:transformations.underscore	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:transformations.underscore(input, o) abort$/;"	f
s:transformations.uppercase	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:transformations.uppercase(input, o) abort$/;"	f
s:tree_up_dir_line	vim/pack/minpac/start/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:trigger_character_map	vim/pack/minpac/start/ale/autoload/ale/completion.vim	/^let s:trigger_character_map = {$/;"	v
s:type_init_done	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:type_init_done    = 0$/;"	v
s:undercurl	vim/colors/gruvbox.vim	/^  let s:undercurl = ''$/;"	v
s:undercurl	vim/colors/gruvbox.vim	/^let s:undercurl = 'undercurl,'$/;"	v
s:underline	vim/colors/gruvbox.vim	/^  let s:underline = ''$/;"	v
s:underline	vim/colors/gruvbox.vim	/^let s:underline = 'underline,'$/;"	v
s:unescape_query	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^function! s:unescape_query(flags, query)$/;"	f
s:uniq	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^  function! s:uniq(xs) abort$/;"	f
s:uniq	vim/pack/minpac/start/lightline.vim/autoload/lightline.vim	/^  let s:uniq = function('uniq')$/;"	v
s:uniq	vim/pack/minpac/start/lightline.vim/test/uniq.vim	/^function! s:uniq(...)$/;"	f
s:uniq	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^function! s:uniq(list) abort$/;"	f
s:uniq	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:uniq(list) abort$/;"	f
s:unix_redir	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	vim/pack/minpac/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unlet_for	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! s:unlet_for(files) abort$/;"	f
s:upDirCurrentRootClosed	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed()$/;"	f
s:upDirCurrentRootOpen	vim/pack/minpac/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen()$/;"	f
s:upconvert	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:upconvert(nr) abort$/;"	f
s:update_in_progress	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_queue	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:update_single_plugin	vim/pack/minpac/opt/minpac/autoload/minpac/impl.vim	/^function! s:update_single_plugin(name, force) abort$/;"	f
s:update_tags	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
s:upgrade	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:upgrade(dict)$/;"	f
s:url_decode	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:url_decode(str) abort$/;"	f
s:url_encode	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:url_encode(str, ...) abort$/;"	f
s:url_encode	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:url_encode(str) abort$/;"	f
s:use_sh	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:use_sh()$/;"	f
s:utool	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^  let s:utool = substitute(toupper(s:tool[0]) . s:tool[1:], '-\\(.\\)',$/;"	v
s:valid_key	vim/pack/minpac/start/vim-projectionist/autoload/projectionist.vim	/^let s:valid_key = '^\\%([^*{}]*\\*\\*[^*{}]\\{2\\}\\)\\=[^*{}]*\\*\\=[^*{}]*$'$/;"	v
s:validate_layout	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:validate_layout(layout)$/;"	f
s:valuerange	vim/pack/minpac/start/colorizer/autoload/colorizer.vim	/^let s:valuerange = [0x00, 0x5F, 0x87, 0xAF, 0xD7, 0xFF]$/;"	v
s:version_cache	vim/pack/minpac/start/ale/autoload/ale/semver.vim	/^let s:version_cache = {}$/;"	v
s:vert_split	vim/colors/gruvbox.vim	/^  let s:vert_split = get(s:gb, g:gruvbox_vert_split)$/;"	v
s:vert_split	vim/colors/gruvbox.vim	/^let s:vert_split = s:bg0$/;"	v
s:veryDarkGray	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:veryDarkGray = [ '#1c1d21' , 234 ]$/;"	v
s:viewEdit	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:viewEdit(cmd, ...) abort$/;"	f
s:viewList	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:viewList(A,L,P)$/;"	f
s:view_types	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^let s:view_types = split('rhtml,erb,rxml,builder,rjs,haml',',')$/;"	v
s:vim_bg	vim/colors/gruvbox.vim	/^let s:vim_bg = ['bg', 'bg']$/;"	v
s:vim_fg	vim/colors/gruvbox.vim	/^let s:vim_fg = ['fg', 'fg']$/;"	v
s:vim_quitting	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:vim_quitting = 0$/;"	v
s:violet	vim/colors/twilight.vim	/^let s:violet = '#a999ac'$/;"	v
s:violet	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:violet = [ '#ff00ff', 13 ]$/;"	v
s:violet	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:violet = [ '#6c71c4', s:cuicolors.violet[s:cuiindex] ]$/;"	v
s:visibility_symbols	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^let s:visibility_symbols = {$/;"	v
s:visual_bg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:visual_bg = '#8787af'$/;"	v
s:visual_fg	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:visual_fg = '#000000'$/;"	v
s:warn	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:warn(message)$/;"	f
s:warn	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:warn(msg)$/;"	f
s:warn	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:warn(str) abort$/;"	f
s:warning	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! s:warning(msg) abort$/;"	f
s:warnings	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:warnings = {$/;"	v
s:webcat	vim/pack/minpac/start/vim-rails/autoload/rails.vim	/^function! s:webcat() abort$/;"	f
s:white	vim/colors/twilight.vim	/^let s:white = '#fffedc'$/;"	v
s:white	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:white = [ '#ffffff' , 15 ]$/;"	v
s:white	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:white = [ '#a9b7c6', 250 ]$/;"	v
s:white	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:white = [ '#f8f8f2', 234 ]$/;"	v
s:white	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:white = [ '#d0d0d0', 252 ]$/;"	v
s:wide	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^let s:wide = 120$/;"	v
s:window	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:window = '#efefef'$/;"	v
s:window	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:window = '#efefef'$/;"	v
s:window_expanded	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:window_expanded   = 0$/;"	v
s:window_pos	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:window_pos = {$/;"	v
s:windows_sink	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:windows_sink(line)$/;"	f
s:winrestcmd	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^let s:winrestcmd      = ''$/;"	v
s:word_regex_list	vim/pack/minpac/start/ale/ale_linters/vim/vint.vim	/^let s:word_regex_list = [$/;"	v
s:wrap	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:wrap(name, opts, bang)$/;"	f
s:wrap_cmds	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
s:write_triggered_update_tags	vim/pack/minpac/start/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
s:xml_decode	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:xml_decode(str) abort$/;"	f
s:xml_encode	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:xml_encode(str) abort$/;"	f
s:xml_entity_decode	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^function! s:xml_entity_decode(str) abort$/;"	f
s:xterm_launcher	vim/pack/minpac/start/fzf/plugin/fzf.vim	/^function! s:xterm_launcher()$/;"	f
s:yank_to_register	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:yank_to_register(data)$/;"	f
s:yellow	vim/colors/gruvbox.vim	/^  let s:yellow = s:gb.bright_yellow$/;"	v
s:yellow	vim/colors/gruvbox.vim	/^  let s:yellow = s:gb.faded_yellow$/;"	v
s:yellow	vim/colors/gruvbox.vim	/^  let s:yellow[1] = 11$/;"	v
s:yellow	vim/colors/neodark.vim	/^  let s:yellow[0]     = '#d7af5f'$/;"	v
s:yellow	vim/colors/neodark.vim	/^  let s:yellow[1]     = 3$/;"	v
s:yellow	vim/colors/neodark.vim	/^let s:yellow     = ['#D4B261', 179]$/;"	v
s:yellow	vim/colors/twilight.vim	/^let s:yellow = '#e3d796'$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:yellow = [ '#808000', 3 ]$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:yellow = [ '#e5cd52' , 221 ]$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:yellow = '#eab700'$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:yellow = '#f0c674'$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:yellow = '#ffeead'$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:yellow = '#e7c547'$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:yellow = '#ffcc66'$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:yellow = [ '#ffc66d', 222 ]$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:yellow = [ '#ffb964', 215 ]$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:yellow = '#ffcc00'$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:yellow = '#ffcb6b'$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:yellow = [ '#e6db74', 229 ]$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:yellow = [ '#e5c07b', 180 ]$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:yellow = [ '#d8af5f', 3 ]$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:yellow = [ '#b58900', s:cuicolors.yellow[s:cuiindex] ]$/;"	v
s:yellow	vim/pack/minpac/start/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:yellow = [ '#cae682', 180 ]$/;"	v
scan	vim/pack/minpac/start/fzf/src/matcher.go	/^func (m *Matcher) scan(request MatchRequest) (*Merger, bool) {$/;"	f	unknown:fzf.Matcher
score	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^score = 0$/;"	v
scoreGapExtention	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	scoreGapExtention = -1$/;"	c	package:algo
scoreGapStart	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	scoreGapStart     = -3$/;"	c	package:algo
scoreMatch	vim/pack/minpac/start/fzf/src/algo/algo.go	/^	scoreMatch        = 16$/;"	c	package:algo
scriptease	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^augroup scriptease$/;"	a
scriptease#capture	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#capture(excmd) abort$/;"	f
scriptease#cfile	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#cfile() abort$/;"	f
scriptease#complete	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#complete(A,L,P) abort$/;"	f
scriptease#disarm	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#disarm(file) abort$/;"	f
scriptease#disarm_command	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#disarm_command(bang, ...) abort$/;"	f
scriptease#dump	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#dump(object, ...) abort$/;"	f
scriptease#filterop	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#filterop(...) abort$/;"	f
scriptease#helptopic	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#helptopic() abort$/;"	f
scriptease#includeexpr	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#includeexpr(file) abort$/;"	f
scriptease#locate	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#locate(path) abort$/;"	f
scriptease#messages_command	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#messages_command(bang) abort$/;"	f
scriptease#open_command	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#open_command(count,cmd,file,lcd) abort$/;"	f
scriptease#pp_command	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#pp_command(bang, lnum, value) abort$/;"	f
scriptease#ppmsg_command	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#ppmsg_command(bang, count, value) abort$/;"	f
scriptease#runtime_command	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#runtime_command(bang, ...) abort$/;"	f
scriptease#scriptid	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#scriptid(filename) abort$/;"	f
scriptease#scriptname	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#scriptname(file) abort$/;"	f
scriptease#scriptnames_qflist	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#scriptnames_qflist() abort$/;"	f
scriptease#setup_help	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#setup_help() abort$/;"	f
scriptease#setup_vim	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#setup_vim() abort$/;"	f
scriptease#synnames	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#synnames(...) abort$/;"	f
scriptease#synnames_map	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#synnames_map(count) abort$/;"	f
scriptease#time_command	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#time_command(cmd, count) abort$/;"	f
scriptease#verbose_command	vim/pack/minpac/opt/vim-scriptease/autoload/scriptease.vim	/^function! scriptease#verbose_command(level, excmd) abort$/;"	f
scriptease.vim	vim/pack/minpac/opt/vim-scriptease/README.markdown	/^# scriptease.vim$/;"	c
scriptease_projectionist	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^augroup scriptease_projectionist$/;"	a
second_run	vim/pack/minpac/opt/minpac/test/runtest.vim	/^      let second_run = v:errors$/;"	v
select git branches in horizontal split below (15 lines)	vim/pack/minpac/start/fzf/README.md	/^# select git branches in horizontal split below (15 lines)$/;"	c
select multiple words in vertical split on the left (20% of screen width)	vim/pack/minpac/start/fzf/README.md	/^# select multiple words in vertical split on the left (20% of screen width)$/;"	c
selectItem	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) selectItem(item *Item) {$/;"	f	unknown:fzf.Terminal
select_count	vim/pack/minpac/start/fzf/test/test_go.rb	/^          def select_count$/;"	f	method:until
selected	vim/pack/minpac/start/fzf/src/terminal.go	/^	selected   map[int32]selectedItem$/;"	m	struct:fzf.Terminal
selected	vim/pack/minpac/start/fzf/src/terminal.go	/^	selected bool$/;"	m	struct:fzf.itemLine
selectedItem	vim/pack/minpac/start/fzf/src/terminal.go	/^type selectedItem struct {$/;"	s	package:fzf
semi	eslintrc.json	/^    "semi": 0,$/;"	n	object:rules
semi-spacing	eslintrc.json	/^    "semi-spacing": ["error", { "before": false, "after": true }],$/;"	a	object:rules
send_keys	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def send_keys(*args)$/;"	f
seoul256	vim/pack/minpac/start/lightline.vim/README.md	/^### seoul256$/;"	S
set	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def set(self, x, y):$/;"	m	class:Canvas
setBg	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) setBg() {$/;"	f	unknown:tui.LightWindow
set_text	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def set_text(self, x, y, text):$/;"	m	class:Canvas
set_var	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f
set_var	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	module:TestShell
setmmautocmd	vim/pack/minpac/start/vim-minimap/autoload/minimap.py	/^def setmmautocmd(clear = False):$/;"	f
setup	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def setup$/;"	f
setup	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestBash
setup	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestGoFZF
setup	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestZsh
setup	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def setup$/;"	f	module:TestShell
shelljs	eslintrc.json	/^    "shelljs": false$/;"	b	object:env
showmarks_include	vimrc	/^let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"$/;"	v
showminimap	vim/pack/minpac/start/vim-minimap/autoload/minimap.py	/^def showminimap():$/;"	f
size	vim/pack/minpac/start/fzf/src/options.go	/^	size     sizeSpec$/;"	m	struct:fzf.previewOpts
size	vim/pack/minpac/start/fzf/src/options.go	/^	size    float64$/;"	m	struct:fzf.sizeSpec
sizeSpec	vim/pack/minpac/start/fzf/src/options.go	/^type sizeSpec struct {$/;"	s	package:fzf
sizes	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/speed_test.py	/^sizes = ((0, 0),$/;"	v
slab	vim/pack/minpac/start/fzf/src/matcher.go	/^	slab           []*util.Slab$/;"	m	struct:fzf.Matcher
slab	vim/pack/minpac/start/fzf/src/pattern_test.go	/^var slab *util.Slab$/;"	v	package:fzf
slab	vim/pack/minpac/start/fzf/src/terminal.go	/^	slab       *util.Slab$/;"	m	struct:fzf.Terminal
slab16Size	vim/pack/minpac/start/fzf/src/constants.go	/^	slab16Size int = 100 * 1024 \/\/ 200KB * 32 = 12.8MB$/;"	c	package:fzf
slab32Size	vim/pack/minpac/start/fzf/src/constants.go	/^	slab32Size int = 2048       \/\/ 8KB * 32 = 256KB$/;"	c	package:fzf
slice	vim/pack/minpac/start/fzf/src/util/chars.go	/^	slice           []byte \/\/ or []rune$/;"	m	struct:util.Chars
sliceChunks	vim/pack/minpac/start/fzf/src/matcher.go	/^func (m *Matcher) sliceChunks(chunks []*Chunk) [][]*Chunk {$/;"	f	unknown:fzf.Matcher
smcup	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) smcup() {$/;"	f	unknown:tui.LightRenderer
solarized dark	vim/pack/minpac/start/lightline.vim/README.md	/^### solarized dark$/;"	S
solarized light	vim/pack/minpac/start/lightline.vim/README.md	/^### solarized light$/;"	S
solarized.vim	vim/pack/minpac/start/vim-solarized/README.md	/^# solarized.vim$/;"	c
sort	vim/pack/minpac/start/fzf/src/matcher.go	/^	sort           bool$/;"	m	struct:fzf.Matcher
sort	vim/pack/minpac/start/fzf/src/matcher.go	/^	sort    bool$/;"	m	struct:fzf.MatchRequest
sort	vim/pack/minpac/start/fzf/src/terminal.go	/^	sort       bool$/;"	m	struct:fzf.Terminal
sort-vars	eslintrc.json	/^    "sort-vars": 0,$/;"	n	object:rules
sortCriteria	vim/pack/minpac/start/fzf/src/result.go	/^var sortCriteria []criterion$/;"	v	package:fzf
sortSelected	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) sortSelected() []selectedItem {$/;"	f	unknown:fzf.Terminal
sorted	vim/pack/minpac/start/fzf/src/merger.go	/^	sorted  bool$/;"	m	struct:fzf.Merger
sourceType	eslintrc.json	/^    "sourceType": "module"$/;"	s	object:parserOptions
space-after-function-name	eslintrc.json	/^    "space-after-function-name": 0,$/;"	n	object:rules
space-after-keywords	eslintrc.json	/^    "space-after-keywords": 0,$/;"	n	object:rules
space-before-blocks	eslintrc.json	/^    "space-before-blocks": 0,$/;"	n	object:rules
space-before-function-paren	eslintrc.json	/^    "space-before-function-paren": ["error", "always"],$/;"	a	object:rules
space-in-brackets	eslintrc.json	/^    "space-in-brackets": 0,$/;"	n	object:rules
space-in-parens	eslintrc.json	/^    "space-in-parens": 0,$/;"	n	object:rules
space-infix-ops	eslintrc.json	/^    "space-infix-ops": 0,$/;"	n	object:rules
space-return-throw-case	eslintrc.json	/^    "space-return-throw-case": 0,$/;"	n	object:rules
space-unary-ops	eslintrc.json	/^    "space-unary-ops": ["error", { "words": true, "nonwords": false }],$/;"	a	object:rules
spaced-comment	eslintrc.json	/^    "spaced-comment": ["error", "always", {$/;"	a	object:rules
speed	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^speed = 0.0$/;"	v
spinnerDuration	vim/pack/minpac/start/fzf/src/constants.go	/^	spinnerDuration = 200 * time.Millisecond$/;"	c	package:fzf
splitNth	vim/pack/minpac/start/fzf/src/options.go	/^func splitNth(str string) []Range {$/;"	f	package:fzf
standard/array-bracket-even-spacing	eslintrc.json	/^    "standard\/array-bracket-even-spacing": ["error", "either"],$/;"	a	object:rules
standard/computed-property-even-spacing	eslintrc.json	/^    "standard\/computed-property-even-spacing": ["error", "even"],$/;"	a	object:rules
standard/no-callback-literal	eslintrc.json	/^    "standard\/no-callback-literal": "error",$/;"	s	object:rules
standard/object-curly-even-spacing	eslintrc.json	/^    "standard\/object-curly-even-spacing": ["error", "either"]$/;"	a	object:rules
startChan	vim/pack/minpac/start/fzf/src/terminal.go	/^	startChan  chan bool$/;"	m	struct:fzf.Terminal
startEventPoller	vim/pack/minpac/start/fzf/src/reader.go	/^func (r *Reader) startEventPoller() {$/;"	f	unknown:fzf.Reader
start_with?	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def start_with?(_str)$/;"	f	class:NilClass
state	vim/pack/minpac/start/fzf/src/util/atomicbool.go	/^	state bool$/;"	m	struct:util.AtomicBool
stderr	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) stderr(str string) {$/;"	f	unknown:tui.LightRenderer
stderr	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) stderr(str string) {$/;"	f	unknown:tui.LightWindow
stderrInternal	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) stderrInternal(str string, allowNLCR bool) {$/;"	f	unknown:tui.LightRenderer
stderrInternal	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (w *LightWindow) stderrInternal(str string, allowNLCR bool) {$/;"	f	unknown:tui.LightWindow
stdscr	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^stdscr = curses.initscr()$/;"	v
stdscr	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^stdscr = curses.initscr()$/;"	v
str	vim/pack/minpac/start/fzf/src/tokenizer.go	/^	str   *string$/;"	m	struct:fzf.Delimiter
strLines	vim/pack/minpac/start/fzf/src/options.go	/^func strLines(str string) []string {$/;"	f	package:fzf
strict	eslintrc.json	/^    "strict": 0,$/;"	n	object:rules
strong	vim/pack/minpac/start/fzf/src/terminal.go	/^	strong     tui.Attr$/;"	m	struct:fzf.Terminal
style	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^func (p ColorPair) style() tcell.Style {$/;"	f	unknown:tui.ColorPair
success	vim/pack/minpac/start/fzf/src/terminal.go	/^	success    bool$/;"	m	struct:fzf.Terminal
summary	vim/pack/minpac/start/vim-rooter/test/runner.vim	/^let summary = [$/;"	v
suppress	vim/pack/minpac/start/fzf/src/terminal.go	/^	suppress   bool$/;"	m	struct:fzf.Terminal
switches	eslintrc.json	/^    "padded-blocks": ["error", { "blocks": "never", "switches": "never", "classes": "never" }],$/;"	s	object:rules.padded-blocks.1
symbol-description	eslintrc.json	/^    "symbol-description": "error",$/;"	s	object:rules
t	vim/pack/minpac/start/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> t :call ale#preview#OpenSelectionInTab()<CR>$/;"	m
t	vim/pack/minpac/start/fzf/src/terminal.go	/^	t actionType$/;"	m	struct:fzf.action
t	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/turtle.py	/^t = Turtle()$/;"	v
tabstop	vim/pack/minpac/start/fzf/src/terminal.go	/^	tabstop    int$/;"	m	struct:fzf.Terminal
tabstop	vim/pack/minpac/start/fzf/src/tui/light.go	/^	tabstop       int$/;"	m	struct:tui.LightRenderer
tabstop	vim/pack/minpac/start/fzf/src/tui/light.go	/^	tabstop  int$/;"	m	struct:tui.LightWindow
tac	vim/pack/minpac/start/fzf/src/matcher.go	/^	tac            bool$/;"	m	struct:fzf.Matcher
tac	vim/pack/minpac/start/fzf/src/merger.go	/^	tac     bool$/;"	m	struct:fzf.Merger
tagbar#CloseWindow	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! tagbar#CloseWindow() abort$/;"	f
tagbar#OpenWindow	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! tagbar#OpenWindow(...) abort$/;"	f
tagbar#RestoreSession	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! tagbar#RestoreSession() abort$/;"	f
tagbar#SetFoldLevel	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! tagbar#SetFoldLevel(level, force) abort$/;"	f
tagbar#ToggleWindow	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! tagbar#ToggleWindow(...) abort$/;"	f
tagbar#autoopen	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! tagbar#autoopen(...) abort$/;"	f
tagbar#currentfile	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! tagbar#currentfile() abort$/;"	f
tagbar#currenttag	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttag(fmt, default, ...) abort$/;"	f
tagbar#debug#enabled	vim/pack/minpac/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#enabled() abort$/;"	f
tagbar#debug#log	vim/pack/minpac/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log(msg) abort$/;"	f
tagbar#debug#log_ctags_output	vim/pack/minpac/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log_ctags_output(output) abort$/;"	f
tagbar#debug#start_debug	vim/pack/minpac/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#start_debug(...) abort$/;"	f
tagbar#debug#stop_debug	vim/pack/minpac/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#stop_debug() abort$/;"	f
tagbar#gettypeconfig	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! tagbar#gettypeconfig(type) abort$/;"	f
tagbar#getusertypes	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! tagbar#getusertypes() abort$/;"	f
tagbar#highlighttag	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! tagbar#highlighttag(openfolds, force) abort$/;"	f
tagbar#inspect	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! tagbar#inspect(var) abort$/;"	f
tagbar#is_paused	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! tagbar#is_paused() abort$/;"	f
tagbar#prototypes#basetag#new	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! tagbar#prototypes#basetag#new(name) abort$/;"	f
tagbar#prototypes#fileinfo#new	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! tagbar#prototypes#fileinfo#new(fname, ftype, typeinfo) abort$/;"	f
tagbar#prototypes#kindheadertag#new	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! tagbar#prototypes#kindheadertag#new(name) abort$/;"	f
tagbar#prototypes#normaltag#new	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! tagbar#prototypes#normaltag#new(name) abort$/;"	f
tagbar#prototypes#pseudotag#new	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! tagbar#prototypes#pseudotag#new(name) abort$/;"	f
tagbar#prototypes#splittag#new	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! tagbar#prototypes#splittag#new(name) abort$/;"	f
tagbar#prototypes#typeinfo#new	vim/pack/minpac/start/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! tagbar#prototypes#typeinfo#new(...) abort$/;"	f
tagbar#sorting#sort	vim/pack/minpac/start/tagbar/autoload/tagbar/sorting.vim	/^function! tagbar#sorting#sort(tags, compareby, compare_typeinfo) abort$/;"	f
tagbar#state#get_current_file	vim/pack/minpac/start/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#get_current_file(force_current) abort$/;"	f
tagbar#state#set_current_file	vim/pack/minpac/start/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_current_file(fileinfo) abort$/;"	f
tagbar#state#set_paused	vim/pack/minpac/start/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_paused() abort$/;"	f
tagbar#toggle_pause	vim/pack/minpac/start/tagbar/autoload/tagbar.vim	/^function! tagbar#toggle_pause() abort$/;"	f
tagbar#types#ctags#init	vim/pack/minpac/start/tagbar/autoload/tagbar/types/ctags.vim	/^function! tagbar#types#ctags#init(supported_types) abort$/;"	f
tagbar#types#uctags#init	vim/pack/minpac/start/tagbar/autoload/tagbar/types/uctags.vim	/^function! tagbar#types#uctags#init(supported_types) abort$/;"	f
target	vim/pack/minpac/start/fzf/Makefile	/^target:$/;"	t
target/$(BINARY32)	vim/pack/minpac/start/fzf/Makefile	/^target\/$(BINARY32): $(SOURCES) vendor$/;"	t
target/$(BINARY64)	vim/pack/minpac/start/fzf/Makefile	/^target\/$(BINARY64): $(SOURCES) vendor$/;"	t
target/$(BINARYARM5)	vim/pack/minpac/start/fzf/Makefile	/^target\/$(BINARYARM5): $(SOURCES) vendor$/;"	t
target/$(BINARYARM6)	vim/pack/minpac/start/fzf/Makefile	/^target\/$(BINARYARM6): $(SOURCES) vendor$/;"	t
target/$(BINARYARM7)	vim/pack/minpac/start/fzf/Makefile	/^target\/$(BINARYARM7): $(SOURCES) vendor$/;"	t
target/$(BINARYARM8)	vim/pack/minpac/start/fzf/Makefile	/^target\/$(BINARYARM8): $(SOURCES) vendor$/;"	t
teardown	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestGoFZF
teardown	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def teardown$/;"	f	module:TestShell
template-curly-spacing	eslintrc.json	/^    "template-curly-spacing": ["error", "never"],$/;"	a	object:rules
template-tag-spacing	eslintrc.json	/^    "template-tag-spacing": ["error", "never"],$/;"	a	object:rules
templateStrings	eslintrc.json	/^      "templateStrings": false,$/;"	b	object:parserOptions.ecmaFeatures
tempname	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def tempname$/;"	f	class:TestBase
term	vim/pack/minpac/start/fzf/src/pattern.go	/^type term struct {$/;"	s	package:fzf
termEqual	vim/pack/minpac/start/fzf/src/pattern.go	/^	termEqual$/;"	c	package:fzf
termExact	vim/pack/minpac/start/fzf/src/pattern.go	/^	termExact$/;"	c	package:fzf
termFuzzy	vim/pack/minpac/start/fzf/src/pattern.go	/^	termFuzzy termType = iota$/;"	c	package:fzf
termPrefix	vim/pack/minpac/start/fzf/src/pattern.go	/^	termPrefix$/;"	c	package:fzf
termSet	vim/pack/minpac/start/fzf/src/pattern.go	/^type termSet []term$/;"	t	package:fzf
termSets	vim/pack/minpac/start/fzf/src/pattern.go	/^	termSets      []termSet$/;"	m	struct:fzf.Pattern
termSuffix	vim/pack/minpac/start/fzf/src/pattern.go	/^	termSuffix$/;"	c	package:fzf
termType	vim/pack/minpac/start/fzf/src/pattern.go	/^type termType int$/;"	t	package:fzf
test	vim/pack/minpac/start/fzf/Makefile	/^test: $(SOURCES) vendor$/;"	t
test_accept_non_empty	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_accept_non_empty$/;"	f	class:TestGoFZF
test_accept_non_empty_with_empty_list	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_empty_list$/;"	f	class:TestGoFZF
test_accept_non_empty_with_multi_selection	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_multi_selection$/;"	f	class:TestGoFZF
test_alt_c	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_alt_c$/;"	f	module:TestShell
test_alt_c_command	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_alt_c_command$/;"	f	module:TestShell
test_bind	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_bind$/;"	f	class:TestGoFZF
test_bind_print_query	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_bind_print_query$/;"	f	class:TestGoFZF
test_bind_replace_query	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_bind_replace_query$/;"	f	class:TestGoFZF
test_brush	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_brush(self):$/;"	m	class:TurtleTestCase
test_cancel	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_cancel$/;"	f	class:TestGoFZF
test_change_top	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_change_top$/;"	f	class:TestGoFZF
test_clear	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_clear(self):$/;"	m	class:CanvasTestCase
test_column	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_column(self):$/;"	m	class:LineTestCase
test_ctrl_r	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_ctrl_r$/;"	f	module:TestShell
test_ctrl_t	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_ctrl_t$/;"	f	module:TestShell
test_ctrl_t_unicode	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_ctrl_t_unicode$/;"	f	module:TestShell
test_custom_completion	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_custom_completion$/;"	f	module:CompletionTest
test_cycle	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_cycle$/;"	f	class:TestGoFZF
test_default_extended	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_default_extended$/;"	f	class:TestGoFZF
test_diagonal	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_diagonal(self):$/;"	m	class:LineTestCase
test_dir_completion	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_dir_completion$/;"	f	module:CompletionTest
test_dynamic_completion_loader	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_dynamic_completion_loader$/;"	f	class:TestBash
test_escaped_meta_characters	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_escaped_meta_characters$/;"	f	class:TestGoFZF
test_exact	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_exact$/;"	f	class:TestGoFZF
test_execute	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_execute$/;"	f	class:TestGoFZF
test_execute_multi	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_execute_multi$/;"	f	class:TestGoFZF
test_execute_plus_flag	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_execute_plus_flag$/;"	f	class:TestGoFZF
test_execute_shell	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_execute_shell$/;"	f	class:TestGoFZF
test_exit_0	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_exit_0$/;"	f	class:TestGoFZF
test_exit_0_exit_code	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_exit_0_exit_code$/;"	f	class:TestGoFZF
test_exitstatus_empty	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_exitstatus_empty$/;"	f	class:TestGoFZF
test_expect	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_expect$/;"	f	class:TestGoFZF
test_expect_print_query	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_expect_print_query$/;"	f	class:TestGoFZF
test_expect_print_query_select_1	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_expect_print_query_select_1$/;"	f	class:TestGoFZF
test_expect_printable_character_print_query	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_expect_printable_character_print_query$/;"	f	class:TestGoFZF
test_file_completion	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_file_completion$/;"	f	module:CompletionTest
test_file_completion_root	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_file_completion_root$/;"	f	module:CompletionTest
test_file_completion_unicode	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_file_completion_unicode$/;"	f	module:CompletionTest
test_file_word	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_file_word$/;"	f	class:TestGoFZF
test_filter_exitstatus	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_filter_exitstatus$/;"	f	class:TestGoFZF
test_frame	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_frame(self):$/;"	m	class:CanvasTestCase
test_fzf_default_command	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_fzf_default_command$/;"	f	class:TestGoFZF
test_fzf_default_command_failure	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_fzf_default_command_failure$/;"	f	class:TestGoFZF
test_get	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_get(self):$/;"	m	class:CanvasTestCase
test_header	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_header$/;"	f	class:TestGoFZF
test_header_and_header_lines	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_header_and_header_lines$/;"	f	class:TestGoFZF
test_header_and_header_lines_reverse	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_lines	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_header_lines$/;"	f	class:TestGoFZF
test_header_lines_overflow	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_header_lines_overflow$/;"	f	class:TestGoFZF
test_header_lines_reverse	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_lines_with_nth	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_header_lines_with_nth$/;"	f	class:TestGoFZF
test_header_reverse	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_header_reverse$/;"	f	class:TestGoFZF
test_history	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_history$/;"	f	class:TestGoFZF
test_hscroll_off	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_hscroll_off$/;"	f	class:TestGoFZF
test_invalid_cache	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_invalid_cache$/;"	f	class:TestGoFZF
test_invalid_cache_query_type	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_invalid_cache_query_type$/;"	f	class:TestGoFZF
test_invalid_option	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_invalid_option$/;"	f	class:TestGoFZF
test_jump	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_jump$/;"	f	class:TestGoFZF
test_jump_accept	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_jump_accept$/;"	f	class:TestGoFZF
test_key_bindings	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_key_bindings$/;"	f	class:TestGoFZF
test_long_line	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_long_line$/;"	f	class:TestGoFZF
test_margin	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_margin$/;"	f	class:TestGoFZF
test_margin_reverse	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_margin_reverse$/;"	f	class:TestGoFZF
test_max_min_limits	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_max_min_limits(self):$/;"	m	class:CanvasTestCase
test_multi_order	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_multi_order$/;"	f	class:TestGoFZF
test_no_clear	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_no_clear$/;"	f	class:TestGoFZF
test_or_operator	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_or_operator$/;"	f	class:TestGoFZF
test_partial_caching	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_partial_caching$/;"	f	class:TestGoFZF
test_position	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_position(self):$/;"	m	class:TurtleTestCase
test_preview	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_preview$/;"	f	class:TestGoFZF
test_preview_hidden	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_preview_hidden$/;"	f	class:TestGoFZF
test_preview_size_0	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_preview_size_0$/;"	f	class:TestGoFZF
test_preview_update_on_select	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_preview_update_on_select$/;"	f	class:TestGoFZF
test_process_completion	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_process_completion$/;"	f	module:CompletionTest
test_query_unicode	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_query_unicode$/;"	f	class:TestGoFZF
test_read0	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_read0$/;"	f	class:TestGoFZF
test_rotation	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_rotation(self):$/;"	m	class:TurtleTestCase
test_row	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_row(self):$/;"	m	class:LineTestCase
test_scroll	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_scroll$/;"	f	class:TestGoFZF
test_select_1	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_select_1$/;"	f	class:TestGoFZF
test_select_1_exit_0_fail	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_select_1_exit_0_fail$/;"	f	class:TestGoFZF
test_select_all_deselect_all_toggle_all	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_select_all_deselect_all_toggle_all$/;"	f	class:TestGoFZF
test_set	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_set(self):$/;"	m	class:CanvasTestCase
test_set_text	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_set_text(self):$/;"	m	class:CanvasTestCase
test_single_pixel	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_single_pixel(self):$/;"	m	class:LineTestCase
test_smart_case_for_each_term	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_smart_case_for_each_term$/;"	f	class:TestGoFZF
test_sync	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_sync$/;"	f	class:TestGoFZF
test_tabstop	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_tabstop$/;"	f	class:TestGoFZF
test_tac	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_tac$/;"	f	class:TestGoFZF
test_tac_nosort	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_tac_nosort$/;"	f	class:TestGoFZF
test_tac_sort	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_tac_sort$/;"	f	class:TestGoFZF
test_tiebreak	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_tiebreak$/;"	f	class:TestGoFZF
test_tiebreak_begin_algo_v2	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_tiebreak_begin_algo_v2$/;"	f	class:TestGoFZF
test_tiebreak_end	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_tiebreak_end$/;"	f	class:TestGoFZF
test_tiebreak_index_begin	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_tiebreak_index_begin$/;"	f	class:TestGoFZF
test_tiebreak_length_with_nth	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_tiebreak_length_with_nth$/;"	f	class:TestGoFZF
test_toggle	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_toggle(self):$/;"	m	class:CanvasTestCase
test_toggle_sort	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_toggle_sort$/;"	f	class:TestGoFZF
test_unicode_case	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_unicode_case$/;"	f	class:TestGoFZF
test_unset_completion	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_unset_completion$/;"	f	module:CompletionTest
test_unset_empty	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_unset_empty(self):$/;"	m	class:CanvasTestCase
test_unset_nonempty	vim/pack/minpac/start/vim-minimap/autoload/drawille/tests.py	/^    def test_unset_nonempty(self):$/;"	m	class:CanvasTestCase
test_vanilla	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_vanilla$/;"	f	class:TestGoFZF
test_with_nth	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_with_nth$/;"	f	class:TestGoFZF
test_with_nth_ansi	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_with_nth_ansi$/;"	f	class:TestGoFZF
test_with_nth_basic	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_with_nth_basic$/;"	f	class:TestGoFZF
test_with_nth_no_ansi	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def test_with_nth_no_ansi$/;"	f	class:TestGoFZF
tests	vim/pack/minpac/start/ale/run-tests.bat	/^if not "%1"=="" set tests=%1$/;"	v
tests	vim/pack/minpac/start/ale/run-tests.bat	/^set tests=test\/*.vader test\/*\/*.vader test\/*\/*\/*.vader test\/*\/*\/*\/*.vader$/;"	v
text	vim/pack/minpac/start/fzf/src/item.go	/^	text        util.Chars    \/\/ 32 = 24 + 1 + 1 + 2 + 4$/;"	m	struct:fzf.Item
text	vim/pack/minpac/start/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.Pattern
text	vim/pack/minpac/start/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.term
text	vim/pack/minpac/start/fzf/src/terminal.go	/^	text    string$/;"	m	struct:fzf.previewer
text	vim/pack/minpac/start/fzf/src/tokenizer.go	/^	text         *util.Chars$/;"	m	struct:fzf.Token
text	vim/pack/minpac/start/fzf/src/tui/light.go	/^	text         string$/;"	m	struct:tui.wrappedLine
th	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^    tw, th = getTerminalSize()$/;"	v
theme	vim/pack/minpac/start/fzf/src/terminal.go	/^	theme      *tui.ColorTheme$/;"	m	struct:fzf.Terminal
theme	vim/pack/minpac/start/fzf/src/tui/light.go	/^	theme         *ColorTheme$/;"	m	struct:tui.LightRenderer
theme	vim/pack/minpac/start/fzf/src/tui/tui.go	/^	theme        *ColorTheme$/;"	m	struct:tui.FullscreenRenderer
toActions	vim/pack/minpac/start/fzf/src/terminal.go	/^func toActions(types ...actionType) []action {$/;"	f	package:fzf
toggle	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def toggle(self, x, y):$/;"	m	class:Canvas
toggleItem	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) toggleItem(item *Item) {$/;"	f	unknown:fzf.Terminal
toggleSort	vim/pack/minpac/start/fzf/src/terminal.go	/^	toggleSort bool$/;"	m	struct:fzf.Terminal
toggleminimap	vim/pack/minpac/start/vim-minimap/autoload/minimap.py	/^def toggleminimap():$/;"	f
top	vim/pack/minpac/start/fzf/src/tui/light.go	/^	top      int$/;"	m	struct:tui.LightWindow
top	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	top         int$/;"	m	struct:tui.TcellWindow
tox	vim/pack/minpac/start/ale/test/command_callback/python_paths/namespace_package_tox/tox.ini	/^[tox]$/;"	s
trans	vim/pack/minpac/start/fzf/src/chunklist.go	/^	trans  ItemBuilder$/;"	m	struct:fzf.ChunkList
transformInput	vim/pack/minpac/start/fzf/src/pattern.go	/^func (p *Pattern) transformInput(item *Item) []Token {$/;"	f	unknown:fzf.Pattern
transformed	vim/pack/minpac/start/fzf/src/item.go	/^	transformed *[]Token      \/\/ 8$/;"	m	struct:fzf.Item
trimLeft	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) trimLeft(runes []rune, width int) ([]rune, int32) {$/;"	f	unknown:fzf.Terminal
trimLength	vim/pack/minpac/start/fzf/src/util/chars.go	/^	trimLength      uint16$/;"	m	struct:util.Chars
trimLengthKnown	vim/pack/minpac/start/fzf/src/util/chars.go	/^	trimLengthKnown bool$/;"	m	struct:util.Chars
trimQuery	vim/pack/minpac/start/fzf/src/terminal.go	/^func trimQuery(query string) []rune {$/;"	f	package:fzf
trimRight	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) trimRight(runes []rune, width int) ([]rune, int) {$/;"	f	unknown:fzf.Terminal
truncateQuery	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) truncateQuery() {$/;"	f	unknown:fzf.Terminal
trySkip	vim/pack/minpac/start/fzf/src/algo/algo.go	/^func trySkip(input *util.Chars, caseSensitive bool, b byte, from int) int {$/;"	f	package:algo
try_curl	vim/pack/minpac/start/fzf/install	/^try_curl() {$/;"	f
try_wget	vim/pack/minpac/start/fzf/install	/^try_wget() {$/;"	f
ttyin	vim/pack/minpac/start/fzf/src/tui/light.go	/^	ttyin         *os.File$/;"	m	struct:tui.LightRenderer
ttyname	vim/pack/minpac/start/fzf/src/tui/ttyname_unix.go	/^func ttyname() string {$/;"	f	package:tui
ttyname	vim/pack/minpac/start/fzf/src/tui/ttyname_windows.go	/^func ttyname() string {$/;"	f	package:tui
tui	vim/pack/minpac/start/fzf/src/terminal.go	/^	tui        tui.Renderer$/;"	m	struct:fzf.Terminal
tui	vim/pack/minpac/start/fzf/src/tui/dummy.go	/^package tui$/;"	p
tui	vim/pack/minpac/start/fzf/src/tui/light.go	/^package tui$/;"	p
tui	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^package tui$/;"	p
tui	vim/pack/minpac/start/fzf/src/tui/ttyname_unix.go	/^package tui$/;"	p
tui	vim/pack/minpac/start/fzf/src/tui/ttyname_windows.go	/^package tui$/;"	p
tui	vim/pack/minpac/start/fzf/src/tui/tui.go	/^package tui$/;"	p
tui	vim/pack/minpac/start/fzf/src/tui/tui_test.go	/^package tui$/;"	p
tw	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^    tw, th = getTerminalSize()$/;"	v
typ	vim/pack/minpac/start/fzf/src/pattern.go	/^	typ           termType$/;"	m	struct:fzf.term
unichr	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    unichr = chr$/;"	v
unicode-bom	eslintrc.json	/^    "unicode-bom": ["error", "never"],$/;"	a	object:rules
unicodeCodePointEscapes	eslintrc.json	/^      "unicodeCodePointEscapes": false,$/;"	b	object:parserOptions.ecmaFeatures
unimpaired	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^augroup unimpaired$/;"	a
unimpaired.vim	vim/pack/minpac/start/vim-unimpaired/README.markdown	/^# unimpaired.vim$/;"	c
unimpaired_paste	vim/pack/minpac/start/vim-unimpaired/plugin/unimpaired.vim	/^  augroup unimpaired_paste$/;"	a
uninstall	vim/pack/minpac/start/colorizer/Makefile	/^uninstall:$/;"	t
unset	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def unset(self, x, y):$/;"	m	class:Canvas
unset_var	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def unset_var(name)$/;"	f	module:TestShell
unsets	vim/pack/minpac/start/fzf/test/test_go.rb	/^    def unsets$/;"	S	class:Shell
until	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def until(refresh = false, pane = 0)$/;"	f
up	vim/pack/minpac/start/vim-minimap/autoload/drawille/drawille.py	/^    def up(self):$/;"	m	class:Turtle
upOneLine	vim/pack/minpac/start/fzf/src/tui/light.go	/^	upOneLine     bool$/;"	m	struct:tui.LightRenderer
updateTerminalSize	vim/pack/minpac/start/fzf/src/tui/light.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f	unknown:tui.LightRenderer
updateminimap	vim/pack/minpac/start/vim-minimap/autoload/minimap.py	/^def updateminimap():$/;"	f
url	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^        url = 'http:\/\/xkcd.com\/'$/;"	v
url	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^        url = argv[1]$/;"	v
usage	vim/pack/minpac/start/fzf.vim/bin/preview.rb	/^def usage$/;"	f
usage	vim/pack/minpac/start/fzf/src/options.go	/^const usage = `usage: fzf [options]$/;"	c	package:fzf
usage	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^def usage():$/;"	f
usage: fzf-tmux [-u|-d [HEIGHT[%]]] [-l|-r [WIDTH[%]]] [--] [FZF OPTIONS]	vim/pack/minpac/start/fzf/README.md	/^# usage: fzf-tmux [-u|-d [HEIGHT[%]]] [-l|-r [WIDTH[%]]] [--] [FZF OPTIONS]$/;"	c
use-isnan	eslintrc.json	/^    "use-isnan": "error",$/;"	s	object:rules
use-isnan	eslintrc.json	/^    "use-isnan": 0,$/;"	n	object:rules
use_raw_list	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	vim/pack/minpac/start/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
util	vim/pack/minpac/start/fzf/src/util/atomicbool.go	/^package util$/;"	p
util	vim/pack/minpac/start/fzf/src/util/atomicbool_test.go	/^package util$/;"	p
util	vim/pack/minpac/start/fzf/src/util/chars.go	/^package util$/;"	p
util	vim/pack/minpac/start/fzf/src/util/chars_test.go	/^package util$/;"	p
util	vim/pack/minpac/start/fzf/src/util/eventbox.go	/^package util$/;"	p
util	vim/pack/minpac/start/fzf/src/util/eventbox_test.go	/^package util$/;"	p
util	vim/pack/minpac/start/fzf/src/util/slab.go	/^package util$/;"	p
util	vim/pack/minpac/start/fzf/src/util/util.go	/^package util$/;"	p
util	vim/pack/minpac/start/fzf/src/util/util_test.go	/^package util$/;"	p
util	vim/pack/minpac/start/fzf/src/util/util_unix.go	/^package util$/;"	p
util	vim/pack/minpac/start/fzf/src/util/util_windows.go	/^package util$/;"	p
v	vim/pack/minpac/start/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> v <NOP>$/;"	m
valid-jsdoc	eslintrc.json	/^    "valid-jsdoc": 0,$/;"	n	object:rules
valid-typeof	eslintrc.json	/^    "valid-typeof": 0,$/;"	n	object:rules
valid-typeof	eslintrc.json	/^    "valid-typeof": ["error", { "requireStringLiterals": true }],$/;"	a	object:rules
variables	eslintrc.json	/^    "no-use-before-define": ["error", { "functions": false, "classes": false, "variables": false/;"	b	object:rules.no-use-before-define.1
vars	eslintrc.json	/^    "no-unused-vars": ["error", { "vars": "all", "args": "none", "ignoreRestSiblings": true }],$/;"	s	object:rules.no-unused-vars.1
vars-on-top	eslintrc.json	/^    "vars-on-top": 0,$/;"	n	object:rules
vendor	vim/pack/minpac/start/fzf/Makefile	/^vendor: $(GLIDE_YAML)$/;"	t
version	vim/pack/minpac/start/fzf/src/constants.go	/^	version = "0.17.3"$/;"	c	package:fzf
version	vim/pack/minpac/start/fzf/src/terminal.go	/^	version    int64$/;"	m	struct:fzf.Terminal
vertices	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^vertices = [$/;"	v
vmove	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) vmove(o int, allowCycle bool) {$/;"	f	unknown:fzf.Terminal
vset	vim/pack/minpac/start/fzf/src/terminal.go	/^func (t *Terminal) vset(o int) bool {$/;"	f	unknown:fzf.Terminal
w	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^        w = tw$/;"	v
w	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^    w, h = i.size$/;"	v
wait	vim/pack/minpac/start/fzf/test/test_go.rb	/^def wait$/;"	f
width	vim/pack/minpac/start/fzf/src/terminal.go	/^	width    int$/;"	m	struct:fzf.itemLine
width	vim/pack/minpac/start/fzf/src/tui/light.go	/^	width         int$/;"	m	struct:tui.LightRenderer
width	vim/pack/minpac/start/fzf/src/tui/light.go	/^	width    int$/;"	m	struct:tui.LightWindow
width	vim/pack/minpac/start/fzf/src/tui/tcell.go	/^	width       int$/;"	m	struct:tui.TcellWindow
width	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^width = 100$/;"	v
window	eslintrc.json	/^    "window": false$/;"	b	object:globals
window	vim/pack/minpac/start/fzf/src/terminal.go	/^	window     tui.Window$/;"	m	struct:fzf.Terminal
windowPosition	vim/pack/minpac/start/fzf/src/options.go	/^type windowPosition int$/;"	t	package:fzf
withIndex	vim/pack/minpac/start/fzf/src/result_test.go	/^func withIndex(i *Item, index int) *Item {$/;"	f	package:fzf
withPrefixLengths	vim/pack/minpac/start/fzf/src/tokenizer.go	/^func withPrefixLengths(tokens []string, begin int) []Token {$/;"	f	package:fzf
wombat	vim/pack/minpac/start/lightline.vim/README.md	/^### wombat$/;"	S
wordNext	vim/pack/minpac/start/fzf/src/terminal.go	/^	wordNext   string$/;"	m	struct:fzf.Terminal
wordRubout	vim/pack/minpac/start/fzf/src/terminal.go	/^	wordRubout string$/;"	m	struct:fzf.Terminal
words	eslintrc.json	/^    "space-unary-ops": ["error", { "words": true, "nonwords": false }],$/;"	b	object:rules.space-unary-ops.1
wrap	vim/pack/minpac/start/fzf/src/options.go	/^	wrap     bool$/;"	m	struct:fzf.previewOpts
wrap-iife	eslintrc.json	/^    "wrap-iife": 0,$/;"	n	object:rules
wrap-iife	eslintrc.json	/^    "wrap-iife": ["error", "any", { "functionPrototypeMethods": true }],$/;"	a	object:rules
wrap-regex	eslintrc.json	/^    "wrap-regex": 0,$/;"	n	object:rules
wrapLine	vim/pack/minpac/start/fzf/src/tui/light.go	/^func wrapLine(input string, prefixLength int, max int, tabstop int) []wrappedLine {$/;"	f	package:tui
wrapped.newsink	vim/pack/minpac/start/fzf.vim/autoload/fzf/vim.vim	/^  function! wrapped.newsink(lines)$/;"	f
wrappedLine	vim/pack/minpac/start/fzf/src/tui/light.go	/^type wrappedLine struct {$/;"	s	package:tui
writelines	vim/pack/minpac/start/fzf/test/test_go.rb	/^  def writelines(path, lines)$/;"	f	class:TestBase
x	vim/pack/minpac/start/fzf/src/tui/light.go	/^	x             int$/;"	m	struct:tui.LightRenderer
x	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^            x = 0$/;"	v
x	vim/pack/minpac/start/vim-minimap/autoload/drawille/examples/xkcd.py	/^    x = y = 0$/;"	v
y	vim/pack/minpac/start/fzf/src/tui/light.go	/^	y             int$/;"	m	struct:tui.LightRenderer
yanked	vim/pack/minpac/start/fzf/src/terminal.go	/^	yanked     []rune$/;"	m	struct:fzf.Terminal
yield-star-spacing	eslintrc.json	/^    "yield-star-spacing": ["error", "both"],$/;"	a	object:rules
yoda	eslintrc.json	/^    "yoda": 0,$/;"	n	object:rules
yoda	eslintrc.json	/^    "yoda": ["error", "never"],$/;"	a	object:rules
yoffset	vim/pack/minpac/start/fzf/src/tui/light.go	/^	yoffset       int$/;"	m	struct:tui.LightRenderer
zS	vim/pack/minpac/opt/vim-scriptease/plugin/scriptease.vim	/^  nmap zS <Plug>ScripteaseSynnames$/;"	m
zsh	vim/pack/minpac/start/fzf/test/test_go.rb	/^    def zsh$/;"	S	class:Shell
{	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^  nmap <buffer> {    <plug>(grepper-side-context-prev)<cr>$/;"	m
{} is replaced to the single-quoted string of the focused line	vim/pack/minpac/start/fzf/README.md	/^# {} is replaced to the single-quoted string of the focused line$/;"	c
}	vim/pack/minpac/start/vim-grepper/plugin/grepper.vim	/^  nmap <buffer> }    <plug>(grepper-side-context-next)<cr>$/;"	m
